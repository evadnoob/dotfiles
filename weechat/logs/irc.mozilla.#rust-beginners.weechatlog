2016-12-13 15:24:14	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2016-12-13 15:24:14	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2016-12-13 15:24:14	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2016-12-13 15:24:14	⚡	Channel #rust-beginners: 576 nicks (3 ops, 0 halfops, 0 voices, 573 normals)
2016-12-13 15:24:17	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2016-12-13 15:24:22	voider1	as .exe*
2016-12-13 15:24:28	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2016-12-13 15:25:31	stephaneyfx	voider1: did you follow what WindowsBunny indicated? http://doc.crates.io/manifest.html#configuring-a-target
2016-12-13 15:26:08	voider1	I guess.
2016-12-13 15:26:08	voider1	https://is.gd/u2XotM
2016-12-13 15:27:31	◣	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has quit (Ping timeout: 121 seconds)
2016-12-13 15:28:16	◥	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has joined #rust-beginners
2016-12-13 15:28:20	stephaneyfx	voider1: how about using "lib" instead of "bin" for your dll target?
2016-12-13 15:29:11	voider1	Ahhh
2016-12-13 15:29:12	voider1	Maybe
2016-12-13 15:30:20	voider1	Well, that doesn't work.
2016-12-13 15:30:44	◣	FreeBird (FreeBird@moz-32g3sn.g3ns.5eqj.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 15:31:34	◥	nom-ent (user@moz-lcjjd9.resnet.messiah.edu) has joined #rust-beginners
2016-12-13 15:32:36	◣	salpalvv (danielcolle@moz-38grbd.ip.windstream.net) has quit (Ping timeout: 121 seconds)
2016-12-13 15:33:01	◥	vvv (Thunderbird@moz-mola5p.snap.volia.net) has joined #rust-beginners
2016-12-13 15:33:24	◣	sneaker (thomas@moz-blt.n21.144.213.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 15:34:11	◥	kazagistar (Adium@moz-br6.b81.207.205.IP) has joined #rust-beginners
2016-12-13 15:35:24	voider1	Alright, I'm getting a bit further.
2016-12-13 15:35:52	◣	nom-ent (user@moz-lcjjd9.resnet.messiah.edu) has quit (Ping timeout: 121 seconds)
2016-12-13 15:35:52	voider1	stephaneyfx: https://is.gd/YnWp9m says D:\winapi_test\src/bin/test.rs:18: undefined reference to `set_up_keyboard_hook'
2016-12-13 15:36:20	◣	cjhowe (cjhowe@moz-jnal4r.mci.googlefiber.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-13 15:38:06	◣	mib_43lzci (Mibbit@moz-1lnae3.dynamic.surfer.at) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-13 15:39:23	stephaneyfx	voider1: could you post your .rs for the dll?
2016-12-13 15:39:35	voider1	Of course.
2016-12-13 15:39:50	voider1	https://is.gd/qFRluE
2016-12-13 15:40:33	stephaneyfx	voider1: set_up_keyboard_hook is private to its module
2016-12-13 15:41:23	stephaneyfx	voider1: you need to make it pub and/or do something that the dll exports it
2016-12-13 15:41:31	stephaneyfx	so* that
2016-12-13 15:42:41	◥	saimen (saimen@moz-i2kas4.natpool.mwn.de) has joined #rust-beginners
2016-12-13 15:42:50	voider1	I made it pub, but I still get the error.
2016-12-13 15:43:13	voider1	D:\winapi_test\src/bin/test.rs:18: undefined reference to `set_up_keyboard_hook'
2016-12-13 15:43:36	◥	himi (sjjf@moz-9pb.ksq.203.150.IP) has joined #rust-beginners
2016-12-13 15:43:38	stephaneyfx	voider1: it may need to be marked extern or something because from the point of view of your main function, that's a C function
2016-12-13 15:43:54	voider1	pub extern fn?
2016-12-13 15:44:00	voider1	or extern pub fn?
2016-12-13 15:44:06	stephaneyfx	voider1: i don't know
2016-12-13 15:45:19	◥	xor (xor@moz-5lgrnv.rev.vodafone.pt) has joined #rust-beginners
2016-12-13 15:46:28	◣	ufobat (Martin@moz-lviaj6.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2016-12-13 15:47:54	voider1	pub extern "C", no luck.
2016-12-13 15:49:19	◥	salpalvv (danielcolle@moz-38grbd.ip.windstream.net) has joined #rust-beginners
2016-12-13 15:50:43	◣	parrip (ryan@moz-a2onff.xtra.co.nz) has quit (Quit: This computer has gone to sleep)
2016-12-13 15:50:55	kazagistar	voider1: have you tried #[no_mangle]?
2016-12-13 15:50:58	kazagistar	https://doc.rust-lang.org/1.1.0/book/ffi.html#calling-rust-code-from-c
2016-12-13 15:51:12	voider1	kazagistar I just tried that.
2016-12-13 15:51:18	◥	parrip (ryan@moz-a2onff.xtra.co.nz) has joined #rust-beginners
2016-12-13 15:51:39	◣	salpalvv (danielcolle@moz-38grbd.ip.windstream.net) has quit (Connection closed)
2016-12-13 15:51:48	◣	cmyr (cmyr@moz-bfu9ov.cpe.teksavvy.com) has quit (Client exited)
2016-12-13 15:51:48	voider1	https://is.gd/6JrqNN
2016-12-13 15:52:43	stephaneyfx	voider1: you could use a tool like dependencywalker to inspect the dll and make sure the function is exported with the proper name.
2016-12-13 15:54:27	voider1	I'm trying it now.
2016-12-13 15:55:07	voider1	Ohmy, where do I ahve to look?
2016-12-13 15:55:15	voider1	stephaneyfx
2016-12-13 15:55:39	stephaneyfx	voider1: the panel on the right should list exported symbols
2016-12-13 15:56:04	voider1	Is there a search function? XD
2016-12-13 15:56:04	◣	mexisme2 (mexisme@moz-dlf.n66.149.118.IP) has quit (Connection closed)
2016-12-13 15:56:16	◥	mexisme (mexisme@moz-15mtqr.vf.net.nz) has joined #rust-beginners
2016-12-13 15:56:18	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-13 15:56:39	◥	cjhowe (cjhowe@moz-hlme8b.1cuh.qeg5.a601.2605.IP) has joined #rust-beginners
2016-12-13 15:57:52	◣	macshaggy (macshaggy@moz-var23h.o25d.8ban.0304.2602.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 15:58:24	◣	parrip (ryan@moz-a2onff.xtra.co.nz) has quit (Quit: This computer has gone to sleep)
2016-12-13 15:58:26	voider1	AH>
2016-12-13 16:00:34	voider1	I've got the problem guys.
2016-12-13 16:00:34	◣	vvv (Thunderbird@moz-mola5p.snap.volia.net) has quit (Client exited)
2016-12-13 16:00:36	voider1	cdylib is the problem.
2016-12-13 16:00:36	voider1	If I change cdylib -> dylib he creates a dll file.
2016-12-13 16:00:36	voider1	Otherwise it doesn't.
2016-12-13 16:00:36	◥	macshaggy (macshaggy@moz-m86ver.o25d.8ban.0304.2602.IP) has joined #rust-beginners
2016-12-13 16:00:36	voider1	stephaneyfx
2016-12-13 16:00:36	◣	urcra (urcra@moz-9lk9gn.cpe.webspeed.dk) has quit (Connection closed)
2016-12-13 16:01:21	stephaneyfx	voider1: i don't even see cdylib in https://doc.rust-lang.org/reference.html#linkage, but the description of dylib looks like what you need indeed
2016-12-13 16:01:31	voider1	Yeah, exactly.
2016-12-13 16:01:51	voider1	Alright, but I still get the error.
2016-12-13 16:01:53	voider1	1428
2016-12-13 16:02:33	◥	hansaplast (hansaplast@moz-hk2rf2.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-13 16:02:38	~steveklabnik	stephaneyfx: the docs lagged a bit
2016-12-13 16:02:42	stephaneyfx	voider1: show me your dll .rs
2016-12-13 16:03:14	stephaneyfx	steveklabnik: no problem. i know what is like to maintain docs and i feel rust is doing pretty well already. thank you :)
2016-12-13 16:03:21	voider1	https://is.gd/6JrqNN
2016-12-13 16:03:21	stephaneyfx	what it* is
2016-12-13 16:03:44	◣	sscott (Thunderbird@moz-lksml6.stvt.i7og.0c7d.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 16:04:16	◥	ivesen (ivesen@moz-f6la1q.stayon.no) has joined #rust-beginners
2016-12-13 16:04:28	◣	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 16:04:36	stephaneyfx	voider1: you're still calling GetModuleHandle(nullptr) which returns the handle to the exe. i mentioned before you needed to change that to get a handle to the dll instead.
2016-12-13 16:04:48	voider1	How would I do that?
2016-12-13 16:06:07	◥	parrip (ryan@moz-a2onff.xtra.co.nz) has joined #rust-beginners
2016-12-13 16:06:09	stephaneyfx	voider1: https://lmgtfy.com/?q=getmodulehandle
2016-12-13 16:06:24	~steveklabnik	:)
2016-12-13 16:06:30	◣	federico__ (federico@moz-vqh.d3m.108.201.IP) has quit (Connection closed)
2016-12-13 16:06:33	voider1	I use ddg.
2016-12-13 16:06:33	voider1	=P
2016-12-13 16:06:34	◣	hansaplast (hansaplast@moz-hk2rf2.ve71.89v9.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 16:06:38	voider1	Step up your game.
2016-12-13 16:07:01	◣	Aankhen`` (notasquid@moz-398.0gm.7.27.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 16:07:54	voider1	So passing in a String to GetModuleHandle is no good, it expects a u16, weird.
2016-12-13 16:08:15	◣	canaltinova (uid191250@moz-l3qbqh.tooting.irccloud.com) has quit (Quit: )
2016-12-13 16:08:22	◥	Aankhen`` (notasquid@moz-398.0gm.7.27.IP) has joined #rust-beginners
2016-12-13 16:13:50	stephaneyfx	rustbot: "blah".encode_utf16().collect::<Vec<_>>()
2016-12-13 16:13:53	◣	insaneinside (user@moz-ck7c5n.customer.broadstripe.net) has quit (Ping timeout: 121 seconds)
2016-12-13 16:13:55	stephaneyfx	!rustbot: "blah".encode_utf16().collect::<Vec<_>>()
2016-12-13 16:14:06	stephaneyfx	oh well... :p
2016-12-13 16:15:20	stephaneyfx	voider1: or maybe use OsString
2016-12-13 16:15:35	rkruppe	stephaneyfx: it's playbot
2016-12-13 16:15:51	stephaneyfx	rkruppe: thank you :p
2016-12-13 16:17:05	voider1	stephaneyfx: I was trying CString, didn't work, going to try Osstring.
2016-12-13 16:21:45	rodarmor	For any windows devs out there, what's your setup like? Do you use cmd.exe to run commands?
2016-12-13 16:22:10	rkruppe	cmd or powershell
2016-12-13 16:22:12	stephaneyfx	rodarmor: cmd to run cargo, but not sure that's the best setup :p
2016-12-13 16:22:21	~steveklabnik	rodarmor:  i use the new bash system
2016-12-13 16:22:25	~steveklabnik	and VS: Code
2016-12-13 16:22:58	~steveklabnik	and i gotta step out
2016-12-13 16:23:01	voider1	stephaneyfx: https://is.gd/NgfLfO so this gives no errors, but I get the 1428 from GetLastError.
2016-12-13 16:23:02	~steveklabnik	but it works really well for me
2016-12-13 16:23:03	rodarmor	steveklabnik: Hmmm, but what about for windows specific projects? If you're using the bash system, doesn't that mean you're building ELF binaries and running them in the linux subsystem?
2016-12-13 16:23:09	~steveklabnik	nope
2016-12-13 16:23:24	rodarmor	steveklabnik: How do I get the bash system?
2016-12-13 16:23:27	rodarmor	I'm totally clueless.
2016-12-13 16:23:33	~steveklabnik	or at least
2016-12-13 16:23:54	~steveklabnik	not to my knowledge
2016-12-13 16:24:02	~steveklabnik	i am not sure; i use windows 10, i think it was pre-installed? i forget
2016-12-13 16:24:03	stephaneyfx	voider1: could you check what GetModuleHandle return?
2016-12-13 16:24:06	~steveklabnik	but i do gotta run, sorry :(
2016-12-13 16:24:13	rodarmor	steveklabnik: np, thanks for the help!
2016-12-13 16:24:35	rodarmor	rkruppe and stephaneyfx: What about version control? Do you use git-bash?
2016-12-13 16:24:47	rkruppe	yeah
2016-12-13 16:24:48	▷	stephaneyfx nods
2016-12-13 16:24:59	voider1	stepahenyfx: 0x0, yeah, no good.
2016-12-13 16:25:10	stephaneyfx	voider1: try full path
2016-12-13 16:25:15	rodarmor	Okay, cool. Thanks for the info?
2016-12-13 16:25:26	rodarmor	s/?/!/
2016-12-13 16:25:27	stephaneyfx	rodarmor: yw?
2016-12-13 16:25:32	stephaneyfx	:)
2016-12-13 16:25:37	rodarmor	steveklabnik: Haha, I can't keyboard
2016-12-13 16:25:48	rodarmor	stephaneyfx: I *really* can't keyboard today.
2016-12-13 16:26:35	voider1	0x0
2016-12-13 16:26:40	◣	MarwenDo (MarwenDo@moz-5a5.id4.15.197.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 16:27:18	voider1	Maybe the type conversion fucks it up?
2016-12-13 16:27:32	voider1	as *const u16
2016-12-13 16:27:39	stephaneyfx	voider1: likely. looks like you're still using CString which is incorrect
2016-12-13 16:28:18	stephaneyfx	voider1: don't do pointer casts unless you really know what you're doing
2016-12-13 16:29:09	voider1	Let me see OsString.
2016-12-13 16:29:38	◥	tsv (macshaggy@moz-g9q6q7.chrlnc.sbcglobal.net) has joined #rust-beginners
2016-12-13 16:31:23	voider1	stephaneyfx: So you create a new empty OsString, and then?
2016-12-13 16:31:52	◣	macshaggy (macshaggy@moz-m86ver.o25d.8ban.0304.2602.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 16:36:39	◥	martinium (martinium@moz-fce.kt4.181.107.IP) has joined #rust-beginners
2016-12-13 16:37:52	⚡	bc is now known as bc|bbl
2016-12-13 16:38:30	stephaneyfx	voider1: https://is.gd/fGfB6I
2016-12-13 16:38:39	◥	saml_ (saml@moz-rkfmct.res.rr.com) has joined #rust-beginners
2016-12-13 16:41:20	voider1	I still need a ptr, hmm.
2016-12-13 16:41:36	stephaneyfx	voider1: how about as_ptr?
2016-12-13 16:43:05	voider1	That works, I get a 0.
2016-12-13 16:43:37	◣	kazagistar (Adium@moz-br6.b81.207.205.IP) has quit (Quit: Leaving.)
2016-12-13 16:43:44	voider1	But the lpfn function doesn't work.
2016-12-13 16:43:53	stephaneyfx	voider1: what's your code like now?
2016-12-13 16:44:13	◥	wallacoloo___ (colin@moz-uilj4i.tukw.qwest.net) has joined #rust-beginners
2016-12-13 16:44:25	voider1	In the dll?
2016-12-13 16:44:39	voider1	https://is.gd/4NK6GD
2016-12-13 16:44:55	voider1	https://is.gd/Rf1240 this is the exe
2016-12-13 16:45:21	stephaneyfx	voider1: what does GetModuleHandle return?
2016-12-13 16:47:38	◥	mexisme2 (mexisme@moz-dlf.n66.149.118.IP) has joined #rust-beginners
2016-12-13 16:48:00	voider1	stephaneyfx: 0x6de00000
2016-12-13 16:48:27	stephaneyfx	voider1: so what is not working now?
2016-12-13 16:48:37	voider1	So the lpfn function has a println!
2016-12-13 16:48:44	voider1	It never prints.
2016-12-13 16:48:49	voider1	Even not when I type.
2016-12-13 16:48:58	voider1	Which it should do.
2016-12-13 16:49:00	stephaneyfx	voider1: does registering the hook return success?
2016-12-13 16:49:14	◥	junqed (junqed@moz-b2t.crf.70.178.IP) has joined #rust-beginners
2016-12-13 16:49:30	voider1	I call println!("{}", kernel32::GetLastError()); after set_up_keyboard_hook()
2016-12-13 16:49:37	voider1	Returns 0.
2016-12-13 16:49:38	voider1	Which means success.
2016-12-13 16:50:32	◣	mexisme (mexisme@moz-15mtqr.vf.net.nz) has quit (Ping timeout: 121 seconds)
2016-12-13 16:50:39	◣	Pwnna (Pwnna@moz-vs906a.thekks.net) has quit (Quit: mrrow~)
2016-12-13 16:52:23	WindowsBunnyHorizon	rodarmor: I use powershell and I use git inside powershell
2016-12-13 16:52:34	◥	cp (cp@moz-in5b5l.asahi-net.or.jp) has joined #rust-beginners
2016-12-13 16:53:16	◣	junqed (junqed@moz-b2t.crf.70.178.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 16:54:03	voider1	stephaneyfx: What do you think?
2016-12-13 16:54:31	stephaneyfx	voider1: not sure. try to write to a file instead (i mean from the hook).
2016-12-13 16:55:17	◣	kartik (k4rtik@moz-432.r5r.16.138.IP) has quit (A TLS packet with unexpected length was received.)
2016-12-13 16:55:21	◥	Pwnna (Pwnna@moz-vs906a.thekks.net) has joined #rust-beginners
2016-12-13 16:56:45	◣	FallingAlways (Ray@moz-q6r.mb0.203.159.IP) has quit (Quit: I got fired.)
2016-12-13 16:57:01	◥	i-amd3 (i-amd3@moz-glc7rs.ucom.ne.jp) has joined #rust-beginners
2016-12-13 16:58:34	◣	AdamBalan (AdamBalan@moz-9o13he.cg.shawcable.net) has quit (Ping timeout: 121 seconds)
2016-12-13 16:58:46	◥	FallingAlways (Ray@moz-q6r.mb0.203.159.IP) has joined #rust-beginners
2016-12-13 17:08:08	◥	scrogson1 (scrogson@moz-i90639.tftc.9t39.0306.2602.IP) has joined #rust-beginners
2016-12-13 17:08:33	stephaneyfx	WindowsBunnyHorizon: fyi i checked one of my work projects and it registers a global mouse hook without a dll and it works, so i don't understand the msdn excerpts anymore...
2016-12-13 17:08:55	fungos_	Is there a way to transform an Option<_> into a Value or an Error (if None) without using matching? Something like  try!(getOption()).or(Err(...)) ?
2016-12-13 17:09:23	WindowsBunnyHorizon	stephaneyfx: I just have no idea at this point
2016-12-13 17:09:39	stephaneyfx	WindowsBunnyHorizon: we're on the same boat then :)
2016-12-13 17:09:44	voider1	Me neither, I know that this almost works.
2016-12-13 17:10:07	voider1	I get no errors at this point, but the lpfn function just has to work, which I'll looka t tomorrow.
2016-12-13 17:10:29	stephaneyfx	fungos_: ok_or?
2016-12-13 17:10:44	@mbrubeck	fungos_: https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or
2016-12-13 17:11:23	◣	silven (quassel@moz-28hrbk.priv.bahnhof.se) has quit (Ping timeout: 121 seconds)
2016-12-13 17:12:06	fungos_	stephaneyfx mbrubeck thanks.. that should do it
2016-12-13 17:12:10	◣	scrogson1 (scrogson@moz-i90639.tftc.9t39.0306.2602.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 17:13:10	◣	voider1 (voider1@moz-ku2jgf.dynamic.ziggo.nl) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-12-13 17:13:36	◥	silven (quassel@moz-28hrbk.priv.bahnhof.se) has joined #rust-beginners
2016-12-13 17:13:38	◥	AdamBalan (AdamBalan@moz-9o13he.cg.shawcable.net) has joined #rust-beginners
2016-12-13 17:15:18	◣	wallacoloo___ (colin@moz-uilj4i.tukw.qwest.net) has quit (Client exited)
2016-12-13 17:15:21	◣	handyman (handyman@moz-8edbuf.subp.5lka.0645.2601.IP) has quit (Quit: )
2016-12-13 17:15:40	◣	martinium (martinium@moz-fce.kt4.181.107.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 17:17:56	◣	rkruppe (rkruppe@moz-g7v5go.dyn.telefonica.de) has quit (Quit: Bye)
2016-12-13 19:37:20	⚡	irc: disconnected from server
2016-12-13 19:37:33	◥	boon (d8v3@moz-cf64oa.eqdp.1nof.0602.2601.IP) has joined #rust-beginners
2016-12-13 19:37:33	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2016-12-13 19:37:33	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2016-12-13 19:37:33	⚡	Channel #rust-beginners: 560 nicks (3 ops, 0 halfops, 0 voices, 557 normals)
2016-12-13 19:37:37	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2016-12-13 19:39:45	◣	sciamp (sciamp@moz-n5m3gt.scia.mp) has quit (Ping timeout: 121 seconds)
2016-12-13 19:41:30	◥	kimundi (kimundi@moz-cu010n.ktra.e61q.57bc.2002.IP) has joined #rust-beginners
2016-12-13 19:41:51	◣	memorion (memorion@moz-ssjd3f.pools.vodafone-ip.de) has quit (Ping timeout: 121 seconds)
2016-12-13 19:42:28	◥	sciamp (sciamp@moz-n5m3gt.scia.mp) has joined #rust-beginners
2016-12-13 19:43:12	◥	memorion (memorion@moz-05nhpn.pools.vodafone-ip.de) has joined #rust-beginners
2016-12-13 19:44:25	◣	nom-ent (user@moz-mng.764.42.153.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 19:46:40	@niconii	kcodrgkimd_: correct
2016-12-13 19:48:06	CyclopeanSickle	Is there a more idiomatic way to write main() in https://is.gd/ilyhq7 ?
2016-12-13 19:48:49	CyclopeanSickle	I'd be using do-while in C, but Rust doesn't have that
2016-12-13 19:49:00	Sergio	CyclopeanSickle: Make `is_incomplete` a method of `RunResult`.
2016-12-13 19:49:09	Sergio	Then do while r.is_incomplete() { ... }
2016-12-13 19:49:42	XMPPwocky	or "while let"
2016-12-13 19:49:48	@niconii	CyclopeanSickle: while let RunResult::Incomplete = r {
2016-12-13 19:49:57	XMPPwocky	https://play.rust-lang.org/?gist=813257ecda32764d3621211bd54c7915&version=stable&backtrace=0
2016-12-13 19:50:00	CyclopeanSickle	Is there a way to avoid having to call run_command twice, though?
2016-12-13 19:50:24	CyclopeanSickle	In the "real code," it's about 5-6 lines
2016-12-13 19:51:00	CyclopeanSickle	I'm replacing it here with a function call because that's easier than transplanting everything else 
2016-12-13 19:52:03	XMPPwocky	    while let RunResult::Ok(r) = run_command(&line) {
2016-12-13 19:52:05	XMPPwocky	if that's an option
2016-12-13 19:52:15	XMPPwocky	https://is.gd/t6U5Oc
2016-12-13 19:52:45	CyclopeanSickle	Wow, that feels like something I should've seen. Thanks!
2016-12-13 19:53:05	XMPPwocky	the catch is you can't use "r" outside the loop body
2016-12-13 19:53:50	CyclopeanSickle	The complex code is setting r via a mutable reference anyway
2016-12-13 19:54:01	CyclopeanSickle	So it all works out
2016-12-13 19:55:46	◥	nom-ent (user@moz-mng.764.42.153.IP) has joined #rust-beginners
2016-12-13 19:56:46	CyclopeanSickle	agh, wait, it doesn't
2016-12-13 19:57:27	CyclopeanSickle	So RunResult is me quickly papering over the fact that it's actually Result<Data, Error> where Error has an is_incomplete() method
2016-12-13 19:57:29	◣	Soni (SoniEx2@moz-ehu.jdt.104.187.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 19:57:38	CyclopeanSickle	Indicating that the error is caused by incomplete input
2016-12-13 19:57:48	CyclopeanSickle	And I can't do an if guard in a while-let, looks like
2016-12-13 19:58:11	CyclopeanSickle	https://github.com/rust-lang/rfcs/issues/935 :(
2016-12-13 19:59:05	@niconii	well, you can have an `if ... { break }` at the beginning
2016-12-13 19:59:20	⚡	bc|bbl is now known as bc
2016-12-13 20:00:37	CyclopeanSickle	I think it'd still need to be a match though
2016-12-13 20:00:47	CyclopeanSickle	Here, I'll make a playground example
2016-12-13 20:02:28	◣	russ_za (smuxi@moz-nnjjgv.voxdsl.co.za) has quit (Ping timeout: 121 seconds)
2016-12-13 20:03:30	CyclopeanSickle	https://is.gd/akcgqf
2016-12-13 20:03:50	◥	cmyr (cmyr@moz-to3mp4.158.electronicbox.net) has joined #rust-beginners
2016-12-13 20:04:33	◥	AdamBalan (AdamBalan@moz-9o13he.cg.shawcable.net) has joined #rust-beginners
2016-12-13 20:04:44	◥	russ_za (smuxi@moz-o7fd6m.voxdsl.co.za) has joined #rust-beginners
2016-12-13 20:05:23	◥	hansaplast (hansaplast@moz-hk2rf2.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-13 20:08:45	◣	AdamBalan (AdamBalan@moz-9o13he.cg.shawcable.net) has quit (Ping timeout: 121 seconds)
2016-12-13 20:10:20	◣	hansaplast (hansaplast@moz-hk2rf2.ve71.89v9.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 20:10:30	◣	cscorley (cscorley@moz-fp90ai.WISOLT3.epbfi.com) has quit (Quit: Leaving)
2016-12-13 20:11:16	@mbrubeck	CyclopeanSickle: Is that different from https://is.gd/E1WFfK ?
2016-12-13 20:11:19	◣	kushal (kdas@moz-6qtks2.adsl.inet-telecom.org) has quit (Ping timeout: 121 seconds)
2016-12-13 20:12:28	◣	nom-ent (user@moz-mng.764.42.153.IP) has quit (A TLS packet with unexpected length was received.)
2016-12-13 20:12:37	CyclopeanSickle	Is line 28 supposed to still be there?
2016-12-13 20:13:05	CyclopeanSickle	That looks like it'd work great, actually, if I remove 28
2016-12-13 20:13:38	@mbrubeck	oops, right
2016-12-13 20:14:33	CyclopeanSickle	Thanks!
2016-12-13 20:15:18	◥	peterEH (peterEH@moz-7dj8bq.nl.bellaliant.net) has joined #rust-beginners
2016-12-13 20:16:21	◣	cjhowe (cjhowe@moz-hlme8b.1cuh.qeg5.a601.2605.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-13 20:17:26	◣	pce (Mibbit@moz-fhq.6d0.15.103.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-13 20:28:26	◣	saml_ (saml@moz-rkfmct.res.rr.com) has quit (Connection closed)
2016-12-13 20:29:59	◣	mada (mariano@moz-hrb.nhi.170.181.IP) has quit (Ping timeout: 121 seconds)
2016-12-13 20:31:08	◥	plutoniix (q@moz-247.dop.192.159.IP) has joined #rust-beginners
2016-12-14 10:11:12	⚡	irc: disconnected from server
2016-12-14 10:11:30	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2016-12-14 10:11:30	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2016-12-14 10:11:30	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2016-12-14 10:11:30	⚡	Channel #rust-beginners: 586 nicks (2 ops, 0 halfops, 0 voices, 584 normals)
2016-12-14 10:11:31	▷	frewsxcv did the method approach for Gcd https://docs.rs/gcd/1.1.0/gcd/trait.Gcd.html
2016-12-14 10:11:34	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2016-12-14 10:12:15	◣	Icecream-burglar (Mibbit@moz-9b3k34.res.bhn.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 10:12:40	◣	weirdo (Mibbit@moz-sb1qrt.wa.comcast.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 10:12:46	NfNitLoop	in serde, what's the difference between serialize_map() and serialize_struct()? Should I prefer one over the other? 
2016-12-14 10:12:55	◣	bc (bc@moz-l5n.tlf.131.67.IP) has quit (Quit: leaving)
2016-12-14 10:15:19	◣	sp33dster (sp33der89@moz-7n69br.direct-adsl.nl) has quit (Quit: I'll be back)
2016-12-14 10:15:36	◥	HER0_01 (her0@moz-lfaa4h.kov7.plfc.0248.2601.IP) has joined #rust-beginners
2016-12-14 10:16:24	◥	morsicus (mfortuna@moz-3rfphq.ovh.net) has joined #rust-beginners
2016-12-14 10:18:31	svartalf	NfNitLoop: i suppose, in some serialization formats "maps" and "structs" are different things, so it depends
2016-12-14 10:19:03	NfNitLoop	Yeah... unfortunately https://docs.serde.rs/serde/ser/trait.Serializer.html doesn't doc the difference. :/ 
2016-12-14 10:19:41	NfNitLoop	Structs seem to require a &'static str name, unlike maps.  And their keys are &strs as well. 
2016-12-14 10:19:54	NfNitLoop	while a map can be anything serializable. 
2016-12-14 10:20:16	NfNitLoop	so neither quite exactly map to JSON, and both output the same JSON when I use them. :p 
2016-12-14 10:20:38	◣	ufobat (Martin@moz-q0q7tl.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2016-12-14 10:21:15	◥	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has joined #rust-beginners
2016-12-14 10:22:59	◥	xor (xor@moz-5lgrnv.rev.vodafone.pt) has joined #rust-beginners
2016-12-14 10:25:18	◣	nonelement (nonelement@moz-021kv8.pa.comcast.net) has quit (Quit: leaving)
2016-12-14 10:25:32	◣	sneaker (thomas@moz-blt.n21.144.213.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 10:25:49	▷	frewsxcv opens a documentation issue https://github.com/serde-rs/serde/issues/639
2016-12-14 10:26:14	◥	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has joined #rust-beginners
2016-12-14 10:26:44	svartalf	This one may help a little: https://serde.rs/deserialize-struct.html
2016-12-14 10:28:18	svartalf	So, I suppose you can make a custom serialization format where "duration" key will be deserialized into a Duration struct automatically instead of a HashMap with two keys
2016-12-14 10:29:26	◥	federico (federico@moz-q9q.n98.108.201.IP) has joined #rust-beginners
2016-12-14 10:32:20	◣	Sklopi (tobias@moz-f2h84f.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2016-12-14 10:32:53	◥	nonelement (nonelement@moz-021kv8.pa.comcast.net) has joined #rust-beginners
2016-12-14 10:33:02	◣	ludat (ludat@moz-ctb.b0j.173.190.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 10:33:37	◥	Ketsuban (ketsuban@moz-nqhljq.abqe.tdt5.0c7d.2a02.IP) has joined #rust-beginners
2016-12-14 10:33:49	◥	Sklopi (tobias@moz-f2h84f.dip0.t-ipconnect.de) has joined #rust-beginners
2016-12-14 10:35:51	◣	Sklopi (tobias@moz-f2h84f.dip0.t-ipconnect.de) has quit (A TLS packet with unexpected length was received.)
2016-12-14 10:36:26	◥	huddler (Mibbit@moz-3ab9dr.ca.comcast.net) has joined #rust-beginners
2016-12-14 10:39:18	◥	bc (bc@moz-l5n.tlf.131.67.IP) has joined #rust-beginners
2016-12-14 10:39:35	huddler	I want to have a standalone executable share code from a lib-style project. I have placed this file in src/bin/foo.rs and it has a main method. I also have an internal dependency in bar/mod.js. In src/lib.js I have the line "pub mod foo;" When I attempt to "use bar;" as I have in the rest of the project, I get an error saying "no `foo` in the root"
2016-12-14 10:40:11	◥	eberan (eber@moz-9be6qt.ca.comcast.net) has joined #rust-beginners
2016-12-14 10:40:13	huddler	Why is a file in src/bin not able to find bar as a dependency?
2016-12-14 10:40:25	misdreavus	files in src/bin are treated as entirely separate crate roots
2016-12-14 10:40:38	misdreavus	i.e. they don't just inherit the module hierarchy from the rest of the project
2016-12-14 10:40:50	misdreavus	same with src/main.rs
2016-12-14 10:41:02	◣	nonelement (nonelement@moz-021kv8.pa.comcast.net) has quit (Ping timeout: 121 seconds)
2016-12-14 10:41:11	◣	socumbersome (smuxi@moz-brdu7t.supernova.orange.pl) has quit (Ping timeout: 121 seconds)
2016-12-14 10:41:35	frewsxcv	src/bin/foo.rs and src/lib.rs are separate crates that live in the same package.
2016-12-14 10:41:40	misdreavus	you can import the library as an external user via "extern crate my_lib"
2016-12-14 10:43:11	misdreavus	and from there you can use the public module hierarchy from the library starting at my_lib
2016-12-14 10:43:29	◣	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has quit (Client exited)
2016-12-14 10:43:54	◥	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has joined #rust-beginners
2016-12-14 10:44:14	◣	stephank (stephank@moz-o87p61.1hdc.4dv7.0058.2a02.IP) has quit (Quit: *Poof!*)
2016-12-14 10:44:46	◣	daschl (daschl@moz-kvc.ipu.178.62.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-14 10:44:55	◥	stephank (stephank@moz-o87p61.1hdc.4dv7.0058.2a02.IP) has joined #rust-beginners
2016-12-14 10:45:27	◥	junqed (junqed@moz-7c0.2s0.70.178.IP) has joined #rust-beginners
2016-12-14 10:46:21	◥	socumbersome (smuxi@moz-r0ea1c.supernova.orange.pl) has joined #rust-beginners
2016-12-14 10:47:12	huddler	Thanks! The "extern crate my_lib" approach worked
2016-12-14 10:48:19	◣	dark-knight (dark-knight@moz-fg858v.dynamic.surfer.at) has quit (Ping timeout: 121 seconds)
2016-12-14 10:49:44	◣	Ameo (casey@moz-5r2.1ic.228.152.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 10:53:23	◥	guldan (uid201820@moz-deq8t8.stonehaven.irccloud.com) has joined #rust-beginners
2016-12-14 10:53:52	⚡	iSexy is now known as dpyro
2016-12-14 10:54:08	◥	ca1ek (ca1ek@moz-9d1mn7.internetia.net.pl) has joined #rust-beginners
2016-12-14 10:54:20	◥	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has joined #rust-beginners
2016-12-14 10:54:34	◣	huddler (Mibbit@moz-3ab9dr.ca.comcast.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 10:57:57	◥	hansaplast (hansaplast@moz-bm8ens.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-14 10:58:07	◥	dark-knight (dark-knight@moz-blc4cs.dynamic.surfer.at) has joined #rust-beginners
2016-12-14 10:58:19	◣	sciamp (sciamp@moz-n5m3gt.scia.mp) has quit (Ping timeout: 121 seconds)
2016-12-14 10:58:35	◣	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has quit (Connection closed)
2016-12-14 11:00:23	◣	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has quit (Ping timeout: 121 seconds)
2016-12-14 11:01:49	◥	Ameo (casey@moz-bll.un9.123.206.IP) has joined #rust-beginners
2016-12-14 11:03:51	◣	hansaplast (hansaplast@moz-bm8ens.ve71.89v9.120b.2a02.IP) has quit (Connection closed)
2016-12-14 11:03:58	◥	hansaplast (hansaplast@moz-06rkjo.cust.swisscom.ch) has joined #rust-beginners
2016-12-14 11:06:06	◥	lostInTheDataJungle (oli@moz-1ekq1m.pools.vodafone-ip.de) has joined #rust-beginners
2016-12-14 11:06:08	◥	alx741 (alx741@moz-g95.8va.152.190.IP) has joined #rust-beginners
2016-12-14 11:06:11	◣	fl3 (fl3__@moz-ub9.ihr.25.78.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 11:08:31	◥	caulagi (caulagi@moz-cgibnc.bredband.comhem.se) has joined #rust-beginners
2016-12-14 11:08:54	◣	veer66 (vee@moz-877hcc.asianet.co.th) has quit (Ping timeout: 121 seconds)
2016-12-14 11:08:56	◣	hansaplast (hansaplast@moz-06rkjo.cust.swisscom.ch) has quit (Connection closed)
2016-12-14 11:09:22	◥	hansaplast (hansaplast@moz-bm8ens.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-14 11:09:35	◥	Lynolix (Lynolix@moz-m9qs1g.tpgi.com.au) has joined #rust-beginners
2016-12-14 11:10:44	◥	hansapla_ (hansaplast@moz-c0ftmc.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-14 11:11:46	◥	AndroUser2 (RoodRondApe@moz-ku2jgf.dynamic.ziggo.nl) has joined #rust-beginners
2016-12-14 11:11:52	◥	mexisme2 (mexisme@moz-i5v.49e.149.118.IP) has joined #rust-beginners
2016-12-14 11:11:59	◥	bereddy (bereddy@moz-2e6qc0.fios.verizon.net) has joined #rust-beginners
2016-12-14 11:12:43	◥	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has joined #rust-beginners
2016-12-14 11:13:24	◣	hansaplast (hansaplast@moz-bm8ens.ve71.89v9.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 11:14:11	◣	mexisme (mexisme@moz-15mtqr.vf.net.nz) has quit (Ping timeout: 121 seconds)
2016-12-14 11:14:29	◣	aio00 (chatzilla@moz-m09.4he.141.201.IP) has quit (Connection closed)
2016-12-14 11:16:59	◥	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has joined #rust-beginners
2016-12-14 11:19:13	◥	daschl (daschl@moz-kvc.ipu.178.62.IP) has joined #rust-beginners
2016-12-14 11:19:33	◥	parrip (ryan@moz-a2onff.xtra.co.nz) has joined #rust-beginners
2016-12-14 11:20:36	◥	woboats (lee@moz-8rajde.ca.comcast.net) has joined #rust-beginners
2016-12-14 11:21:15	◣	daschl (daschl@moz-kvc.ipu.178.62.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-14 11:21:27	◣	alva_ (alva@moz-ost.dlu.172.163.IP) has quit (Quit: WeeChat 1.4)
2016-12-14 11:21:34	◥	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has joined #rust-beginners
2016-12-14 11:22:36	◣	quaddle (Mibbit@moz-hv3.t5s.185.47.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 11:23:43	◥	scrogson1 (scrogson@moz-i90639.tftc.9t39.0306.2602.IP) has joined #rust-beginners
2016-12-14 11:24:18	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2016-12-14 11:24:18	asteriskServes	Is anyone familiar with juniper?  and if someone is else do they mind I asked some more general question in crate usage?
2016-12-14 11:24:24	asteriskServes	https://crates.io/crates/juniper
2016-12-14 11:26:51	◥	niconii (nicole@moz-o2ja53.midco.net) has joined #rust-beginners
2016-12-14 11:26:51	⚡	Mode #rust-beginners [+o niconii] by ChanServ
2016-12-14 11:26:51	~steveklabnik	i may or may not be able to help you
2016-12-14 11:26:51	~steveklabnik	i can help with rust, but not graphql :)
2016-12-14 11:26:51	◣	brson (brson@moz-g6c.7dk.58.172.IP) has quit (Quit: leaving)
2016-12-14 11:26:51	◣	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has quit (Quit: WeeChat 1.5)
2016-12-14 11:27:59	asteriskServes	steveklabnik: The part I am stuck is on is how the crate allows one to access the arguements that the user has passed via a GET request.
2016-12-14 11:28:15	◣	mattwoodyard__ (Mibbit@moz-60q9g9.aoa.twosigma.com) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 11:28:53	asteriskServes	It is my current belief I can get through the graphql object ( https://mhallin.github.io/juniper/juniper/macro.graphql_object!.html ) however, I am still still shaky in my understanding of macros.
2016-12-14 11:29:46	◣	xor (xor@moz-5lgrnv.rev.vodafone.pt) has quit (Quit: Leaving)
2016-12-14 11:30:12	asteriskServes	Even then it more so directed to how are lists parsed as the example given only deal with a single value so I don't know if it is giving me a string or Vev
2016-12-14 11:30:15	asteriskServes	Vec*
2016-12-14 11:30:31	~steveklabnik	hm
2016-12-14 11:30:34	~steveklabnik	lemme takea  look
2016-12-14 11:31:26	asteriskServes	The docs suggest a String. hidden at the bottom of the docs, but it hard to determine what is the truth then again. I could just complie until I figure it out :P
2016-12-14 11:31:53	◣	dark-knight (dark-knight@moz-blc4cs.dynamic.surfer.at) has quit (Quit: Leaving.)
2016-12-14 11:32:02	~steveklabnik	so yeah looks like each one is a String
2016-12-14 11:32:15	~steveklabnik	but it's unclear to me how you get the set of them
2016-12-14 11:32:24	◥	Mentol (Joan@moz-cr2.4f5.174.90.IP) has joined #rust-beginners
2016-12-14 11:32:29	~steveklabnik	well
2016-12-14 11:32:40	~steveklabnik	The other cases are similar to regular Rust arguments, 
2016-12-14 11:32:48	~steveklabnik	so, looks like you'd use a function and define them that way?
2016-12-14 11:33:03	◣	caulagi (caulagi@moz-cgibnc.bredband.comhem.se) has quit (Ping timeout: 121 seconds)
2016-12-14 11:33:19	◣	Jackneill (Jackneill@moz-tpevc5.pool.digikabel.hu) has quit (A TLS packet with unexpected length was received.)
2016-12-14 11:33:32	asteriskServes	Also, there is a enum called Value say a list is  a Vec<Value> so yea I got confused as to wheter there is some from like trait being implemented somewhere.
2016-12-14 11:33:56	◣	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 11:34:01	◣	iiddnn__ (iacopodeeno@moz-fompeo.retail.telecomitalia.it) has quit (Client exited)
2016-12-14 11:34:10	Mentol	is possible to create an array of length unknown? but known (at runtime) at creating the structure because the number of element is not going to change
2016-12-14 11:34:11	◥	xor (xor@moz-5lgrnv.rev.vodafone.pt) has joined #rust-beginners
2016-12-14 11:34:37	asteriskServes	However, it would make sense if it was just a string since that is how iron normally deals with it.
2016-12-14 11:34:39	◥	AdamBalan (AdamBalan@moz-9o13he.cg.shawcable.net) has joined #rust-beginners
2016-12-14 11:34:51	◥	caulagi (caulagi@moz-cgibnc.bredband.comhem.se) has joined #rust-beginners
2016-12-14 11:35:07	misdreavus	Mentol: not an array - the length of those are encoded into the type itself
2016-12-14 11:35:19	Mentol	the problem is that at using a vector, it shows: `cannot move out of borrowed content`
2016-12-14 11:35:35	misdreavus	what are you trying to do with the vector?
2016-12-14 11:36:28	caulagi	Is there a equivalent datastructure to collections.Counter in Python? 
2016-12-14 11:36:47	~steveklabnik	asteriskServes: yeah, i can see why you'd be confused; these docs aren't _bad_, but they're not _fantastic_. at least they exist at all!
2016-12-14 11:36:57	caulagi	I can use BinaryHeap to get the most popular item, but I also want count
2016-12-14 11:36:58	@mbrubeck	for reference https://docs.python.org/2/library/collections.html#collections.Counter
2016-12-14 11:37:05	Mentol	misdreavus, I'm creating a builder like [here](https://doc.rust-lang.org/book/method-syntax.html#builder-pattern) where a field is of type `Option<Vec<&'a str>>`
2016-12-14 11:37:13	◣	zako (zako@moz-qn0.jpe.241.150.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 11:37:52	~steveklabnik	caulagi: not built in, but you could make one wrapping hashmap pretty easily
2016-12-14 11:38:21	◥	nonelement (nonelement@moz-021kv8.pa.comcast.net) has joined #rust-beginners
2016-12-14 11:38:51	caulagi	steveklabnik: I tried but it seems to me I need to sort the hashmap at some point if I want to get 'most_common'
2016-12-14 11:39:12	asteriskServes	steveklabnik: true :P it is better than R's large pdf for docs. However, in the defense of the author it does look like they want to write a more complete example. However, talking it through with you I think I understand what I need to do... I think.
2016-12-14 11:39:21	asteriskServes	So thanks.
2016-12-14 11:39:24	◥	cjhowe (cjhowe@moz-jnal4r.mci.googlefiber.net) has joined #rust-beginners
2016-12-14 11:39:28	~steveklabnik	ah so maybe btreemap?
2016-12-14 11:39:38	~steveklabnik	asteriskServes: great! good luck :)
2016-12-14 11:40:15	asteriskServes	caulagi: So most common as in the mode?
2016-12-14 11:40:49	@niconii	Mentol: could you show your code? if you can reproduce the error in https://play.rust-lang.org that'd be extra helpful
2016-12-14 11:41:02	@mbrubeck	steveklabnik: The problem is that the sort index is not consistent as you insert/remove items... I guess on mutation you could remove the entry and then re-insert it...
2016-12-14 11:41:12	Mentol	niconii, I'm writing an example there
2016-12-14 11:41:18	@niconii	alright
2016-12-14 11:41:22	@mbrubeck	I wonder what the Python implementation is and what performance guarantees it has
2016-12-14 11:41:39	◣	freezing-point (mikko@moz-so9dtr.elisa-laajakaista.fi) has quit (Connection closed)
2016-12-14 11:42:28	◣	nonelement (nonelement@moz-021kv8.pa.comcast.net) has quit (Ping timeout: 121 seconds)
2016-12-14 11:42:52	◥	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has joined #rust-beginners
2016-12-14 11:43:30	@mbrubeck	caulagi: It looks like Python's Counter just sorts the dict every time you call most_common: https://bugs.python.org/file12706/counter7.diff (search for "def most_common"
2016-12-14 11:43:31	@mbrubeck	)
2016-12-14 11:44:54	◣	xor (xor@moz-5lgrnv.rev.vodafone.pt) has quit (Quit: Leaving)
2016-12-14 11:45:08	◥	voider1 (voider1@moz-ku2jgf.dynamic.ziggo.nl) has joined #rust-beginners
2016-12-14 11:45:15	~steveklabnik	mbrubeck: yeah i assumed that you'd do the sort upon calling that method
2016-12-14 11:45:16	asteriskServes	However, even then wouldn't it be quicker to use the values as keys and count the collisions? Admittedly this might suck in terms of memory usage for large data sets.
2016-12-14 11:45:20	Mentol	misdreavus, Mentol https://play.rust-lang.org/?gist=a4f1264449ca63dc0f8ff27a2072876d&version=stable&backtrace=0
2016-12-14 11:46:14	misdreavus	aha
2016-12-14 11:46:46	misdreavus	there are a couple factors at play here
2016-12-14 11:46:47	caulagi	mbrubeck: thanks
2016-12-14 11:47:48	Mentol	do I've to implement copy and clone traits?
2016-12-14 11:48:04	misdreavus	most notable is that while the x/y/radius are just numbers and can just be Copied out, a Vec cannot be handled like that
2016-12-14 11:49:23	misdreavus	what i'd suggest, which may or may not be the semantics you want, is that finalize() takes self by-value instead of as &self
2016-12-14 11:49:24	◥	ubsandroid_ (ubsan@moz-fmtvol.n7a3.v8la.fb90.2607.IP) has joined #rust-beginners
2016-12-14 11:49:42	misdreavus	that way you can just move the value out since the CircleBuilder isn't sticking around after the method call
2016-12-14 11:50:03	Mentol	Cool! thank you
2016-12-14 11:50:10	◥	Lynolix_ (Lynolix@moz-m9qs1g.tpgi.com.au) has joined #rust-beginners
2016-12-14 11:50:42	◥	insaneinside (user@moz-ck7c5n.customer.broadstripe.net) has joined #rust-beginners
2016-12-14 11:50:42	◣	Lynolix (Lynolix@moz-m9qs1g.tpgi.com.au) has quit (A TLS packet with unexpected length was received.)
2016-12-14 11:50:44	◣	Lynolix_ (Lynolix@moz-m9qs1g.tpgi.com.au) has quit (A TLS packet with unexpected length was received.)
2016-12-14 11:50:48	◣	xliiv (xliiv@moz-893luh.icpnet.pl) has quit (Ping timeout: 121 seconds)
2016-12-14 11:51:07	misdreavus	that by itself doesn't seem to get us in the clear though https://is.gd/VTgPyy
2016-12-14 11:51:12	@mbrubeck	That gives you an API like https://is.gd/dWnax2 unless you change the other builder methods to take/return self
2016-12-14 11:51:41	misdreavus	yeah, i just realized that
2016-12-14 11:52:14	misdreavus	(i prefer builders that consume/remake the builder as they go, but there's reasons for either way)
2016-12-14 11:52:21	◣	ubsandroid (ubsan@moz-1dsu0q.subnet.rcn.com) has quit (Ping timeout: 121 seconds)
2016-12-14 11:52:32	@mbrubeck	Another alternative is to use std::mem::replace or Option::take to move the Option<Vec<_>> out of the builder and into the Circle: https://is.gd/AdLa5c
2016-12-14 11:53:26	@mbrubeck	Note that this mutates the builder in the process.
2016-12-14 11:53:28	◣	insaneinside (user@moz-ck7c5n.customer.broadstripe.net) has left #rust-beginners ("mouse no clicky?!")
2016-12-14 11:54:35	Mentol	mbrubeck, which option has better performance?
2016-12-14 11:54:40	voider1	Is there a good reason for doing let x: &KBDLLHOOKSTRUCT = &*(lparam as *const KBDLLHOOKSTRUCT); instead of let x: KBDLLHOOKSTRUCT = *(lparam as *const KBDLLHOOKSTRUCT);?
2016-12-14 11:55:05	◣	sscott (Thunderbird@moz-lksml6.stvt.i7og.0c7d.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 11:55:38	◥	sscott (Thunderbird@moz-bs8.kc7.15.94.IP) has joined #rust-beginners
2016-12-14 11:56:02	◥	oln (smuxi@moz-h6kap0.customer.cdi.no) has joined #rust-beginners
2016-12-14 11:56:08	misdreavus	since you only have the pointer to begin with, keeping it as a reference keeps it pointer-width on the stack, while keeping it by-value loads the entire struct onto the stack
2016-12-14 11:56:23	@mbrubeck	Mentol: Conceptually, taking/returning self by value involves more copying of memory (specifically, the builder struct, which is 48 bytes wide in your example) but in practice it depends on the optimizer
2016-12-14 11:56:31	rkruppe	assuming copying out the struct is even legal
2016-12-14 11:57:02	voider1	misdreavus: What do you mean with pointer-width?
2016-12-14 11:57:31	Mentol	mbrubeck,thank you
2016-12-14 11:57:44	◣	ubsandroid_ (ubsan@moz-fmtvol.n7a3.v8la.fb90.2607.IP) has quit (Quit: <3)
2016-12-14 11:57:54	misdreavus	voider1: keeping a reference is the same as keeping a pointer on the stack, whereas keeping it by-value copies the entire struct in
2016-12-14 11:57:59	◥	ubsandroid (ubsan@moz-90r0dm.NATPOOL.NYU.EDU) has joined #rust-beginners
2016-12-14 11:58:05	misdreavus	so the reference only takes up the space of a pointer
2016-12-14 11:58:07	voider1	misdreavus: So a reference is faster?
2016-12-14 11:58:14	misdreavus	depends
2016-12-14 11:58:31	misdreavus	having the value there means the access is probably faster but you have to load everything in
2016-12-14 11:58:34	rkruppe	ha! if only performance issues were that easy
2016-12-14 11:58:35	@mbrubeck	voider1: In the first snippet, `x` and `lparam` are now pointers to the same memory location.  In the second one, `x` is a new copy of the thing that `lparam` points to.
2016-12-14 11:59:04	misdreavus	having the reference means less startup cost but you're still dealing with the pointer indirection
2016-12-14 11:59:24	◥	clayton-taylor (Mibbit@moz-bqeujs.ph.cox.net) has joined #rust-beginners
2016-12-14 11:59:27	voider1	Is it preferable to use a reference instead of dereferencing?
2016-12-14 11:59:29	@mbrubeck	In the first case you also need to make sure that the memory isn't freed or mutated while `x` is live
2016-12-14 11:59:39	misdreavus	i have no idea what a KBDLLHOOKSTRUCT even holds so i can't say for sure
2016-12-14 11:59:41	◥	ubsandroid_ (ubsan@moz-2u9q90.4bil.8nvg.fb90.2607.IP) has joined #rust-beginners
2016-12-14 12:00:07	voider1	In my case it holds information about which button on my keyboard was pressed.
2016-12-14 12:00:12	rkruppe	voider1: first check whether both ways actually work. they don't do the same thing!
2016-12-14 12:00:12	misdreavus	i would assume that since you're grabbing this from an lparam you're expected to keep it as a pointer/reference
2016-12-14 12:00:23	voider1	rkruppe: They both work.
2016-12-14 12:00:32	◥	psychoslave______ (msg@moz-2ck121.u4df.4cal.0e35.2a01.IP) has joined #rust-beginners
2016-12-14 12:00:49	voider1	The function in which this is called gets created anew everytime.
2016-12-14 12:00:50	◣	ubsandroid_ (ubsan@moz-2u9q90.4bil.8nvg.fb90.2607.IP) has quit (Quit: <3)
2016-12-14 12:00:54	◣	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has quit (Quit: WeeChat 1.5)
2016-12-14 12:00:57	◥	ubsandroid_ (ubsan@moz-90r0dm.NATPOOL.NYU.EDU) has joined #rust-beginners
2016-12-14 12:01:04	voider1	It gets created for every keypress.
2016-12-14 12:02:41	◣	angusi (angusai@moz-o6824l.g3dg.soik.0104.2620.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 12:02:43	◣	ubsandroid (ubsan@moz-90r0dm.NATPOOL.NYU.EDU) has quit (Ping timeout: 121 seconds)
2016-12-14 12:02:57	◥	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has joined #rust-beginners
2016-12-14 12:04:59	⚡	jntrnr is now known as jntrnr_vacation
2016-12-14 12:05:17	misdreavus	then i'd keep it as a reference, copying it in for literally every single keypress system-wide feels really wasteful
2016-12-14 12:05:57	◥	Fishrock123 (Fishrock123@moz-hfbsie.dsl.bell.ca) has joined #rust-beginners
2016-12-14 12:05:59	◥	ot (ot@moz-gmtpic.cpe.webspeed.dk) has joined #rust-beginners
2016-12-14 12:06:21	◥	zako (zako@moz-ormegi.dynamicip.rima-tde.net) has joined #rust-beginners
2016-12-14 12:06:31	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-14 12:08:36	◣	xfix (konrad@moz-3smirc.pw) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2016-12-14 12:14:06	◥	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined #rust-beginners
2016-12-14 12:15:06	◥	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has joined #rust-beginners
2016-12-14 12:16:00	◣	psychoslave______ (msg@moz-2ck121.u4df.4cal.0e35.2a01.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 12:16:21	◣	Alek (alek@moz-h5408n.bb.online.no) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-12-14 12:16:32	◥	Alek (alek@moz-h5408n.bb.online.no) has joined #rust-beginners
2016-12-14 12:17:07	◣	Alek (alek@moz-h5408n.bb.online.no) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-12-14 12:20:57	◣	Mentol (Joan@moz-cr2.4f5.174.90.IP) has quit (Quit: Leaving)
2016-12-14 12:21:22	◥	Gain_nicht (Mibbit@moz-t49.pcp.45.12.IP) has joined #rust-beginners
2016-12-14 12:21:46	◣	Gain_nicht (Mibbit@moz-t49.pcp.45.12.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 12:22:56	◥	xliiv (xliiv@moz-893luh.icpnet.pl) has joined #rust-beginners
2016-12-14 12:23:31	◣	Earl_Mut (Mibbit@moz-et36g8.ip.prioritytelecom.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 12:25:40	voider1	misdreavus: Alright, thanks. =)
2016-12-14 12:26:16	mzji	Could anyone tell me could I read stdin in binary mode in Rust on Windows? What's the default behavior of stdin/stdout/stderr in Rust?
2016-12-14 12:27:26	◣	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 12:28:23	misdreavus	when you have the instances created by io::stdin()/stdout()/stderr() you're getting a struct that implements Read, so you can pull the data however you please
2016-12-14 12:28:48	◥	woboats_ (woboats@moz-8rajde.ca.comcast.net) has joined #rust-beginners
2016-12-14 12:28:57	◥	trkl (trklr@moz-l2s.amp.172.128.IP) has joined #rust-beginners
2016-12-14 12:29:13	misdreavus	(Write for stdout, but yeah)
2016-12-14 12:29:15	antifuchs	hi pals, I have a problem with traits and lifetime specification; simplified code is here: https://is.gd/ucAOfD; I'd like to have a function that I can invoke like process::<SSHConfigFile>("some_path"), that returns a vector of hosts, but I can't get the compiler to recognize lifetimes line up /:
2016-12-14 12:29:15	WindowsBunnyNaptime	mzji: When you read from stdin where stdin is the windows console, it reads in UTF-16 and converts to UTF-8
2016-12-14 12:29:38	WindowsBunnyNaptime	mzji: If you get any lone surrogates that are valid WTF-16 but not valid UTF-16, then it errors
2016-12-14 12:29:52	mzji	WindowsBunnyNaptime: I want to read a binary file via stdin
2016-12-14 12:29:56	mzji	Is that possible? 
2016-12-14 12:30:06	mzji	Just like on *nix
2016-12-14 12:30:09	antifuchs	(I'd be happy for `process` to take any other kinds of parameters, as long as I can parameterize it for the implementing struct of the trait ConfigFile
2016-12-14 12:30:11	WindowsBunnyNaptime	mzji: If stdin is a pipe however
2016-12-14 12:30:28	◥	Anga (Mibbit@moz-n0f.l4v.1.190.IP) has joined #rust-beginners
2016-12-14 12:30:32	WindowsBunnyNaptime	pipe or file
2016-12-14 12:30:40	WindowsBunnyNaptime	then you'll just be reading arbitrary bytes
2016-12-14 12:31:12	mzji	So if I pipe file into stdin, the content won't be trans-encoded?
2016-12-14 12:32:18	mzji	s/trans-encoded/transcoded/
2016-12-14 12:32:22	WindowsBunnyNaptime	mzji: No encoding or decoding will occur, piping a file will just shove the raw bytes directly through
2016-12-14 12:32:43	mzji	WindowsBunnyNaptime: Yay! That's good! Thanks :D
2016-12-14 12:33:15	mzji	Actually I
2016-12-14 12:33:17	mzji	oops
2016-12-14 12:33:33	mzji	Actually I'm testing my icon/cursor binary parsing code
2016-12-14 12:33:34	◥	Psilidae (Psilidae@moz-kng1rg.at.cox.net) has joined #rust-beginners
2016-12-14 12:33:43	mzji	So I need to preprocess the icon files first
2016-12-14 12:34:01	WindowsBunnyNaptime	exciting
2016-12-14 12:34:05	mzji	To change the result more human-readable
2016-12-14 12:34:36	mzji	So I'm writing a small utility to help me rearrange the order of icons inside an icon file
2016-12-14 12:35:03	mzji	I didn't use the bunny images, sry
2016-12-14 12:35:19	mzji	Instead I downloaded some free-licensed icons
2016-12-14 12:35:44	mzji	Which is smaller and easier to analyze by hands
2016-12-14 12:36:21	◥	karinqe_ (karinqe@moz-ptt.nvt.172.163.IP) has joined #rust-beginners
2016-12-14 12:36:26	voider1	WindowsBunnyNaptime: My hook works.
2016-12-14 12:36:27	voider1	=)
2016-12-14 12:36:35	WindowsBunnyNaptime	voider1: yay
2016-12-14 12:36:42	◣	rodarmor (rodarmor@moz-aur1lg.fkdv.ulf6.3c01.2600.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 12:36:47	WindowsBunnyNaptime	voider1: This is the point where you write a blog post documenting your struggles and share it on reddit
2016-12-14 12:36:50	voider1	I did work already, but I needed a message queue apparently.
2016-12-14 12:37:23	voider1	WindowsBunnyNaptime: Maybe I should do that, I've never written a blogpost, though.
2016-12-14 12:37:40	◥	rodarmor (rodarmor@moz-aur1lg.fkdv.ulf6.3c01.2600.IP) has joined #rust-beginners
2016-12-14 12:38:16	◥	ufobat (Martin@moz-q0q7tl.dyn.telefonica.de) has joined #rust-beginners
2016-12-14 12:38:35	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2016-12-14 12:38:46	◥	fl3 (fl3__@moz-a1d.a3h.25.78.IP) has joined #rust-beginners
2016-12-14 12:39:15	voider1	WindowsBunnyNaptime: Now I'm wondering, do I really need the external DLL? I'm going to find out.
2016-12-14 12:40:13	voider1	I actually think I do because of the hmod.
2016-12-14 12:41:57	voider1	I was wondering, should the main() be on top of the file or on the bottom?
2016-12-14 12:42:43	◣	ufobat (Martin@moz-q0q7tl.dyn.telefonica.de) has quit (Connection closed)
2016-12-14 12:43:01	antifuchs	so I've played with Box types on the `process` function I pasted above, and rustc still considers the value to not live long enough. At my wits' end /:
2016-12-14 12:43:02	WindowsBunnyNaptime	voider1: Items in rust are order independent
2016-12-14 12:43:05	WindowsBunnyNaptime	except for defining macros
2016-12-14 12:43:14	WindowsBunnyNaptime	voider1: a function definition is an item
2016-12-14 12:44:37	◣	woboats_ (woboats@moz-8rajde.ca.comcast.net) has quit (Client exited)
2016-12-14 12:44:37	⚡	WindowsBunnyNaptime is now known as WindowsBunnySuperposition
2016-12-14 12:44:38	voider1	Is it better to put main at top of  bottom?
2016-12-14 12:44:48	WindowsBunnySuperposition	it doesn't matter :D
2016-12-14 12:45:02	misdreavus	antifuchs: from what i can tell, it's because all the trait functions for ConfigFile want their self to have lifetime 'a, which here you've tied to the string you're passing into process()
2016-12-14 12:45:14	antifuchs	hmmmm
2016-12-14 12:45:26	misdreavus	antifuchs: but taking the 'a out of parse_entires and entries just makes the compiler cry to have them back
2016-12-14 12:45:49	antifuchs	exactly - all the 'a markers are there because the compiler was sad without them /:
2016-12-14 12:46:19	misdreavus	the 'a is a problem in process because it wants `file` to have the same lifetime, but since it's local to the function that's obviously impossible
2016-12-14 12:46:22	Xion	voider1: I always follow the rule of putting the more general functions higher up.
2016-12-14 12:46:30	◥	pylbrecht (pylbrecht@moz-4r5f2d.6km4.884h.8109.2a02.IP) has joined #rust-beginners
2016-12-14 12:46:31	Xion	This way it's easier to read the module from the top down.
2016-12-14 12:46:37	Xion	Kinda like an article.
2016-12-14 12:46:53	◥	Lynolix (Lynolix@moz-m9qs1g.tpgi.com.au) has joined #rust-beginners
2016-12-14 12:47:40	◥	adrian_1908 (adrian_1908@moz-1vshl2.hsi09.unitymediagroup.de) has joined #rust-beginners
2016-12-14 12:47:52	◣	adrian_1908 (adrian_1908@moz-1vshl2.hsi09.unitymediagroup.de) has quit (Quit: farewell)
2016-12-14 12:48:22	◣	fmdkdd (fmdkdd@moz-pkmmg9.erq3.p0s9.0e35.2a01.IP) has quit (Quit: WeeChat 1.6)
2016-12-14 12:48:51	antifuchs	misdreavus: yeah... can I split the lifetimes? (and what does that even mean)
2016-12-14 12:49:08	misdreavus	not that i know of, in safe rust
2016-12-14 12:49:18	misdreavus	at least, not without reorganizing the code aroud
2016-12-14 12:49:45	antifuchs	O
2016-12-14 12:49:59	antifuchs	(sorry, mistyped return) I'd be happy to reorganize the code around this to work (:
2016-12-14 12:50:17	◥	futile (felix@moz-52ig8c.pools.vodafone-ip.de) has joined #rust-beginners
2016-12-14 12:50:29	misdreavus	is your end goal to pass a path/string into process() and get the Result<Vec<Host>> back?
2016-12-14 12:51:04	antifuchs	yeah, that's the idea - I have an array of strings (from argv) that I'd like to flatmap into Vec<Host> in my main function
2016-12-14 12:51:17	◣	Guest27 (textual@moz-mk0dd6.rev.dnainternet.fi) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-12-14 12:51:25	◣	parrip (ryan@moz-a2onff.xtra.co.nz) has quit (Quit: This computer has gone to sleep)
2016-12-14 12:51:32	misdreavus	okie doke
2016-12-14 12:51:59	antifuchs	but there are two types of things (hence the trait/struct thing I did there), and they need  ~the same treatment, so I thought I'd unify that codepath
2016-12-14 12:52:03	◥	canaltinova (uid191250@moz-l3qbqh.tooting.irccloud.com) has joined #rust-beginners
2016-12-14 12:52:45	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2016-12-14 12:52:52	misdreavus	the first thing i'd think of is to have process and/or SSHConfigFile take a String/PathBuf since SSHConfigFile is storing that anyway
2016-12-14 12:53:04	misdreavus	also helps to trim the input lifetime out
2016-12-14 12:53:27	antifuchs	ah, interesting! I'll try that right now
2016-12-14 12:53:51	◥	woboats_ (woboats@moz-8rajde.ca.comcast.net) has joined #rust-beginners
2016-12-14 12:54:22	◣	fl3 (fl3__@moz-a1d.a3h.25.78.IP) has quit (Connection closed)
2016-12-14 12:55:17	misdreavus	then i'd try to take the lifetime param out of the ConfigFile trait, since it mainly serves to constrain the pathname() function
2016-12-14 12:55:58	antifuchs	oooh
2016-12-14 12:56:18	misdreavus	et voila https://is.gd/1HZx0S
2016-12-14 12:57:16	antifuchs	oh damn, this totally works
2016-12-14 12:57:23	antifuchs	thanks!!
2016-12-14 12:57:50	misdreavus	(^^)b
2016-12-14 12:57:59	◣	woboats_ (woboats@moz-8rajde.ca.comcast.net) has quit (Client exited)
2016-12-14 12:58:16	◣	scrogson1 (scrogson@moz-i90639.tftc.9t39.0306.2602.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 12:58:16	misdreavus	notably, i moved the <'a> lifetime param down from the ConfigFile trait and just into the pathname() function
2016-12-14 12:58:51	misdreavus	that makes it more obvious what it's there for, and keeps you from reasoning about tying the lifetime of the SSHConfigFile to the input string
2016-12-14 12:59:11	misdreavus	this will consume the input String you get, but if you're okay with that, you're getting Strings out of the args() iterator anyway
2016-12-14 12:59:33	misdreavus	no needless copies, no headache-y references
2016-12-14 13:01:11	svartalf	Looks like https://users.rust-lang.org is broken, smth with a discourse cdn
2016-12-14 13:01:53	bluss	svartalf: fine here
2016-12-14 13:02:14	svartalf	Weird. With a disabled browser cache it fails with a js errors
2016-12-14 13:02:19	◣	hackebeilchen (Peter@moz-hshnit.ip-addr.inexio.net) has quit (Connection closed)
2016-12-14 13:03:10	svartalf	Oh.. Cdn is trying to serve data encoded with brotli, and browser failing to decode it. Niiiice..
2016-12-14 13:04:00	misdreavus	yeah, white screen here
2016-12-14 13:04:30	antifuchs	misdreavus: yep, that's perfect (:
2016-12-14 13:05:53	◥	ghisvail (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2016-12-14 13:06:03	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-14 13:06:33	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2016-12-14 13:07:08	◥	parrip (ryan@moz-a2onff.xtra.co.nz) has joined #rust-beginners
2016-12-14 13:07:11	◥	woboats_ (woboats@moz-8rajde.ca.comcast.net) has joined #rust-beginners
2016-12-14 13:07:19	◣	Hoff (kvirc@moz-84jd08.dhcp.inet.fi) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2016-12-14 13:08:52	◣	parrip (ryan@moz-a2onff.xtra.co.nz) has quit (Quit: This computer has gone to sleep)
2016-12-14 13:09:06	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2016-12-14 13:10:46	◥	quibbit (Mibbit@moz-btubtr.ca.comcast.net) has joined #rust-beginners
2016-12-14 13:10:47	◣	quibbit (Mibbit@moz-btubtr.ca.comcast.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 13:13:11	◥	parrip (ryan@moz-a2onff.xtra.co.nz) has joined #rust-beginners
2016-12-14 13:13:58	◣	lostInTheDataJungle (oli@moz-1ekq1m.pools.vodafone-ip.de) has left #rust-beginners ("")
2016-12-14 13:15:03	antifuchs	oh yay misdreavus, some rewrites and restructures later, and this is actually looking super good. thanks for the help!
2016-12-14 13:15:15	misdreavus	no prob :D
2016-12-14 13:15:55	◥	ludat (ludat@moz-ctb.b0j.173.190.IP) has joined #rust-beginners
2016-12-14 13:16:54	◣	hansapla_ (hansaplast@moz-c0ftmc.ve71.89v9.120b.2a02.IP) has quit (Connection closed)
2016-12-14 13:17:22	◥	hansaplast (hansaplast@moz-c0ftmc.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-14 13:18:12	◥	ubsandroid (ubsan@moz-jsia2u.d1nr.figv.fb90.2607.IP) has joined #rust-beginners
2016-12-14 13:20:07	◣	ubsandroid (ubsan@moz-jsia2u.d1nr.figv.fb90.2607.IP) has quit (Quit: <3)
2016-12-14 13:20:12	◣	ubsandroid_ (ubsan@moz-90r0dm.NATPOOL.NYU.EDU) has quit (Connection closed)
2016-12-14 13:20:15	◥	ubsandroid (ubsan@moz-90r0dm.NATPOOL.NYU.EDU) has joined #rust-beginners
2016-12-14 13:21:24	◣	hansaplast (hansaplast@moz-c0ftmc.ve71.89v9.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 13:22:43	◥	hansaplast (hansaplast@moz-pt4pdr.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-14 13:23:12	◣	ilpianista (ilpianista@moz-jem.jq3.233.104.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 13:24:16	voider1	"hookdll.dll".encode_utf16().collect::<Vec<_>>();               collect::<Vev<_>>(); how does that work?
2016-12-14 13:24:33	misdreavus	specifcally the Vec<_>?
2016-12-14 13:24:37	◣	hansaplast (hansaplast@moz-pt4pdr.ve71.89v9.120b.2a02.IP) has quit (Connection closed)
2016-12-14 13:24:44	voider1	The whole syntax, it seems weird to me.
2016-12-14 13:24:47	misdreavus	ah
2016-12-14 13:24:57	misdreavus	so that's what tends to be called a "turbofish"
2016-12-14 13:25:01	misdreavus	::<>
2016-12-14 13:25:03	◥	hansaplast (hansaplast@moz-pt4pdr.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-14 13:25:08	voider1	encode_utf16() returns an iterator, so an iterator has a method which has a... Static method?
2016-12-14 13:25:17	voider1	Turbofish?
2016-12-14 13:25:18	misdreavus	it's how you pass a type parameter into a function or type
2016-12-14 13:25:19	◥	ilpianista (ilpianista@moz-jem.jq3.233.104.IP) has joined #rust-beginners
2016-12-14 13:25:21	◣	woboats_ (woboats@moz-8rajde.ca.comcast.net) has quit (Client exited)
2016-12-14 13:26:32	voider1	Ohh.
2016-12-14 13:26:32	voider1	So you tell collect: "Make a collection from it, but make it a Vec."
2016-12-14 13:26:32	misdreavus	but yeah, i would assume that encode_utf16 returns an iterator and collect says "run through the iterator and dump it into a thing"
2016-12-14 13:26:32	misdreavus	but there are a bunch of things you can collect into
2016-12-14 13:26:32	voider1	Hmm, that's very interesting.
2016-12-14 13:26:32	voider1	Turbofish.
2016-12-14 13:26:32	misdreavus	hence the ::<Vec<_>> which says "a Vec of whatever the iterator's Item is"
2016-12-14 13:26:49	voider1	What is an "Item"?
2016-12-14 14:12:51	⚡	irc: disconnected from server
2016-12-14 14:13:09	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2016-12-14 14:13:09	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2016-12-14 14:13:09	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2016-12-14 14:13:09	⚡	Channel #rust-beginners: 582 nicks (3 ops, 0 halfops, 0 voices, 579 normals)
2016-12-14 14:13:13	voider1	#rust-beginnershttp://prntscr.com/djiqet
2016-12-14 14:13:13	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2016-12-14 14:13:19	voider1	ehh
2016-12-14 14:13:20	voider1	http://prntscr.com/djiqet
2016-12-14 14:13:21	voider1	Yeah
2016-12-14 14:13:24	misdreavus	just providing context for panicbit since i wasn't sure if they were here when that link was being passed around
2016-12-14 14:13:35	caulagi_	what is the difference between i32 and usize?
2016-12-14 14:13:40	panicbit	misdreavus: Thanks
2016-12-14 14:14:00	◥	saimen (saimen@moz-i2kas4.natpool.mwn.de) has joined #rust-beginners
2016-12-14 14:14:04	voider1	I'm happy it works, thanks for all the help up until now. =P
2016-12-14 14:14:23	misdreavus	caulagi_: i32 is a signed 32-bit integer, usize is an unsigned pointer-size integer (so 32-bit on 32-bit systems and 64-bit on 64-bit)
2016-12-14 14:14:48	misdreavus	caulagi_: usize is often used to signify that you're dealing with counts of things or memory access of some kind
2016-12-14 14:15:10	misdreavus	(and all the slicing implementations are written with usize in mind)
2016-12-14 14:15:22	◣	karinqe_ (karinqe@moz-ptt.nvt.172.163.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 14:15:24	voider1	Surprsingly enough, I actually like writing Unsafe Rust.
2016-12-14 14:15:27	panicbit	voider1: It's a joy to help :)
2016-12-14 14:15:45	misdreavus	voider1: that's how they get you >:D
2016-12-14 14:15:48	voider1	:D
2016-12-14 14:16:03	caulagi_	ok - the last part clarifies the errors I was seeing
2016-12-14 14:16:08	misdreavus	pretty soon you'll be sligning C with the best of them
2016-12-14 14:16:14	misdreavus	**slinging C
2016-12-14 14:16:41	caulagi_	misdreavus: what was the distinction between iter and into_iter?
2016-12-14 14:17:24	misdreavus	they return different iterators - iter keeps the source collection around but gives you references, into_iter consumes the collection and gives you everything by-value
2016-12-14 14:17:53	misdreavus	(there's also iter_mut for mutable references)
2016-12-14 14:17:57	caulagi_	got it
2016-12-14 14:18:14	misdreavus	the collections in std use that convention, anyway
2016-12-14 14:19:10	◣	cmyr (cmyr@moz-to3mp4.158.electronicbox.net) has quit (Client exited)
2016-12-14 14:19:17	misdreavus	into_iter is technically from the IntoIterator trait, but if you think about it as part of the iter/iter_mut/into_iter trinity then that's also fine
2016-12-14 14:19:22	◣	cpup (cpup@moz-jp2.jct.218.32.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 14:19:24	◣	futile (felix@moz-52ig8c.pools.vodafone-ip.de) has quit (Quit: WeeChat 1.6)
2016-12-14 14:19:52	panicbit	Though, into_iter() can give you the same iterator as iter() if you have a reference to things
2016-12-14 14:20:00	panicbit	it's inmplementation dependent
2016-12-14 14:20:04	◥	AndroUser2 (RoodRondApe@moz-ku2jgf.dynamic.ziggo.nl) has joined #rust-beginners
2016-12-14 14:20:24	misdreavus	yeah, that's how they let you loop over vecs by-reference with `for thing in &vec`
2016-12-14 14:20:34	panicbit	yup
2016-12-14 14:20:53	misdreavus	IntoIterator is one of the magic traits that the syntax hooks into
2016-12-14 14:20:55	◣	leaper (Mibbit@moz-qd2fun.customer.t3.se) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 14:21:01	panicbit	iter() is a bit of a convenience function
2016-12-14 14:21:27	panicbit	which in most cases is like `(&coll).into_iter()`
2016-12-14 14:21:41	◥	me__ (macshaggy@moz-46ikbp.dyn.nltelcom.net) has joined #rust-beginners
2016-12-14 14:21:43	panicbit	At least in std
2016-12-14 14:22:08	misdreavus	i know i've implemented it the other way around, where IntoIterator for &Thing deferred to Thing::iter
2016-12-14 14:22:24	misdreavus	but the important thing to know is that they do the same thing
2016-12-14 14:23:26	misdreavus	this is important if you want to use iterator adapters on collections - you can't just say `my_vec.filter(...).collect()` because Vec isn't actually an Iterator
2016-12-14 14:23:29	misdreavus	this took me a while to get
2016-12-14 14:23:52	◣	tsv (macshaggy@moz-g9q6q7.chrlnc.sbcglobal.net) has quit (Ping timeout: 121 seconds)
2016-12-14 14:24:52	misdreavus	(the solution is to include iter(), like `my_vec.iter().filter(...).collect()` if you want to collect references, etc)
2016-12-14 14:25:45	◥	futile (felix@moz-52ig8c.pools.vodafone-ip.de) has joined #rust-beginners
2016-12-14 14:25:46	panicbit	:)
2016-12-14 14:26:08	misdreavus	The More You Know~
2016-12-14 14:27:05	panicbit	In scala those methods are implemented directly on the collections
2016-12-14 14:27:06	insaneinside	misdreavus: ...the less you want to?
2016-12-14 14:27:11	◥	Dima (textual@moz-0ko.c7a.21.120.IP) has joined #rust-beginners
2016-12-14 14:27:26	◣	Akien (akien@moz-gs2ia6.dyn.telefonica.de) has quit (A TLS packet with unexpected length was received.)
2016-12-14 14:27:29	misdreavus	insaneinside: pishposh
2016-12-14 14:27:34	panicbit	Which is convenient
2016-12-14 14:27:39	◥	parrip (ryan@moz-a2onff.xtra.co.nz) has joined #rust-beginners
2016-12-14 14:28:29	◥	leaper (Mibbit@moz-qd2fun.customer.t3.se) has joined #rust-beginners
2016-12-14 14:28:30	misdreavus	(also it was intended to be a reference to https://en.wikipedia.org/wiki/The_More_You_Know which i didn't realize was still a thing)
2016-12-14 14:28:31	◣	leaper (Mibbit@moz-qd2fun.customer.t3.se) has quit (Connection closed)
2016-12-14 14:29:23	◣	voider1 (voider1@moz-ku2jgf.dynamic.ziggo.nl) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-12-14 14:29:26	◥	leaper (Mibbit@moz-qd2fun.customer.t3.se) has joined #rust-beginners
2016-12-14 14:32:57	◥	cpup (cpup@moz-jp2.jct.218.32.IP) has joined #rust-beginners
2016-12-14 14:34:12	◣	dionysus69 (Thunderbird@moz-f3r.u5k.134.178.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 14:34:26	◥	r3c0d3x (r3c0d3x@moz-klfeg2.vo78.jt93.f2f8.2607.IP) has joined #rust-beginners
2016-12-14 14:34:33	◥	vmeson (rmacleod@moz-hs5cri.cable.teksavvy.com) has joined #rust-beginners
2016-12-14 14:34:44	◣	Dima (textual@moz-0ko.c7a.21.120.IP) has quit (Connection closed)
2016-12-14 14:36:08	◥	ivesen__ (ivesen@moz-f6la1q.stayon.no) has joined #rust-beginners
2016-12-14 14:36:14	◣	Binero (Binero@moz-tqrl52.sji7.g8ie.a03f.2a02.IP) has quit (Client exited)
2016-12-14 14:37:26	◥	AdamBalan (AdamBalan@moz-9o13he.cg.shawcable.net) has joined #rust-beginners
2016-12-14 14:37:27	◣	parrip (ryan@moz-a2onff.xtra.co.nz) has quit (Quit: This computer has gone to sleep)
2016-12-14 14:37:40	◣	xliiv (xliiv@moz-893luh.icpnet.pl) has quit (Ping timeout: 121 seconds)
2016-12-14 14:37:40	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Ping timeout: 121 seconds)
2016-12-14 14:37:42	⚡	ivesen__ is now known as ivesen
2016-12-14 14:39:06	◣	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has quit (A TLS packet with unexpected length was received.)
2016-12-14 14:39:23	◣	cjhowe (cjhowe@moz-jnal4r.mci.googlefiber.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-14 14:39:34	r3c0d3x	is there some way to impl a trait for types that don't impl another trait?
2016-12-14 14:39:48	misdreavus	not at the moment
2016-12-14 14:39:57	r3c0d3x	ah, ok. thanks!
2016-12-14 14:40:08	misdreavus	(^^)b
2016-12-14 14:40:31	leaper	I can't quite get the iteration to work (iterating over every half of my u8's). Here's my attempt: https://is.gd/PUnM2e Any ideas? How do I interpret the error message?
2016-12-14 14:42:08	◥	parrip (ryan@moz-a2onff.xtra.co.nz) has joined #rust-beginners
2016-12-14 14:42:22	insaneinside	leaper: it's saying that a _reference_ to some iterator type `std::slice::iter<'_, _>` doesn't implement Iterator
2016-12-14 14:43:06	insaneinside	leaper: I gave you the wrong syntax
2016-12-14 14:43:10	misdreavus	looks like arrays don't have IntoIterator
2016-12-14 14:43:17	◥	ilpianista (ilpianista@moz-jem.jq3.233.104.IP) has joined #rust-beginners
2016-12-14 14:43:20	rillian	where is the source for the rustup.rs website?
2016-12-14 14:43:26	◣	staticassert (Mibbit@moz-dqq.uce.118.208.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 14:43:30	misdreavus	stuffing it into a Vec works tho https://is.gd/qDIR3o
2016-12-14 14:43:39	◣	stelarcf (stelarcf@moz-jd7lsk.com) has quit (Client exited)
2016-12-14 14:44:04	misdreavus	rillian: looks like the www/ folder of https://github.com/rust-lang-nursery/rustup.rs
2016-12-14 14:44:12	◥	nonelement (nonelement@moz-021kv8.pa.comcast.net) has joined #rust-beginners
2016-12-14 14:44:23	insaneinside	leaper: `& expr` is always a _reference_ to `expr`, but I said `& [a, b].iter()`
2016-12-14 14:45:14	◣	junqed (junqed@moz-7c0.2s0.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2016-12-14 14:47:06	◣	sscott (Thunderbird@moz-bs8.kc7.15.94.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 14:47:12	◣	parrip (ryan@moz-a2onff.xtra.co.nz) has quit (Quit: This computer has gone to sleep)
2016-12-14 14:48:23	◣	nonelement (nonelement@moz-021kv8.pa.comcast.net) has quit (Ping timeout: 121 seconds)
2016-12-14 14:48:32	leaper	:insaneinside making it not a reference gives me some lifetime issues instead... Maybe I'll just use a Vec as :misdreavus suggested, but it doesn't feel like it should be necessary
2016-12-14 14:48:39	rillian	misdreavus: looks like you're right. Thanks!
2016-12-14 14:48:40	panicbit	r3c0d3x: There are two ways to tackle that problem
2016-12-14 14:48:50	insaneinside	leaper: yeah, it's unfortunate
2016-12-14 14:49:24	panicbit	r3c0d3x: Either you go and fix the lib or you create a wrapper around the type and impl what you need
2016-12-14 14:50:03	r3c0d3x	got it. thanks
2016-12-14 14:53:47	◥	parrip (ryan@moz-a2onff.xtra.co.nz) has joined #rust-beginners
2016-12-14 14:54:18	◥	dm3 (dm3@moz-mbu6cp.dclient.hispeed.ch) has joined #rust-beginners
2016-12-14 14:57:09	◣	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 14:57:53	◣	urcra (urcra@moz-9lk9gn.cpe.webspeed.dk) has quit (Connection closed)
2016-12-14 14:59:24	◥	voider1 (voider1@moz-ku2jgf.dynamic.ziggo.nl) has joined #rust-beginners
2016-12-14 14:59:38	◣	kazagistar (Adium@moz-br6.b81.207.205.IP) has quit (Quit: Leaving.)
2016-12-14 15:00:02	◣	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has quit (Connection closed)
2016-12-14 15:00:26	voider1	I have a question, I have hooked my keyboard, and now I get an integer for each key pressed, should I make a function with a match statement which matches the right key to the right symbol or make something like a hashmap?
2016-12-14 15:01:02	@mbrubeck	leaper: https://is.gd/TDSe25 avoids allocating a Vec on the heap
2016-12-14 15:01:37	misdreavus	heh
2016-12-14 15:02:42	misdreavus	voider1: assuming there's not some translation function in win32 already i'd go with a giant match block
2016-12-14 15:03:06	◣	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has quit (Connection closed)
2016-12-14 15:05:00	◣	saimen (saimen@moz-i2kas4.natpool.mwn.de) has quit (Ping timeout: 121 seconds)
2016-12-14 15:06:52	◣	oln (smuxi@moz-h6kap0.customer.cdi.no) has quit (Connection closed)
2016-12-14 15:07:10	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2016-12-14 15:07:58	◥	scrogson1 (scrogson@moz-i90639.tftc.9t39.0306.2602.IP) has joined #rust-beginners
2016-12-14 15:08:04	◣	AdamBalan (AdamBalan@moz-9o13he.cg.shawcable.net) has quit (Ping timeout: 121 seconds)
2016-12-14 15:09:07	◥	ubsandroid_ (ubsan@moz-7gu6nl.hi9m.kdv0.fb90.2607.IP) has joined #rust-beginners
2016-12-14 15:09:27	◣	me__ (macshaggy@moz-46ikbp.dyn.nltelcom.net) has quit (A TLS packet with unexpected length was received.)
2016-12-14 15:09:50	◣	ubsandroid_ (ubsan@moz-7gu6nl.hi9m.kdv0.fb90.2607.IP) has quit (Connection closed)
2016-12-14 15:09:56	◥	ubsandroid_ (ubsan@moz-90r0dm.NATPOOL.NYU.EDU) has joined #rust-beginners
2016-12-14 15:10:22	◥	ubsandroid__ (ubsan@moz-7gu6nl.hi9m.kdv0.fb90.2607.IP) has joined #rust-beginners
2016-12-14 15:11:02	◥	sscott (Thunderbird@moz-lksml6.stvt.i7og.0c7d.2a02.IP) has joined #rust-beginners
2016-12-14 15:11:33	◥	caleb (Mibbit@moz-tibnpe.wireless.rit.edu) has joined #rust-beginners
2016-12-14 15:11:57	caleb	does rust Vec not have something like c++ std::vector::emplace_back?
2016-12-14 15:12:20	◣	ubsandroid (ubsan@moz-90r0dm.NATPOOL.NYU.EDU) has quit (Ping timeout: 121 seconds)
2016-12-14 15:12:37	◥	macshaggy (macshaggy@moz-m86ver.o25d.8ban.0304.2602.IP) has joined #rust-beginners
2016-12-14 15:13:26	insaneinside	caleb: .push
2016-12-14 15:13:32	◣	zako (zako@moz-ormegi.dynamicip.rima-tde.net) has quit (Ping timeout: 121 seconds)
2016-12-14 15:13:57	insaneinside	caleb: "emplace" just means "move instead of call the copy constructor", which means "do the default thing in Rust"
2016-12-14 15:14:41	◣	ubsandroid_ (ubsan@moz-90r0dm.NATPOOL.NYU.EDU) has quit (Ping timeout: 121 seconds)
2016-12-14 15:16:31	bluss	but the "placement in" feature is still unstable/unimplemented
2016-12-14 15:17:29	voider1	misdreavus: Alright, thought so too. =)
2016-12-14 15:17:38	◥	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has joined #rust-beginners
2016-12-14 15:17:54	caleb	hahahha no
2016-12-14 15:17:56	◣	ubsandroid__ (ubsan@moz-7gu6nl.hi9m.kdv0.fb90.2607.IP) has quit (Quit: <3)
2016-12-14 15:18:04	voider1	I was wondering, where do you guys put the main function? On the top? At the bottom? Somewhere in the middle?
2016-12-14 15:18:11	◥	ubsandroid (ubsan@moz-1dsu0q.subnet.rcn.com) has joined #rust-beginners
2016-12-14 15:18:26	caleb	emplace "reserves" the slot in the vector, then inplace constructs it
2016-12-14 15:18:31	caleb	which means there is no move
2016-12-14 15:18:39	insaneinside	...oh, right
2016-12-14 15:18:53	caleb	it is a big deal for types that are immovable, or are expensive to move (or if they are just big)
2016-12-14 15:18:56	insaneinside	caleb: yeah, we'd need variadic generics for that too
2016-12-14 15:19:02	◣	alx741 (alx741@moz-g95.8va.152.190.IP) has quit (Connection closed)
2016-12-14 15:19:55	◣	macshaggy (macshaggy@moz-m86ver.o25d.8ban.0304.2602.IP) has quit (A TLS packet with unexpected length was received.)
2016-12-14 15:20:11	insaneinside	plus a way to make variadic generics coerce to specific types when used?  That last part seems completely out-of-line with the way Rust works, actually :/
2016-12-14 15:20:12	◥	alx741 (alx741@moz-g95.8va.152.190.IP) has joined #rust-beginners
2016-12-14 15:21:11	◥	macshaggy (macshaggy@moz-m86ver.o25d.8ban.0304.2602.IP) has joined #rust-beginners
2016-12-14 15:22:00	leaper	:mbrubeck Thanks! That's nice. Why doesn't the into_iter() version move the value to the outer iterator?
2016-12-14 15:23:09	misdreavus	leaper: it's because fixed arrays don't have an into_iter of their own, so it falls back to the one for slices, which returns references to the things inside
2016-12-14 15:23:09	@mbrubeck	leaper: There's no IntoIterator impl for [T; 2] (for annoying reasons), so instead it borrows a slice of the array and uses the IntoIterator for &[T] which yields &T
2016-12-14 15:23:23	◥	fipes (Thunderbird@moz-l728pj.dip0.t-ipconnect.de) has joined #rust-beginners
2016-12-14 15:23:38	voider1	What does *mut do?
2016-12-14 15:23:57	misdreavus	it's a way to declare a raw pointer type
2016-12-14 15:24:01	@mbrubeck	`*mut T` is a raw non-const pointer to T
2016-12-14 15:24:04	caleb	hmm, i noticed that in Rust the mutex type is moveable?
2016-12-14 15:24:11	@mbrubeck	it's like `*T` in C or C++
2016-12-14 15:24:13	voider1	What' s the difference between *const and *mut?
2016-12-14 15:24:26	caleb	that is a bit odd, considering that mutex's in win32 require a stable address
2016-12-14 15:24:45	@mbrubeck	voider1: You can't (directly) mutate something through a *const T
2016-12-14 15:24:56	leaper	:misdreavus :mbrubeck Okay I see, thanks!
2016-12-14 15:25:01	@mbrubeck	though in practice there's not much difference because you can freely cast between *mut T and *const T
2016-12-14 15:25:01	voider1	So I can mutate an *mut T?
2016-12-14 15:25:18	@mbrubeck	so it's more like a documentation of intent, rather than a hard restriction
2016-12-14 15:25:18	misdreavus	you can mutate the thing the *mut T is pointing at
2016-12-14 15:25:18	◣	caleb (Mibbit@moz-tibnpe.wireless.rit.edu) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 15:25:45	misdreavus	but yeah, the compiler itself kinda puts blinders on when you have raw pointers
2016-12-14 15:25:55	voider1	Alright, I was just wondering because I first had the line &*(lparam as *const KBDLLHOOKSTRUCT) and now I ahve &*(lparam as PKBDLLHOOKSTRUCT), and PKBDLLHOOKSTRUCT is a *mut KBDLLHOOKSTRUCT.
2016-12-14 15:26:07	@mbrubeck	darn, missed caleb. Was going to point to https://doc.rust-lang.org/src/std/up/src/libstd/sync/mutex.rs.html#114-123
2016-12-14 15:26:19	◥	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has joined #rust-beginners
2016-12-14 15:26:31	voider1	So it comes down to the same, but *mut T is mutable?
2016-12-14 15:27:11	misdreavus	the idea is that with a *const T you're not meant to mess with the thing being pointed at, but with a *mut T you are
2016-12-14 15:27:31	misdreavus	there are convenience functions to turn a *const T into an Option<&T> and a *mut T into an Option<&mut T>
2016-12-14 15:27:36	misdreavus	if that helps your reasoning any
2016-12-14 15:27:41	◥	hansaplast (hansaplast@moz-j5mh3l.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-14 15:27:44	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-14 15:28:19	◣	dm3 (dm3@moz-mbu6cp.dclient.hispeed.ch) has quit (Ping timeout: 121 seconds)
2016-12-14 15:28:23	◣	futile (felix@moz-52ig8c.pools.vodafone-ip.de) has quit (Quit: WeeChat 1.6)
2016-12-14 15:28:24	◥	ubsandroid_ (ubsan@moz-s1mofk.bf8g.05jv.fb90.2607.IP) has joined #rust-beginners
2016-12-14 15:28:43	misdreavus	note that this has nothing to do with the binding holding the pointer itself - that's a part of the binding, like if you did `let mut ptr = &mut my_thing as *mut Thing;`
2016-12-14 15:29:30	misdreavus	you can change the pointer itself to point at something different
2016-12-14 15:30:03	◣	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has quit (Ping timeout: 121 seconds)
2016-12-14 15:30:36	voider1	Well, I shouldn' t mess with the struct, but there is no type available in the winapi which is a *const T, maybe because nothing in the real winapi is immutable.
2016-12-14 15:31:08	voider1	I can cast it myself to *const T, but I think I'll leave it the way it was intended by the API.
2016-12-14 15:31:43	◣	hansaplast (hansaplast@moz-j5mh3l.ve71.89v9.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 15:31:50	voider1	Thank you, Misdreavus.
2016-12-14 15:32:01	misdreavus	probably not, tho i'm not sure how effective const pointers are in c++
2016-12-14 15:32:06	misdreavus	no prob (^^)b
2016-12-14 15:32:10	◣	ubsandroid (ubsan@moz-1dsu0q.subnet.rcn.com) has quit (Ping timeout: 121 seconds)
2016-12-14 15:32:29	misdreavus	i spent like a minute and a half trying to remember how to declare const pointers in c++ before giving up >_>
2016-12-14 15:32:51	voider1	Lol.
2016-12-14 15:32:52	voider1	xD
2016-12-14 15:32:52	◣	mexisme2 (mexisme@moz-i5v.49e.149.118.IP) has quit (Connection closed)
2016-12-14 15:32:56	◥	mexisme (mexisme@moz-15mtqr.vf.net.nz) has joined #rust-beginners
2016-12-14 15:33:10	misdreavus	i didn't spend long enough in c++ to bother with const-correctness
2016-12-14 15:34:11	◥	AdamBalan (AdamBalan@moz-9o13he.cg.shawcable.net) has joined #rust-beginners
2016-12-14 15:34:45	misdreavus	anyway, on that note, i should probably be heading out, y'all take care
2016-12-14 15:34:53	voider1	Alright, see ya.
2016-12-14 15:36:55	stephaneyfx	in rust, is it possible to define a type whose instances cannot be moved? i think it is impossible but would like confirmation.
2016-12-14 15:37:08	~steveklabnik	it is not
2016-12-14 15:37:15	~steveklabnik	a self-referencing struct cannot be moved, for example
2016-12-14 15:37:39	stephaneyfx	steveklabnik: you mean it is possible to create such a type?
2016-12-14 15:38:01	@mbrubeck	You can create a type with a `keep` method such that after you call `foo.keep()`, the value `foo` cannot be moved.
2016-12-14 15:38:19	WindowsBunnySuperposition	voider1: Well standard C doesn't have const pointers
2016-12-14 15:38:20	@mbrubeck	https://www.rust-lang.org/en-US/faq.html#how-can-i-define-a-struct-that-contains-a-reference-to-one-of-its-own-fields is such a type
2016-12-14 15:38:23	◣	AdamBalan (AdamBalan@moz-9o13he.cg.shawcable.net) has quit (Ping timeout: 121 seconds)
2016-12-14 15:38:47	stephaneyfx	mbrubeck: thank you. checking it now...
2016-12-14 15:38:53	◣	jbradberry (jrb@moz-kpp3mi.biz.rr.com) has quit (Ping timeout: 121 seconds)
2016-12-14 15:39:13	voider1	WindowsBunnySuperposition: I see, I'll just keep it PKDLLHOOKSTRUCT, looks cleaner.
2016-12-14 15:39:22	◣	parrip (ryan@moz-a2onff.xtra.co.nz) has quit (Quit: This computer has gone to sleep)
2016-12-14 15:39:30	◥	xfix (konrad@moz-3smirc.pw) has joined #rust-beginners
2016-12-14 15:39:37	voider1	Could make my own type for it, though.
2016-12-14 15:40:43	◣	thvdburgt (thvdburgt@moz-htr87p.7kab.l0e4.0982.2001.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 15:41:00	voider1	Works.
2016-12-14 15:41:00	voider1	xD
2016-12-14 15:41:08	@mbrubeck	stephaneyfx: https://is.gd/gle1B1 is the same example with the self-reference extracted into a `keep` method
2016-12-14 15:41:52	voider1	Does *const have better performance than *mut?
2016-12-14 15:41:53	◣	leaper (Mibbit@moz-qd2fun.customer.t3.se) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 15:42:04	@mbrubeck	voider1: They're exactly the same at runtime
2016-12-14 15:42:14	@mbrubeck	voider1: Each of them is just a memory address
2016-12-14 15:42:31	@mbrubeck	voider1: And you can transform either into the other with zero cost
2016-12-14 15:43:01	voider1	@mbrubeck Is it meaningful to make my own *const type of a *mut type?
2016-12-14 15:43:10	stephaneyfx	WindowsBunnySuperposition: "const char*" is standard C (at least C89)
2016-12-14 15:43:17	voider1	type CPKBDLLHOOKSTRUCT = *const KBDLLHOOKSTRUCT;           like this.
2016-12-14 15:43:54	voider1	There exists a PKBDLLHOOKSTRUCT which is *mut.
2016-12-14 15:44:59	@mbrubeck	If you have a lot of code that uses `*const KBDLLHOOKSTRUCT` then sure, make an alias for it.
2016-12-14 15:45:04	WindowsBunnySuperposition	stephaneyfx: I feel like const was added to C later
2016-12-14 15:45:19	◣	sscott (Thunderbird@moz-lksml6.stvt.i7og.0c7d.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 15:45:24	stephaneyfx	WindowsBunnySuperposition: it's in the C89 standard at least
2016-12-14 15:45:49	stephaneyfx	WindowsBunnySuperposition: but maybe it wasn't present before
2016-12-14 15:45:55	voider1	@mbrubeck I use it just one time.
2016-12-14 15:46:03	voider1	Just inline it?
2016-12-14 15:46:25	@mbrubeck	Up to you.  It only makes a difference in your source code; type aliases have no effect on the generated object code.
2016-12-14 15:46:55	voider1	Well, I think that for the one time I use I don' t need an alias for it.
2016-12-14 15:46:59	voider1	I use it*
2016-12-14 15:47:27	voider1	&*(lparam as *const KBDLLHOOKSTRUCT); look a lot cooler too.
2016-12-14 15:47:30	◥	jinshil (jinshl@moz-76n.0jp.94.115.IP) has joined #rust-beginners
2016-12-14 15:47:43	voider1	looks*
2016-12-14 15:48:06	◣	canaltinova (uid191250@moz-l3qbqh.tooting.irccloud.com) has quit (Quit: )
2016-12-14 15:49:09	◣	caulagi (caulagi@moz-cgibnc.bredband.comhem.se) has quit (Ping timeout: 121 seconds)
2016-12-14 15:49:28	◣	caulagi_ (caulagi@moz-cgibnc.bredband.comhem.se) has quit (Ping timeout: 121 seconds)
2016-12-14 15:50:24	voider1	Is there a better way to do this: k.vkCode as u8 as char?
2016-12-14 15:50:33	stephaneyfx	mbrubeck: thank you for your example, it was enlightening. but to me if feel similar to taking a reference to an instance and saying it cannot be moved afterwards because it is borrowed.
2016-12-14 15:50:45	stephaneyfx	it feels*
2016-12-14 15:51:14	◥	parrip (ryan@moz-a2onff.xtra.co.nz) has joined #rust-beginners
2016-12-14 15:51:32	@mbrubeck	stephaneyfx: Yup, that's exactly what it's doing. And the lifetime annotations ensure that the reference lives as long as the struct value itself
2016-12-14 15:52:31	@mbrubeck	It's not really the same as "a type whose instances can't be moved" but it's the closest thing that Rust has, as far as I know.
2016-12-14 15:52:39	◥	caleb (Mibbit@moz-9gg9i0.wireless.rit.edu) has joined #rust-beginners
2016-12-14 15:52:47	stephaneyfx	mbrubeck: i mean it is very similar to https://is.gd/HJvEsh, with the difference that the ref is stored in the instance itself
2016-12-14 15:52:56	caleb	hello, i have a question about generics
2016-12-14 15:53:23	◣	fwiw (matematikaa@moz-kur.9p4.81.36.IP) has quit (Quit: Leaving)
2016-12-14 15:53:25	caleb	hwo do i force a generic parameter to be passed by shared borrow?
2016-12-14 15:53:29	caleb	ie: &T
2016-12-14 15:53:59	stephaneyfx	mbrubeck: i see. thank you very much again!
2016-12-14 15:55:11	◣	undeadleech (undeadleech@moz-131abv.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2016-12-14 15:55:21	@mbrubeck	stephaneyfx: One interesting difference is that your `A` can still have a destructor https://is.gd/yVk30S
2016-12-14 15:55:23	◣	caleb (Mibbit@moz-9gg9i0.wireless.rit.edu) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 15:55:33	@mbrubeck	while `Unmovable` can't https://is.gd/uJrP6D
2016-12-14 15:55:49	◣	clayton-taylor (Mibbit@moz-bqeujs.ph.cox.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-14 15:57:27	◣	ilpianista (ilpianista@moz-jem.jq3.233.104.IP) has quit (Ping timeout: 121 seconds)
2016-12-14 15:57:56	stephaneyfx	mbrubeck: interesting indeed. i need to study your example more and the error. be back later. thank you.
2016-12-14 16:00:46	stephaneyfx	test
2016-12-14 16:00:51	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2016-12-15 16:27:10	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2016-12-15 16:27:10	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2016-12-15 16:27:10	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2016-12-15 16:27:11	⚡	Channel #rust-beginners: 558 nicks (3 ops, 0 halfops, 0 voices, 555 normals)
2016-12-15 16:27:12	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2016-12-15 16:27:54	beefucurry	Is it restricted to immutable data? https://is.gd/64kPSJ
2016-12-15 16:28:02	insaneinside	usually
2016-12-15 16:28:31	insaneinside	beefucurry: does it make sense to simply pass a reference to `shared` to any code that needs access to it, rather than having that code store an `Rc<shared>` in its own state data?
2016-12-15 16:28:35	◥	jedireza (sid393@moz-b3pedn.0j4i.jtu0.0101.2620.IP) has joined #rust-beginners
2016-12-15 16:28:37	@niconii	yeah, usually, but something like RefCell or Cell allows for something called interior mutability
2016-12-15 16:29:07	@niconii	meaning it can be mutated via &self
2016-12-15 16:29:37	⚡	bc|burnin is now known as bc|afk
2016-12-15 16:30:06	insaneinside	I'd go for argument-passing over Cell/RefCell if possible because those have their own tradeoffs -- specifically they simply move borrow-checking to run time instead of compile time
2016-12-15 16:30:38	beefucurry	so you are suggesting that each time outer calls inner.f(), that it should call inner.f(shared)
2016-12-15 16:30:49	insaneinside	mhm
2016-12-15 16:30:53	beefucurry	well inner.f(&shared) ... that would work, but it is so ugly
2016-12-15 16:31:09	insaneinside	`&mut shared` if you need to mutate the `shared` instance
2016-12-15 16:31:31	◣	sscott (Thunderbird@moz-lksml6.stvt.i7og.0c7d.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-15 16:34:29	beefucurry	Thanks for the help, I'll think about this a bit...I'm tentatively thinking that new() copying off the stack instead of being inlined like structure{ var: value} type things are is possibly the biggest problem
2016-12-15 16:34:56	insaneinside	not sure I follow you there
2016-12-15 16:35:21	insaneinside	usually LLVM will happily inline small functions under a certain size
2016-12-15 16:35:30	◥	bronson (bronson@moz-eaa7ba.dynamic.sonic.net) has joined #rust-beginners
2016-12-15 16:37:06	beefucurry	yeah, but it is a weird characteristic of the language that inlining would make the program logically correct, since the compiler by default takes data off the stack with a copy rather than clone afaik
2016-12-15 16:37:19	@niconii	er, to be clear here, your issue doesn't have anything to do with new; it's just not possible in rust to have a &/&mut point to another part of the same struct
2016-12-15 16:37:25	rkruppe	inlining would not make it correct!
2016-12-15 16:37:44	beefucurry	I said logically correct, not correct by compiler rules
2016-12-15 16:37:58	beefucurry	would still be incorrect by rust type rules
2016-12-15 16:38:02	rkruppe	even after inlining the IR would invoke UB
2016-12-15 16:38:09	insaneinside	beefucurry: esp. since the value you took the reference to would not be the same value you stored in the structure
2016-12-15 16:38:32	◥	junqed (junqed@moz-jcl.rfu.70.178.IP) has joined #rust-beginners
2016-12-15 16:40:09	insaneinside	beefucurry: so you'd have a pointer to one value (stored inside your `inner` instances), but that pointer doesn't reference the `shared` value in your `outer` instance
2016-12-15 16:40:13	@niconii	well, even if it was `struct inner { s: Option<&shared> }`, so that you could have `outer { s: s, i: None }` and then fill it in with Some(inner::new(&m.s)), rust still wouldn't allow it
2016-12-15 16:40:33	@niconii	er, rather, if it was Option<inner> in outer
2016-12-15 16:40:49	insaneinside	this too
2016-12-15 16:41:03	insaneinside	we have hacks like `owning_ref` that allow this
2016-12-15 16:41:06	insaneinside	!crate owning_ref
2016-12-15 16:41:06	rustbot	owning_ref (0.2.2) - A library for creating references that carry their owner with them. -> https://crates.io/crates/owning_ref <https://docs.rs/crate/owning_ref>
2016-12-15 16:41:19	@niconii	oh yeah, that's a thing
2016-12-15 16:41:26	insaneinside	but not sure this would work in your case
2016-12-15 16:42:22	◥	plutoniix (q@moz-89o.sqp.176.175.IP) has joined #rust-beginners
2016-12-15 16:42:24	beefucurry	java actually fixes this problem by allowing nested definitions
2016-12-15 16:42:34	◣	junqed (junqed@moz-jcl.rfu.70.178.IP) has quit (Ping timeout: 121 seconds)
2016-12-15 16:42:49	▷	insaneinside raises an eyebrow
2016-12-15 16:42:51	beefucurry	so you could do "class x { data y; class z { fn() { .. y = 1; } }}
2016-12-15 16:43:27	insaneinside	that looks like a data race waiting to happen
2016-12-16 08:19:44	⚡	irc: disconnected from server
2016-12-16 08:19:57	◥	boon (d8v3@moz-jcqrjc.hfc.comcastbusiness.net) has joined #rust-beginners
2016-12-16 08:19:57	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2016-12-16 08:19:57	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2016-12-16 08:19:57	⚡	Channel #rust-beginners: 572 nicks (2 ops, 0 halfops, 0 voices, 570 normals)
2016-12-16 08:20:01	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2016-12-16 08:20:14	◣	stew (stew@moz-ektmpt.dyn.optonline.net) has quit (Quit: leaving)
2016-12-16 08:20:46	◥	MarwenDo (MarwenDo@moz-q90.83b.225.41.IP) has joined #rust-beginners
2016-12-16 08:22:27	◣	undeadleech (undeadleech@moz-h6rdml.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2016-12-16 08:22:56	◥	stew (stew@moz-ektmpt.dyn.optonline.net) has joined #rust-beginners
2016-12-16 08:23:41	◣	cyphase (cyphase@moz-nec92m.c70l.44fu.0640.2601.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 08:24:58	◥	cyphase (cyphase@moz-nec92m.c70l.44fu.0640.2601.IP) has joined #rust-beginners
2016-12-16 08:26:03	◥	iiddnn__ (iacopodeeno@moz-fompeo.retail.telecomitalia.it) has joined #rust-beginners
2016-12-16 08:27:43	◣	xliiv (xliiv@moz-893luh.icpnet.pl) has quit (Ping timeout: 121 seconds)
2016-12-16 10:01:46	⚡	irc: disconnected from server
2016-12-16 10:02:04	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2016-12-16 10:02:04	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2016-12-16 10:02:04	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2016-12-16 10:02:04	⚡	Channel #rust-beginners: 572 nicks (2 ops, 0 halfops, 0 voices, 570 normals)
2016-12-16 10:02:05	◥	fireglow (fireglow@moz-8396m4.01l3.umbq.0bc8.2001.IP) has joined #rust-beginners
2016-12-16 10:02:08	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2016-12-16 10:02:16	Lovely	why have you been using vim?
2016-12-16 10:02:33	Lovely	ramn, forgot to mention you
2016-12-16 10:02:46	nonelement	Lovely: from a ux standpoint their learning curves are both atrocious, but learning how to sufficiently use one of them is probably invaluable
2016-12-16 10:02:48	ramn	Well I wanted to try both emacs and vim
2016-12-16 10:03:24	ramn	If you want to extend them writing your own plugins, I'd say go with emacs. The vim scripting language is disgusting (my opinion :)
2016-12-16 10:03:41	nonelement	ramn: seconded
2016-12-16 10:03:50	guzzlefry	Didn't neovim fix the scripting situation?
2016-12-16 10:03:55	ramn	However I've come to really appreciate the modal editing in vim
2016-12-16 10:04:13	nonelement	guzzlefry: python, I guess. Or at least the option of python
2016-12-16 10:04:17	ramn	if you want to minimize your keystrokes when operatingthe editor, you'll like vim
2016-12-16 10:05:42	ramn	Yes neovim and also vim 8 is better I suppose, now better support for calling out to external processes
2016-12-16 10:05:42	stew	can you specify features with rustflags?
2016-12-16 10:05:42	ramn	lets see what the community will do with the new capabilities in vim 8
2016-12-16 10:05:49	ramn	Lovely: if you want to try vim I think you will have to give it a sincere effort for a few months before you will get the feel for the nice parts
2016-12-16 10:05:54	◥	urcra (urcra@moz-9lk9gn.cpe.webspeed.dk) has joined #rust-beginners
2016-12-16 10:06:42	stew	yeah it takes a few weeks at least to get over the ui and fall into 'insert/visual/block' mode
2016-12-16 10:07:03	stew	and to start using f and n and stuff like that to move around
2016-12-16 10:07:15	◥	starblue (juergen@moz-s3dlj6.dip0.t-ipconnect.de) has joined #rust-beginners
2016-12-16 10:07:16	stew	or ct*
2016-12-16 10:07:58	ramn	helps if you have a colleague that is good with vim and show stuff
2016-12-16 10:08:40	stew	yeah, for sure
2016-12-16 10:08:52	stew	my buddy showed me a few key plugins a while ago too. stuff like fugitive.vim gets you really excited
2016-12-16 10:09:41	BDH	with std::net, how do I make a stream keep reading over and over? it seems that after reading once, it never blocks again
2016-12-16 10:10:00	◥	bcmyers (bcmyers@moz-4sc9qb.3jhe.qnm0.6000.2605.IP) has joined #rust-beginners
2016-12-16 10:10:51	Lovely	thanks : ) I will give it a try when I find some time
2016-12-16 10:11:14	◥	jerknextdoor (Cameron@moz-4jmrvk.in.comcast.net) has joined #rust-beginners
2016-12-16 10:11:15	◥	bronson (bronson@moz-eaa7ba.dynamic.sonic.net) has joined #rust-beginners
2016-12-16 10:11:17	◥	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has joined #rust-beginners
2016-12-16 10:11:30	◥	Fishrock123 (Fishrock123@moz-bu8and.dsl.bell.ca) has joined #rust-beginners
2016-12-16 10:11:31	◣	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-16 10:11:40	◣	jerknextdoor (Cameron@moz-4jmrvk.in.comcast.net) has quit (Connection closed)
2016-12-16 10:11:51	◣	helix (abacaxi@moz-q96skh.torproject.org) has quit (Quit: Lost terminal)
2016-12-16 10:12:07	◥	jerknextdoor (Cameron@moz-4jmrvk.in.comcast.net) has joined #rust-beginners
2016-12-16 10:12:13	Lovely	btw, intelliJ was a neat tip, totally works for me! thanks a lot
2016-12-16 10:12:34	◣	jerknextdoor (Cameron@moz-4jmrvk.in.comcast.net) has quit (Connection closed)
2016-12-16 10:12:41	◥	helix (abacaxi@moz-q96skh.torproject.org) has joined #rust-beginners
2016-12-16 10:13:03	◥	ebvalaim (bartek@moz-ehk6a9.dynamic.chello.pl) has joined #rust-beginners
2016-12-16 10:13:10	◥	jerknextdoor (Cameron@moz-4jmrvk.in.comcast.net) has joined #rust-beginners
2016-12-16 10:13:52	◣	starblue (juergen@moz-s3dlj6.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2016-12-16 10:13:53	◥	starblue1 (juergen@moz-s3dlj6.dip0.t-ipconnect.de) has joined #rust-beginners
2016-12-16 10:15:36	◣	bronson (bronson@moz-eaa7ba.dynamic.sonic.net) has quit (Ping timeout: 121 seconds)
2016-12-16 10:19:57	◣	bcmyers (bcmyers@moz-4sc9qb.3jhe.qnm0.6000.2605.IP) has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2016-12-16 10:24:30	BDH	I'm still having trouble making a tcp stream keep listening. If I put it in a loop it floods output, because stream.read() blocks only the first time it occurs
2016-12-16 10:25:49	◣	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has quit (Ping timeout: 121 seconds)
2016-12-16 10:25:51	◥	Hoff (kvirc@moz-84jd08.dhcp.inet.fi) has joined #rust-beginners
2016-12-16 10:25:53	◥	woboats (lee@moz-8rajde.ca.comcast.net) has joined #rust-beginners
2016-12-16 10:26:15	◣	russ_za_ (smuxi@moz-j0gtds.voxdsl.co.za) has quit (Ping timeout: 121 seconds)
2016-12-16 10:26:16	◥	russ_za (smuxi@moz-qiq4rp.voxdsl.co.za) has joined #rust-beginners
2016-12-16 10:26:52	◥	karinqe_ (karinqe@moz-ptt.nvt.172.163.IP) has joined #rust-beginners
2016-12-16 10:28:05	◥	junqed (junqed@moz-jcl.rfu.70.178.IP) has joined #rust-beginners
2016-12-16 10:36:31	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2016-12-16 10:37:02	◥	vorner (vorner@moz-fjnbbo.cz) has joined #rust-beginners
2016-12-16 10:37:25	Xion	https://underhanded.rs/blog/2016/12/15/underhanded-rust.en-US.html LOL
2016-12-16 10:37:31	svartalf	BDH: what kind of output are you get? Probably you're just receving all required data? :)
2016-12-16 10:37:42	◥	agmcleod (textual@moz-cutlp5.cpe.teksavvy.com) has joined #rust-beginners
2016-12-16 10:37:58	BDH	No, the stream isn't closed. By declaring a new buffer in ever iteration of the loop that seems to have fixed it :)
2016-12-16 10:38:45	svartalf	BDH: seems like a bad idea, why do you need to allocate new memory chuck on a each iteration? Probably you just need to clear a "global" one buffer
2016-12-16 10:39:11	BDH	how can you "clear" a slice? Expected behavior of stream.read(buf) was to start from beginning each time
2016-12-16 10:39:47	svartalf	BDH: it is hard to guess without a real code :) Can you show it?
2016-12-16 10:43:10	◥	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has joined #rust-beginners
2016-12-16 10:45:03	vorner	Hello. I'm an experienced programmer, but I'm just starting to learn rust. I wrote some code. It works, but I'm not very happy with how it looks - it's bunch of unwraps and expects. Could someone have a look at it and suggest if it could be improved?
2016-12-16 10:45:17	~steveklabnik	sure
2016-12-16 10:45:31	vorner	https://gitlab.labs.nic.cz/turris/ucollect/blob/hack-rust/src/master/amihacked/process/src/main.rs
2016-12-16 10:46:06	vorner	(I'm trying to replace several slow perl scripts, so this is my company's git hosting)
2016-12-16 10:46:25	~steveklabnik	totally
2016-12-16 10:46:31	~steveklabnik	so , there's one strategy that can help a bit
2016-12-16 10:46:49	◣	durka42 (durka42@moz-itei31.pa.comcast.net) has quit (Client exited)
2016-12-16 10:47:00	~steveklabnik	lemme find a reference for it....
2016-12-16 10:47:07	BDH	"cannot assign to immutable borrowed content"
2016-12-16 10:47:26	BDH	I'm trying to change i64 inside an Arc. what am I doing wrong?
2016-12-16 10:47:38	misdreavus	an Arc will only give you an immutable reference
2016-12-16 10:47:49	misdreavus	if you want to change it you need something like Cell/Refcell
2016-12-16 10:47:59	LLBlumire	could also do an ArcMutex
2016-12-16 10:48:03	~steveklabnik	vorner: https://siciarz.net/24-days-rust-clap/ specifically, 
2016-12-16 10:48:05	misdreavus	(Mutex, i guess, since it's an Arc)
2016-12-16 10:48:08	LLBlumire	yeah
2016-12-16 10:48:11	~steveklabnik	"The main function uses a pattern I've noticed in a few applications or blog posts from the community. We process configuration and pass options to a run() function, which does all the work. This function returns a Result, allowing the use of ? directly in run() (we can't do that in main())." <- this part
2016-12-16 10:48:25	~steveklabnik	what that would let you do is change a lot of unwrap/expect with ? instead
2016-12-16 10:48:29	FrenchToast	so I've got a Result returning from a function, and I see that it often is tossed into a match statement to collect the results.  I want to use the value inside if it's Ok, and if not then I don't want to do anything.  Whats the idiomatic way of doing that?  A match feels like a bit much, and I didn't see how I'd have access to the value if I do try!
2016-12-16 10:48:56	~steveklabnik	well
2016-12-16 10:49:03	~steveklabnik	try! / ? both return the value
2016-12-16 10:49:06	~steveklabnik	and return any errors
2016-12-16 10:49:10	misdreavus	FrenchToast: what try!() will do is return from the function if the result is Err, and otherwise evaluate to the value inside if it's Ok
2016-12-16 10:49:12	~steveklabnik	so that's not _exactly_ what you want
2016-12-16 10:49:12	◥	Noldorin (noldorin@moz-3m0dvr.r2j2.07bk.0c7d.2a02.IP) has joined #rust-beginners
2016-12-16 10:49:17	~steveklabnik	hehe misdreavus you've got this
2016-12-16 10:49:21	misdreavus	like an unwrap but it doesn't panic
2016-12-16 10:49:22	misdreavus	:P
2016-12-16 10:49:28	FrenchToast	yeah
2016-12-16 10:49:42	insaneinside	FrenchToast: .and_then is one possibility here
2016-12-16 10:49:43	misdreavus	FrenchToast: so if you want to just ignore the error, you could do something like `if let Ok(thing) = my_result`
2016-12-16 10:49:52	svartalf	So, if it is not panic!(), it is a worry!()
2016-12-16 10:49:57	LLBlumire	why not just Reuslt::map, that uses the value inside if it's okay, and does nothing if it's not
2016-12-16 10:50:02	LLBlumire	you could just ignore the Result that it maps to
2016-12-16 10:50:13	misdreavus	same song, different ddance
2016-12-16 10:50:15	misdreavus	**dance
2016-12-16 10:50:21	LLBlumire	yeah
2016-12-16 10:50:21	~steveklabnik	vorner: so basically the pattern is something like this (still being written) https://github.com/rust-lang/book/blob/a52ff4465f27cc9da1e37cf60f086ea777eb5b7f/src/ch12-00-an-io-project.md
2016-12-16 10:50:30	LLBlumire	if let Ok(thing) is probably the most idiomatic way
2016-12-16 10:50:31	FrenchToast	I like misdreavus option the best so far I think
2016-12-16 10:50:32	LLBlumire	thinking about it
2016-12-16 10:50:37	FrenchToast	yeah
2016-12-16 10:50:52	~steveklabnik	vorner: you end up with a main that processes arguments, then calls some sort of "run" function that returns a Result, then handles the result it gets back
2016-12-16 10:50:55	misdreavus	you could even ditch the scope and do something like unwrap_or which will let you provide a default
2016-12-16 10:51:11	misdreavus	(if you can provide a default, that is)
2016-12-16 10:51:20	vorner	OK, I'll try that, if it helps a bit.
2016-12-16 10:51:25	◣	scrogson1 (scrogson@moz-hq694i.tftc.9t39.0306.2602.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 10:51:27	◣	Lovely (Lovely@moz-3pod83.versanet.de) has quit (Quit: Leaving)
2016-12-16 10:51:29	FrenchToast	thanks misdreavus
2016-12-16 10:51:31	misdreavus	(^^)b
2016-12-16 10:51:31	vorner	Anything else I do obviously the wrong way?
2016-12-16 10:52:16	◥	feamcor (feamcor@moz-6cvrc5.baf.movistar.cl) has joined #rust-beginners
2016-12-16 10:52:27	◣	feamcor (feamcor@moz-6cvrc5.baf.movistar.cl) has quit (Quit: Bye!)
2016-12-16 10:52:33	◥	feamcor (feamcor@moz-6cvrc5.baf.movistar.cl) has joined #rust-beginners
2016-12-16 10:52:38	◣	feamcor (feamcor@moz-6cvrc5.baf.movistar.cl) has quit (Quit: Bye!)
2016-12-16 10:52:43	LLBlumire	vorner: SplitOutput::process is taking &Vec<String> instead of &[String]
2016-12-16 10:52:44	LLBlumire	the latter is more idiomatic
2016-12-16 10:52:47	◣	MarwenDo (MarwenDo@moz-q90.83b.225.41.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 10:52:56	LLBlumire	as it can take any slice type, not just a Vec, and you aren't mutating or adding anything to the Vec so there's no difference
2016-12-16 10:52:59	~steveklabnik	vorner: line 83's nested if is very, very brutal
2016-12-16 10:53:57	~steveklabnik	vorner: one other thing, this is a great use case for "scoped threads", like here: http://aturon.github.io/crossbeam-doc/crossbeam/struct.Scope.html#method.spawn  (this requires using the crossbeam package)
2016-12-16 10:54:36	~steveklabnik	i am not 100% sure because of the hashmap, but i think it would let you get rid of a lot of the synchronization stuff. the arc at least.
2016-12-16 10:54:39	vorner	steveklabnik, To get rid of that Arc?
2016-12-16 10:54:40	LLBlumire	I agree with steveklabnik, might be worth taking the conditional block starting on line 83 and making a function out of it, just to keep things cleaner
2016-12-16 10:55:39	~steveklabnik	i don't even think you'd need that, you can inline the if into the 'true' arm of the inner if, no?
2016-12-16 10:56:02	◥	xliiv (xliiv@moz-893luh.icpnet.pl) has joined #rust-beginners
2016-12-16 10:56:12	◣	FrenchToast (FrenchToast@moz-s44on6.co.comcast.net) has quit (Connection closed)
2016-12-16 10:56:34	LLBlumire	they are using outputs mutably inside the if block, so it might cause some double borrows doing that
2016-12-16 10:56:52	LLBlumire	that was why I assumed they were doing it anyway
2016-12-16 10:57:07	LLBlumire	see: outputs.read() in the if let, and outputs.write() in the actual conditional block on line 91
2016-12-16 10:57:41	~steveklabnik	ah
2016-12-16 10:58:04	stephaneyfx	is it bad practice to output multiple lines in the impl of Display::fmt? -- my impl is for a custom error type that contains a chain of errors and i'm wondering if the chain of error messages should be written to the formatter or only the top one in the impl of Display::fmt
2016-12-16 10:58:38	LLBlumire	the joys of single mutable access
2016-12-16 10:58:46	◣	dranov (dranov@moz-u7mpcl.ucl.ac.uk) has quit (Connection closed)
2016-12-16 10:58:50	misdreavus	the derived Debug impl prints multiple lines if the "alternate" flag is set ("{:#?}"), so it's not unheard of
2016-12-16 10:59:00	~steveklabnik	misdreavus++
2016-12-16 10:59:08	~steveklabnik	i would argue that you should if # is
2016-12-16 10:59:34	~steveklabnik	but then again, i'm not 100% sure Display has #? do all formatting traits have them? I thought so, not sure
2016-12-16 10:59:44	misdreavus	i think they all do, they just might not use it
2016-12-16 10:59:56	misdreavus	i know for a fact Display can do it because that's how i did my rustdoc changes
2016-12-16 10:59:58	vorner	That crossbeam looks nice.
2016-12-16 11:00:20	stephaneyfx	misdreavus: misdreavus: thank you. i need to look up '#' as i have never used it.
2016-12-16 11:00:24	bluss	I think you can do what you want with Display, it's for user visible output in your program
2016-12-16 11:00:33	◣	lostInTheDataJungle (oli@moz-1ekq1m.pools.vodafone-ip.de) has left #rust-beginners ("")
2016-12-16 11:00:49	misdreavus	stephaneyfx: you can access it by using the alternate() function on the Formatter you're given in the fmt function
2016-12-16 11:00:59	misdreavus	branch off that as necessary
2016-12-16 11:01:07	vorner	Thank you for the input. I'll have a look at how it helps.
2016-12-16 11:01:07	stephaneyfx	bluss: thank you. i understand. just wondering if it was frown upon
2016-12-16 11:01:40	stephaneyfx	misdreavus: thank you. i'm checking the doc now.
2016-12-16 11:01:43	misdreavus	(^^)b
2016-12-16 11:02:29	misdreavus	using the formatter flags really confused me for a while until i noticed they were all on the Formatter struct
2016-12-16 11:03:30	svartalf	Is struct instance allocates memory for itself (excluding struct members)? I'm wondering if any memory freeing will be done in the `deconstruct()` method: https://is.gd/Q0QqUu
2016-12-16 11:03:35	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-16 11:03:45	misdreavus	protip: if you just want to pass the flag in the same state to a Display impl of something else, you can call Display::fmt(&thing, f) and it will keep the flags in the same state
2016-12-16 11:04:23	stephaneyfx	misdreavus: makes sense. thank you again!
2016-12-16 11:04:28	misdreavus	no prob (^^)b
2016-12-16 11:05:54	◥	lostInTheDataJungle (oli@moz-1ekq1m.pools.vodafone-ip.de) has joined #rust-beginners
2016-12-16 11:05:57	misdreavus	svartalf: effectively what that does is break the stack space into two separately addressible elements - the only "allocated memory" is held by the String, which is being returned as-is
2016-12-16 11:07:01	◥	pounce (pounce@moz-vi09a1.or.frontiernet.net) has joined #rust-beginners
2016-12-16 11:07:16	svartalf	misdreavus: great, I was not sure about it, thanks :)
2016-12-16 11:07:29	svartalf	Now it should be easier to wrap hyper request
2016-12-16 11:07:49	svartalf	I'll just break it into a pieces *evil laugh*
2016-12-16 11:08:00	misdreavus	generally stack memory is reclaimed when things fall out of scope, and heap memory (if any) is deallocated upon calling Drop (which is typically when things fall out of scope)
2016-12-16 11:08:39	nonelement	out of curiosity, what sorts of things usually end up in drop impls?
2016-12-16 11:08:43	misdreavus	things like Box, Vec, String, other collections, etc are the main holders of heap memory
2016-12-16 11:09:17	misdreavus	a Drop impl is if you want to clean up some state when an instance is not being used any more
2016-12-16 11:09:32	misdreavus	a good example is Rc/Arc, which will decrement their reference counts in their Drop
2016-12-16 11:09:41	misdreavus	(and deallocate if the refcount hits zero)
2016-12-16 11:10:04	misdreavus	Box/Vec/String/etc will deallocate their memory in their Drop impl
2016-12-16 11:10:08	◣	Noldorin (noldorin@moz-3m0dvr.r2j2.07bk.0c7d.2a02.IP) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-12-16 11:10:14	misdreavus	(don't ask me the details on that, i haven't looked >_>)
2016-12-16 11:10:19	◥	sneaker (thomas@moz-blt.n21.144.213.IP) has joined #rust-beginners
2016-12-16 11:10:23	nonelement	ah, yeah, that makes sense. cool
2016-12-16 11:10:57	misdreavus	it's like a destructor from OOP-ish languages
2016-12-16 11:11:00	◣	xliiv (xliiv@moz-893luh.icpnet.pl) has quit (Ping timeout: 121 seconds)
2016-12-16 11:11:05	◣	woboats (lee@moz-8rajde.ca.comcast.net) has quit (Ping timeout: 121 seconds)
2016-12-16 11:11:11	misdreavus	only you don't need to manually deallocate heap memory
2016-12-16 11:11:34	stephaneyfx	is it ok for the impl of a method of trait Foo to call a method of the impl of trait "Bar: Foo"? i think it is and the compiler agrees but it feels a bit circular-reference-ish as trait Bar implies trait Foo but the impl of the latter uses the impl of the former. https://is.gd/AQKNaB
2016-12-16 11:12:18	misdreavus	well, that's in the impl for A, which you already know has a Bar impl
2016-12-16 11:12:19	BDH	how do I unlock io::stdout() ? I can't write from multiple threads
2016-12-16 11:12:41	nonelement	right, yeah. I haven't personally had to impl Drop for anything I've written, but I saw mention of it in the docs the other night
2016-12-16 11:12:48	NfNitLoop	BDH: If you locked it, then you need to let the lock go out of scope.  
2016-12-16 11:12:50	misdreavus	stephaneyfx: if you were providing a default impl for any Foo, then you couldn't use g()
2016-12-16 11:12:59	BDH	just added some anonymous scopes- thanks!
2016-12-16 11:13:08	NfNitLoop	BDH: Otherwise, things like println!() will lock it for each individual call and you don't need to do locking. 
2016-12-16 11:13:08	nonelement	putting that on a mental shelf somewhere for when I'll need it in the future
2016-12-16 11:13:49	misdreavus	i haven't written anything yet that needed its own Drop, but it's nice to know it's there
2016-12-16 11:13:59	stephaneyfx	misdreavus: agreed. thank you for your help once more.
2016-12-16 11:14:04	misdreavus	(^^)b
2016-12-16 11:15:15	NfNitLoop	I'm having to write some Go for work and constantly wishing it were Rust. :( 
2016-12-16 11:15:22	◥	jq-rs (Mibbit@moz-nhsjak.226.threembb.ie) has joined #rust-beginners
2016-12-16 11:15:41	◥	Abovegame (Mibbit@moz-j7baiv.dynamic.sbb.rs) has joined #rust-beginners
2016-12-16 11:16:40	svartalf	Hah
2016-12-16 11:16:43	NfNitLoop	the whole "Don't forget to close your channel or things will hang around forever!"  ... Rust channels are so much nicer. :p 
2016-12-16 11:16:44	svartalf	Same for me
2016-12-16 11:17:05	NfNitLoop	And generics. Technology of the future!  :p 
2016-12-16 11:17:28	misdreavus	has any mainstream language picked up the defer statement from JAI?
2016-12-16 11:18:19	jerknextdoor	I am getting a "native library `openssl` is binked linked by more than one version" error and I'm struggling to figure out how to rememdy it. I'm using `rust-openssl` and `reqwest` in my package and trying to get `acme-client` to work with all of this. Any ideas on how to troubleshoot this?
2016-12-16 11:18:45	jerknextdoor	*being not binked
2016-12-16 11:18:45	svartalf	NfNitLoop: one my colleage few months ago said that generics are bad, because code became too hard, so be careful ;)
2016-12-16 11:19:26	bluss	jerknextdoor: need to figure out how/if you can depend on versions of things so that only one version of openssl is used
2016-12-16 11:19:26	NfNitLoop	Yeah, but generics let you hid the hard bits in libraries, then your everyday code becomes easier. 
2016-12-16 11:19:42	~steveklabnik	jerknextdoor: last time i delt with this, it was a combination of looking through cargo.lock and useing the "cargo outdated" command (which you get through cargo install)
2016-12-16 11:19:43	NfNitLoop	Just dumb stuff like putting MyCustomType into a list.   Oh, I can't .collect() because no generics. 
2016-12-16 11:19:44	bluss	jerknextdoor: I think cargo build -v should be useful on its own to see which versions are being built
2016-12-16 11:20:01	~steveklabnik	NfNitLoop: this is getting a bit far afield of helping newbies in rust ;) <3
2016-12-16 11:20:36	misdreavus	it looks like acme-client directly depends on a newer openssl than hyper does?
2016-12-16 11:20:44	Abovegame	can we do something like this ? 
2016-12-16 11:20:46	svartalf	NfNitLoop: just kidding, I totally agree with you :) It's just a work arguing drives me crazy sometimes
2016-12-16 11:20:57	jerknextdoor	@bluss: That's what I'm trying to work through. I've got cargo-edit going so I can see the dependency tree. I am guessing I'm gonna need to fork something and submit a PR, I'm just trying to figure out what that is before I break everything.
2016-12-16 11:21:01	Abovegame	fn somefunc<T: i32> (x : T ) -> T { . . . }
2016-12-16 11:21:08	~steveklabnik	Abovegame: not today, no
2016-12-16 11:21:23	Abovegame	i know but is there something similiar ?
2016-12-16 11:21:35	~steveklabnik	to be clear, you want T to be a specific integer
2016-12-16 11:21:37	~steveklabnik	yes?
2016-12-16 11:21:45	Abovegame	yea
2016-12-16 11:21:55	~steveklabnik	!crate typenum
2016-12-16 11:21:55	rustbot	typenum (1.5.1) - Typenum is a Rust library for type-level numbers evaluated at compile time. It currently supports bits, unsigned integers, and signed integers. It also provides a type-level array of type-level numbers, but its implementation is incomplete. -> https://crates.io/crates/typenum <https://docs.rs/crate/typenum>
2016-12-16 11:21:57	kimundi	Abovegame: what do you want that code to do?
2016-12-16 11:21:58	~steveklabnik	this package is... not for real things
2016-12-16 11:22:03	~steveklabnik	but is the closest thing to doing that
2016-12-16 11:22:29	◥	Noldorin (noldorin@moz-rgheg4.r2j2.07bk.0c7d.2a02.IP) has joined #rust-beginners
2016-12-16 11:22:29	~steveklabnik	if you were trying to abstract over different kinds of integers, that's a different thing
2016-12-16 11:22:35	◥	ubsandroid_ (ubsan@moz-57b507.subnet.rcn.com) has joined #rust-beginners
2016-12-16 11:22:40	◣	ubsandroid (ubsan@moz-57b507.subnet.rcn.com) has quit (Connection closed)
2016-12-16 11:23:13	Abovegame	:)
2016-12-16 11:23:13	◣	ubsandroid_ (ubsan@moz-57b507.subnet.rcn.com) has quit (Connection closed)
2016-12-16 11:23:21	◥	ubsandroid (ubsan@moz-tsvm31.rktg.figv.fb90.2607.IP) has joined #rust-beginners
2016-12-16 11:25:56	◥	Jackneill (Jackneill@moz-lo0c1n.static.digikabel.hu) has joined #rust-beginners
2016-12-16 11:31:36	◣	dormiens (alanjcfs@moz-04u.dnf.241.192.IP) has quit (Quit: Leaving)
2016-12-16 11:32:02	vorner	How do I use the ? thing? I found documentation for try!, but googling for ? doesn't really help :-(
2016-12-16 11:32:10	◥	dormiens (alanjcfs@moz-04u.dnf.241.192.IP) has joined #rust-beginners
2016-12-16 11:32:25	stephaneyfx	vorner: append it after a Result instance
2016-12-16 11:32:41	◥	saimen (saimen@moz-i2kas4.natpool.mwn.de) has joined #rust-beginners
2016-12-16 11:32:47	bluss	vorner: try!(x) and x? are equivalent
2016-12-16 11:32:48	stephaneyfx	vorner: try!(x)  <=>  x?
2016-12-16 11:33:44	◣	ubsandroid (ubsan@moz-tsvm31.rktg.figv.fb90.2607.IP) has quit (Quit: <3)
2016-12-16 11:33:48	vorner	Thanks :-). The try! documentation says to prefer ?, but doesn't link to any documentation for it.
2016-12-16 13:13:52	⚡	irc: disconnected from server
2016-12-16 13:14:07	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2016-12-16 13:14:07	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2016-12-16 13:14:07	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2016-12-16 13:14:07	⚡	Channel #rust-beginners: 577 nicks (2 ops, 0 halfops, 0 voices, 575 normals)
2016-12-16 13:14:11	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2016-12-16 13:14:31	◥	ghisvail (ghisvail@moz-n3upda.cable.virginm.net) has joined #rust-beginners
2016-12-16 13:15:59	◥	woboats (woboats@moz-i3d.gf4.16.4.IP) has joined #rust-beginners
2016-12-16 13:16:08	◣	dionysus69 (Thunderbird@moz-f3r.u5k.134.178.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 13:16:59	◥	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has joined #rust-beginners
2016-12-16 13:18:37	◣	ghisvail (ghisvail@moz-n3upda.cable.virginm.net) has quit (Ping timeout: 121 seconds)
2016-12-16 13:18:42	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2016-12-16 13:20:43	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2016-12-16 13:23:42	◣	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has quit (Quit: WeeChat 1.5)
2016-12-16 13:27:52	◣	bushidoboy (dbishop@moz-ok6.k7o.229.192.IP) has quit (Quit: WeeChat 1.6)
2016-12-16 13:27:56	◣	starblue1 (juergen@moz-s3dlj6.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2016-12-16 13:28:20	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 13:28:24	◥	crodjer (crodjer@moz-ukg.kkl.248.49.IP) has joined #rust-beginners
2016-12-16 13:28:34	◥	mandeep (mandeep@moz-mgt.dfa.8.198.IP) has joined #rust-beginners
2016-12-16 13:29:00	◥	mib_lkzce4 (Mibbit@moz-h38c14.co.comcast.net) has joined #rust-beginners
2016-12-16 13:29:01	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-16 13:30:01	◣	mib_lkzce4 (Mibbit@moz-h38c14.co.comcast.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-16 13:30:32	◣	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has quit (Connection closed)
2016-12-16 13:30:37	◥	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has joined #rust-beginners
2016-12-16 13:31:09	◣	crodjer_ (crodjer@moz-2ca.iaj.8.103.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 13:31:49	◥	ubsandroid (ubsan@moz-f9kbgk.NATPOOL.NYU.EDU) has joined #rust-beginners
2016-12-16 13:32:37	◣	nonelement (nonelement@moz-uouu4n.nonelement.com) has quit (Quit: Lost terminal)
2016-12-16 13:33:33	◥	^bschafer1 (banner@moz-5fh.fms.181.180.IP) has joined #rust-beginners
2016-12-16 13:36:18	◥	Zoomulator (Mibbit@moz-e264dm.bredband.comhem.se) has joined #rust-beginners
2016-12-16 13:37:18	Zoomulator	Hey! Any friday night coders want to take a look at my generics experiment? https://is.gd/H9IqNX
2016-12-16 13:39:31	◣	vorner (vorner@moz-fjnbbo.cz) has quit (Quit: Error from remote client)
2016-12-16 13:40:36	◣	ubsandroid (ubsan@moz-f9kbgk.NATPOOL.NYU.EDU) has quit (Ping timeout: 121 seconds)
2016-12-16 13:40:47	misdreavus	hmm, there might be some further gymnastics with something like Borrow or AsRef...
2016-12-16 13:41:02	Arnavion	At the very least you can get rid of one set of &   https://is.gd/CgzPnq
2016-12-16 13:41:18	⚡	ParadoxSpiral is now known as kamawanai
2016-12-16 13:41:19	Zoomulator	yeah, I've tried with those traits, but haven't figured out anything that works
2016-12-16 13:42:28	Zoomulator	Arnavion: Well, I'd like the closure to take a reference to avoid a move or copy
2016-12-16 13:42:35	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2016-12-16 13:43:03	Arnavion	and that is what the second one is doing
2016-12-16 13:43:52	⚡	kamawanai is now known as ParadoxSpiral
2016-12-16 13:43:56	Zoomulator	Sure, though this is a reduced example. My actual problem lies with iterators and Iterator::Item sometimes being a reference
2016-12-16 13:45:09	⚡	ParadoxSpiral is now known as kamawanai
2016-12-16 13:45:22	◣	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has quit (Quit: Connection closed for inactivity)
2016-12-16 13:46:01	◣	himi (sjjf@moz-r3ta53.internode.on.net) has quit (Ping timeout: 121 seconds)
2016-12-16 13:46:08	⚡	kamawanai is now known as ParadoxSpiral
2016-12-16 13:46:52	Zoomulator	So I don't have full control over T being a reference or not.
2016-12-16 13:47:56	kimundi	Zoomulator: The general approach would be to have a trait bound on Item that both T and &T fulfill
2016-12-16 13:48:01	◥	ehiggs (ehiggs@moz-s7dsfa.access.telenet.be) has joined #rust-beginners
2016-12-16 13:48:52	⚡	ParadoxSpiral is now known as kamawanai
2016-12-16 13:49:15	⚡	kamawanai is now known as ParadoxSpiral
2016-12-16 13:50:39	Zoomulator	kimundi: But how do I get the dereferred type of T for the lambda?
2016-12-16 13:51:26	kimundi	Zoomulator: Do you need a T or a &T in the lambda?
2016-12-16 13:52:01	◣	stelarcf (stelarcf@moz-jd7lsk.com) has quit (Client exited)
2016-12-16 13:52:22	misdreavus	is the lambda always defined alongside the iterator's creation? if so, the distinction might not matter that much
2016-12-16 13:53:05	◣	hansaplast (hansaplast@moz-eofc2e.ve71.89v9.120b.2a02.IP) has quit (Connection closed)
2016-12-16 13:53:19	Zoomulator	I'd mostly like to avoid the "oh" moment of needing the double & in the cases where the iterator returns a reference.
2016-12-16 13:53:31	◥	hansaplast (hansaplast@moz-eofc2e.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2016-12-16 13:54:30	misdreavus	i'm beginning to think that might not be possible - &T and &&T are different types, after all
2016-12-16 13:54:47	misdreavus	and if you start to include generics shenanigans, the lambda will need to take this into accout
2016-12-16 13:55:55	◣	macshaggy (macshaggy@moz-ck500m.o25d.8ban.0304.2602.IP) has quit (A TLS packet with unexpected length was received.)
2016-12-16 13:57:33	◣	hansaplast (hansaplast@moz-eofc2e.ve71.89v9.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 13:57:49	◣	bkn (bkn@moz-rdn.5rl.148.204.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 14:00:07	Zoomulator	I was hoping for a standard trait that kept references T& -> T& but upgraded T to &T
2016-12-16 14:00:28	◥	IslandUsurper1 (lyle@moz-n1n663.rnfo.mfth.0306.2602.IP) has joined #rust-beginners
2016-12-16 14:00:29	Zoomulator	But perhaps you can't really implement a trait for &T?
2016-12-16 14:00:37	◣	tyoc213 (tyoc213@moz-2ilelt.iusacell.net) has quit (Quit: Saliendo)
2016-12-16 14:00:50	misdreavus	you can
2016-12-16 14:01:04	Zoomulator	oh
2016-12-16 14:01:20	misdreavus	impl<'a, T> SomeTrait for &'a T
2016-12-16 14:01:35	misdreavus	you see this for IntoIterator impls on containers
2016-12-16 14:01:52	misdreavus	and for Deref, for example https://doc.rust-lang.org/std/ops/trait.Deref.html
2016-12-16 14:02:01	◣	lostInTheDataJungle (oli@moz-1ekq1m.pools.vodafone-ip.de) has left #rust-beginners ("")
2016-12-16 14:02:15	misdreavus	the problem comes in where it has a different lifetime signature between T and &T
2016-12-16 14:02:31	misdreavus	hmm
2016-12-16 14:02:36	misdreavus	one sec
2016-12-16 14:03:32	◥	FrenchToast (FrenchToast@moz-s44on6.co.comcast.net) has joined #rust-beginners
2016-12-16 14:03:33	⚡	IslandUsurper1 is now known as IslandUsurper
2016-12-16 14:04:12	◥	Cokemonkey11 (quassel@moz-39s05f.35h7.d9a6.0c7d.2a02.IP) has joined #rust-beginners
2016-12-16 14:05:30	misdreavus	aha, it needs ATC/HKT https://is.gd/HOPkxE
2016-12-16 14:05:42	misdreavus	specifically, you need to be able to "invent" a lifetime to convert T to &T
2016-12-16 14:05:53	misdreavus	in other words, this is not a thing in today's rust
2016-12-16 14:06:55	◣	jbradberry (jrb@moz-mrjdh9.rlghnc.sbcglobal.net) has quit (Ping timeout: 121 seconds)
2016-12-16 14:07:34	Zoomulator	aha, that's too bad, but understandable
2016-12-16 14:08:13	◣	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has quit (Connection closed)
2016-12-16 14:08:17	Zoomulator	Thanks for the look though, misdreavus :D
2016-12-16 14:08:33	misdreavus	there was a lot of buzz around ATCs a while back, this *might* become a thing in a few months, but at least for now it's not
2016-12-16 14:08:44	◣	IslandUsurper (lyle@moz-n1n663.rnfo.mfth.0306.2602.IP) has quit (Quit: Leaving.)
2016-12-16 14:08:52	misdreavus	i don't remember if it had an accepted rfc or just a lot of discussion while it was being drafted
2016-12-16 14:09:08	Zoomulator	Oh yeah, what's ATC/HKT?
2016-12-16 14:09:12	◥	IslandUsurper (lyle@moz-n1n663.rnfo.mfth.0306.2602.IP) has joined #rust-beginners
2016-12-16 14:09:23	misdreavus	Associated Type Constructors/Higher-Kinded Types
2016-12-16 14:09:30	Zoomulator	aah
2016-12-16 14:09:51	misdreavus	HKT is a fancy programming language concept about being able to reason about types without having to specify all their generics, like Vec instead of Vec<T>
2016-12-16 14:10:01	◣	handyman (handyman@moz-3kja42.subp.5lka.0645.2601.IP) has quit (A TLS packet with unexpected length was received.)
2016-12-16 14:10:19	misdreavus	ATC is a subset of that (i think?) applied to rust that some people got a reasonable proposal for
2016-12-16 14:11:17	misdreavus	one thing i remember reading was the ability to say `type Item<'a>` and effectively put a lifetime parameter on the associated type itself, rather than the trait as a whole
2016-12-16 14:11:39	◥	handyman (handyman@moz-27cses.subp.5lka.0645.2601.IP) has joined #rust-beginners
2016-12-16 14:11:46	◣	handyman (handyman@moz-27cses.subp.5lka.0645.2601.IP) has quit (A TLS packet with unexpected length was received.)
2016-12-16 14:11:48	◥	handyman (handyman@moz-lmhaus.ca.comcast.net) has joined #rust-beginners
2016-12-16 14:11:48	brson	steveklabnik: ping
2016-12-16 14:12:04	misdreavus	here, it would let us pull the lifetime from the impl (for &'a T) *or* the fn itself (for T) depending on what was being used
2016-12-16 14:12:13	misdreavus	brson: am i giving ATC a fair shake here?
2016-12-16 14:12:22	◥	ubsandroid (ubsan@moz-8h8adi.qnq0.64b6.fb90.2607.IP) has joined #rust-beginners
2016-12-16 14:12:43	Zoomulator	I think I might've unknowingly tried to do those things a few times by now
2016-12-16 14:13:00	◥	bronson (bronson@moz-eaa7ba.dynamic.sonic.net) has joined #rust-beginners
2016-12-16 14:13:05	◣	ubsandroid (ubsan@moz-8h8adi.qnq0.64b6.fb90.2607.IP) has quit (Connection closed)
2016-12-16 14:13:11	Zoomulator	Like giving the type Item a lifetime ^^
2016-12-16 14:13:29	◥	ubsandroid (ubsan@moz-8h8adi.qnq0.64b6.fb90.2607.IP) has joined #rust-beginners
2016-12-16 14:13:30	misdreavus	lol
2016-12-16 14:13:46	misdreavus	yeah, it's a thing that allows some cool stuff, but requires some advanced reasoning to make available
2016-12-16 14:13:53	Zoomulator	It's a bit of a head twist coming from C++ templates...
2016-12-16 14:15:02	misdreavus	oh yeah, rust generics operate way differently from c++ templates - the one thing i remember seeing a lot is that c++ people expect rust to infer the needed traits based on what the code is using, but rust doesn't do that
2016-12-16 14:15:14	◣	saimen (saimen@moz-i2kas4.natpool.mwn.de) has quit (Ping timeout: 121 seconds)
2016-12-16 14:15:31	misdreavus	rust wants you to specify what traits are needed as part of the declaration
2016-12-16 14:15:31	Zoomulator	Yeah, it seems everything is backwards :P
2016-12-16 14:15:36	misdreavus	yup, lol
2016-12-16 14:16:18	Zoomulator	But I do prefer being specific about the expectations, rather than hoping for the best
2016-12-16 14:17:07	Zoomulator	SFINAE griefs...
2016-12-16 14:17:13	◣	bronson (bronson@moz-eaa7ba.dynamic.sonic.net) has quit (Ping timeout: 121 seconds)
2016-12-16 14:19:34	Zoomulator	misdreavus: Thanks a lot for your help! I'll be off
2016-12-16 14:19:43	misdreavus	no problem! glad i could pin this down
2016-12-16 14:19:58	◣	Zoomulator (Mibbit@moz-e264dm.bredband.comhem.se) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-16 14:20:14	◣	woboats (woboats@moz-i3d.gf4.16.4.IP) has quit (Client exited)
2016-12-16 14:21:10	◣	dranov (dranov@moz-5jo24u.cable.virginm.net) has quit (Ping timeout: 121 seconds)
2016-12-16 14:22:28	◣	Ameo (casey@moz-5r2.1ic.228.152.IP) has quit (Connection closed)
2016-12-16 14:22:49	◥	woboats (woboats@moz-i3d.gf4.16.4.IP) has joined #rust-beginners
2016-12-16 14:23:02	◣	pounce (pounce@moz-vi09a1.or.frontiernet.net) has quit (Ping timeout: 121 seconds)
2016-12-16 14:25:57	◥	jimbotux (wfleming@moz-lnrodq.thirdnode.net) has joined #rust-beginners
2016-12-16 14:27:01	◥	awm (Mibbit@moz-t172m1.mn.comcast.net) has joined #rust-beginners
2016-12-16 14:28:47	◣	dm3 (dm3@moz-eaq.811.60.78.IP) has quit (Connection closed)
2016-12-16 14:29:09	◥	dm3 (dm3@moz-eaq.811.60.78.IP) has joined #rust-beginners
2016-12-16 14:29:45	◣	canaltinova (uid191250@moz-l3qbqh.tooting.irccloud.com) has quit (Quit: )
2016-12-16 14:31:22	◣	ubsandroid (ubsan@moz-8h8adi.qnq0.64b6.fb90.2607.IP) has quit (Quit: <3)
2016-12-16 14:31:37	◥	ubsandroid (ubsan@moz-f9kbgk.NATPOOL.NYU.EDU) has joined #rust-beginners
2016-12-16 14:32:01	◥	ubsandroid_ (ubsan@moz-8h8adi.qnq0.64b6.fb90.2607.IP) has joined #rust-beginners
2016-12-16 14:32:48	◣	ubsandroid_ (ubsan@moz-8h8adi.qnq0.64b6.fb90.2607.IP) has quit (Quit: <3)
2016-12-16 14:33:11	◣	dm3 (dm3@moz-eaq.811.60.78.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 14:33:20	◥	ubsandroid_ (ubsan@moz-f9kbgk.NATPOOL.NYU.EDU) has joined #rust-beginners
2016-12-16 14:33:27	◣	ubsandroid (ubsan@moz-f9kbgk.NATPOOL.NYU.EDU) has quit (Connection closed)
2016-12-16 14:37:19	◣	awm (Mibbit@moz-t172m1.mn.comcast.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-16 14:38:47	◥	niconii (nicole@moz-1nntpf.midco.net) has joined #rust-beginners
2016-12-16 14:38:47	⚡	Mode #rust-beginners [+o niconii] by ChanServ
2016-12-16 14:41:49	◥	ludat (ludat@moz-456.j2c.173.190.IP) has joined #rust-beginners
2016-12-16 14:47:24	◣	Jackneill (Jackneill@moz-lo0c1n.static.digikabel.hu) has quit (A TLS packet with unexpected length was received.)
2016-12-16 14:49:07	◥	wallacoloo____ (colin@moz-k3a2r5.tukw.qwest.net) has joined #rust-beginners
2016-12-16 14:52:14	◥	wallacoloo___ (colin@moz-bfrri6.tukw.qwest.net) has joined #rust-beginners
2016-12-16 14:53:25	◣	Cokemonkey11 (quassel@moz-39s05f.35h7.d9a6.0c7d.2a02.IP) has quit (Connection closed)
2016-12-16 14:54:02	◣	wallacoloo____ (colin@moz-k3a2r5.tukw.qwest.net) has quit (Ping timeout: 121 seconds)
2016-12-16 14:55:19	◣	cyphase (cyphase@moz-ijahrb.ca.comcast.net) has quit (Ping timeout: 121 seconds)
2016-12-16 14:55:56	◣	sebk (sebk@moz-05nbdi.pools.vodafone-ip.de) has quit (Quit: Konversation terminated!)
2016-12-16 14:57:21	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Connection closed)
2016-12-16 15:00:12	◣	jimbotux (wfleming@moz-lnrodq.thirdnode.net) has quit (Client exited)
2016-12-16 15:01:38	◣	junqed (junqed@moz-jcl.rfu.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2016-12-16 15:01:47	◣	taar (Mibbit@moz-8tn.5rd.190.107.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-16 15:02:15	FrenchToast	Ok, I couldn't figure out how to accomplish using chunks()  anyone have any tips on how to rework this to not use the cfor! macro?  https://play.rust-lang.org/?gist=70f446116c2ef2a8bf4ff04875ce2c7c&version=stable&backtrace=0
2016-12-16 15:02:24	◥	cyphase (cyphase@moz-ijahrb.ca.comcast.net) has joined #rust-beginners
2016-12-16 15:02:34	◣	rkruppe (rkruppe@moz-rstprs.dyn.telefonica.de) has quit (Quit: Bye)
2016-12-16 15:03:10	◥	jinshil (jinshil@moz-juf.s9m.183.210.IP) has joined #rust-beginners
2016-12-16 15:03:24	◣	durka42 (durka42@moz-fin7gd.wireless-pennnet.upenn.edu) has quit (Client exited)
2016-12-16 15:06:11	◣	FrenchToast (FrenchToast@moz-s44on6.co.comcast.net) has left #rust-beginners ("Leaving")
2016-12-16 15:06:19	◥	FrenchToast (FrenchToast@moz-s44on6.co.comcast.net) has joined #rust-beginners
2016-12-16 15:06:42	◥	aruiz (aruiz@moz-m9f.7m5.26.46.IP) has joined #rust-beginners
2016-12-16 15:08:20	◥	jimbotux (wfleming@moz-lnrodq.thirdnode.net) has joined #rust-beginners
2016-12-16 15:08:34	◣	jimbotux (wfleming@moz-lnrodq.thirdnode.net) has quit (Client exited)
2016-12-16 15:11:24	◣	oln (smuxi@moz-h6kap0.customer.cdi.no) has quit (Connection closed)
2016-12-16 15:12:35	◥	mib_uy3u0u (Mibbit@moz-p39f39.access.telenet.be) has joined #rust-beginners
2016-12-16 15:12:41	ehiggs	FrenchToast: https://play.rust-lang.org/?gist=f664449eac2075a2511dfd7b219f10db&version=nightly&backtrace=0
2016-12-16 15:13:00	FrenchToast	ehiggs: Taking a looksie
2016-12-16 15:13:00	ehiggs	using step_by(4).. seems like something that should be in stable. :-S
2016-12-16 15:13:45	FrenchToast	oh
2016-12-16 15:13:52	FrenchToast	wow, that was really easy
2016-12-16 15:14:27	ehiggs	https://github.com/rust-lang/rust/issues/27741
2016-12-16 15:14:37	FrenchToast	awww
2016-12-16 15:14:44	ehiggs	well, it's using nightly which sometimes isn't ideal
2016-12-16 15:15:31	ehiggs	you could also filter(|x| x%4 == 0); or you could go up to n64.len() / 4 and then *4 in the loop body
2016-12-16 15:15:44	ehiggs	step_by should be the 'real' solution though imo
2016-12-16 15:16:00	◣	mandeep (mandeep@moz-mgt.dfa.8.198.IP) has quit (Quit: Leaving)
2016-12-16 15:17:01	◣	voider1 (voider1@moz-ku2jgf.dynamic.ziggo.nl) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-12-16 15:17:43	wyvern	When writing a macro that takes an identifier used to name a function, really I'd like to define a family of functions with  the provided identifier as the function name prefix. Can I concatenate other strings (_foo, _bar, etc) onto a provided id?
2016-12-16 15:19:22	◣	sneaker (thomas@moz-blt.n21.144.213.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 15:19:28	FrenchToast	you fixed it for me anyway ehiggs, thanks you you I finally figured out how to use chunks()
2016-12-16 15:19:41	ehiggs	neat
2016-12-16 15:19:42	FrenchToast	https://play.rust-lang.org/?gist=0b96fa03db10782535db9276bcb8c264&version=nightly&backtrace=0
2016-12-16 15:19:49	◥	dark-knight (dark-knight@moz-rtc2g3.dynamic.surfer.at) has joined #rust-beginners
2016-12-16 15:20:26	misdreavus	dang, i was just about to post a chunks() version
2016-12-16 15:20:27	misdreavus	:P
2016-12-16 15:20:55	FrenchToast	lol, thanks misdreavus
2016-12-16 15:21:11	◣	Kilobyte (stephan@moz-2b5sqg.mjki.fker.e180.2a00.IP) has quit (Quit: WeeChat 1.6)
2016-12-16 15:21:12	misdreavus	wyvern: as far as i remember, concat_idents!() does not work, so the answer is no, unfortunately
2016-12-16 15:21:36	FrenchToast	step_by feels more natural to my c-like brain, but chunks does this pretty well too, though I'm not sure if there are performance implications
2016-12-16 15:21:46	FrenchToast	at this point though, I don't really care, doing this "for learning"
2016-12-16 15:22:22	wyvern	misdreavus: D: What I'd like to do is define a macro for invoking a bunch of related test scenarios for a given input. (There are a handful of inputs, all of which have the same applicable suite of boring tests.) Any other ideas for how to do this?
2016-12-16 15:22:28	FrenchToast	after I get working hex and b64 conversions, I'll look at how others did that and see how much more learning is necessary to call myself a rustacean
2016-12-16 15:22:54	wyvern	I could just call a function that then invokes the various test scenarios, but it'd be nice to have them be top level tests so they can run in parallel and individually succeed/fail
2016-12-16 15:23:03	◣	Guest27 (textual@moz-oto0jh.bb.dnainternet.fi) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-12-16 15:23:03	ehiggs	chunks looks good
2016-12-16 15:23:12	ehiggs	thats something ill have to remember
2016-12-16 15:23:21	◣	mib_uy3u0u (Mibbit@moz-p39f39.access.telenet.be) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-16 15:25:33	~steveklabnik	brson: pong
2016-12-16 15:26:19	misdreavus	wyvern: sorry, not too sure :/ i remember seeing discussion on how to do something like that, and the answer is usually "macro hygeine makes that weird" or at least "it's a known limitation"
2016-12-16 15:26:25	◣	Hoff (kvirc@moz-84jd08.dhcp.inet.fi) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2016-12-16 15:26:52	misdreavus	wyvern: if you're really dead-set on writing them automatically, you could try making a build script to generate the test functions and splice them in where they need to be with include!()
2016-12-16 15:27:43	misdreavus	that might play havoc with the test builds tho - do build scripts run on test builds too?
2016-12-16 15:27:48	Icefoz	FrenchToast: You can probably get rid of the transmute and use bitmasks instead.
2016-12-16 15:28:01	Icefoz	To extract the bytes you want.
2016-12-16 15:28:14	FrenchToast	Hmm
2016-12-16 15:29:14	FrenchToast	how would I get it from a usize to a u8?
2016-12-16 15:29:30	wyvern	FrenchToast: you could use ToPrimitive and check that the cast didn't overflow
2016-12-16 15:29:32	◣	Alek (alek@moz-h5408n.bb.online.no) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-12-16 15:29:33	ehiggs	wyvern if you know how to generate the inputs, maybe check out quickcheck
2016-12-16 15:29:40	misdreavus	shift it down to the lowest 8 bits and finish up with "as u8"
2016-12-16 15:29:55	FrenchToast	oh yeah, duh
2016-12-16 15:30:00	FrenchToast	thanks guys!
2016-12-16 15:30:02	Icefoz	FrenchToast: https://play.rust-lang.org/?gist=676565f8567bbd87e0c48a5ec814abe4&version=stable&backtrace=0
2016-12-16 15:30:09	wyvern	yeah after reading a bunch of rfc comments it looks like macro ident concat is nowhere near 
2016-12-16 15:30:26	Icefoz	I'm a little surprised that I appear to have gotten it right on the first try, but it seems to work.
2016-12-16 15:30:46	wyvern	ehiggs: can you elaborate on that a little?
2016-12-16 15:31:56	◣	karinqe_ (karinqe@moz-ptt.nvt.172.163.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 15:32:52	◥	bluecereal (bluecereal@moz-0bd.uqm.224.8.IP) has joined #rust-beginners
2016-12-16 15:35:28	bluecereal	hello!  could somebody explain if let Some(thing) = stuff statements?
2016-12-16 15:36:12	bluecereal	to me?
2016-12-16 15:36:18	wyvern	the `if` will only be successful if `stuff` was a Some, not a None.
2016-12-16 15:36:24	bluecereal	oh
2016-12-16 15:36:29	wyvern	it's another way of doing a `match` where you only care about one branch basically
2016-12-16 15:36:29	bluecereal	wow that's much simpler than i thought lol
2016-12-16 15:36:51	bluecereal	does this pattern have a name?
2016-12-16 15:37:00	wyvern	"if let"? not sure.
2016-12-16 15:37:05	seequ_	if let
2016-12-16 15:37:06	seequ_	:P
2016-12-16 15:37:12	FrenchToast	Icefoz: I tried to see if I could just do an "as u8" and that seemed to work - that going to work in any situation you think?  https://play.rust-lang.org/?gist=077f7dd04744f5304c62c51108d7357d&version=stable&backtrace=0
2016-12-16 15:37:13	misdreavus	you can also tag an else block onto it, so if your match would otherwise be "one real pattern, one _ pattern" then if-let is your thing
2016-12-16 15:37:48	seequ_	Note that it actually works with any pattern, capturing variables exactly like in a normal match.
2016-12-16 15:37:53	misdreavus	also yeah, i always call it "if let" or if-let if i want to ditch the quotes
2016-12-16 15:38:06	bluecereal	maybe it doesnt have a "real" name lol
2016-12-16 15:38:19	ehiggs	wyvern: https://github.com/BurntSushi/quickcheck
2016-12-16 15:38:46	◣	cpup (cpup@moz-jp2.jct.218.32.IP) has quit (Ping timeout: 121 seconds)
2016-12-16 15:38:49	◣	ehiggs (ehiggs@moz-s7dsfa.access.telenet.be) has quit (Quit: 00:38am here. zzzz)
2016-12-16 15:39:47	bluecereal	i still dont understand the logic of if-let
2016-12-16 15:40:13	misdreavus	it literally just expands to a match block with your pattern inside
2016-12-16 15:40:18	misdreavus	i'
2016-12-16 15:40:24	misdreavus	i'll draw up an example
2016-12-16 15:40:29	seequ_	bluecereal: if the match is successful  it enters the block
2016-12-16 15:42:17	misdreavus	https://is.gd/cfaYmz
2016-12-16 15:42:41	◥	mib_sn62my (Mibbit@moz-j504ud.dyn.optonline.net) has joined #rust-beginners
2016-12-16 15:42:59	bluecereal	ok cool
2016-12-16 15:43:07	◣	mib_sn62my (Mibbit@moz-j504ud.dyn.optonline.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-16 15:43:32	misdreavus	it's nice if you're unpacking an Option and just want to ignore the None for a moment
2016-12-16 15:43:43	misdreavus	it leads to one less indentation level over the equivalent match
2016-12-16 15:44:25	◣	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has quit (Ping timeout: 121 seconds)
2016-12-16 15:44:26	misdreavus	but it can be used for any pattern you could put in a match arm, too
2016-12-16 15:44:30	bluecereal	i think whats confusing me is the syntax... an if expression with a let statement in it 
2016-12-16 15:44:38	misdreavus	yeah, it's weird
2016-12-16 15:44:48	misdreavus	even weirder? there's "while let", too
2016-12-16 15:44:57	Sergio	bluecereal: Think of it together, "if let"
2016-12-16 15:44:58	Sergio	Not "if" "let"
2016-12-16 15:45:21	misdreavus	yeah, try to think of if-let as a unit, it's its own thing
2016-12-16 15:46:31	◣	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has quit (Ping timeout: 121 seconds)
2016-12-16 15:48:38	bluecereal	ok
2016-12-16 15:52:40	bluecereal	so if-let desugars to a match statement.  
2016-12-16 15:52:49	bluecereal	for convenience?
2016-12-16 15:53:49	@mbrubeck	Yes, it's purely for making the code easier to read/write. There's no functional difference.
2016-12-16 15:54:54	◥	aritz (aritz@moz-70ciej.clientes.euskaltel.es) has joined #rust-beginners
2016-12-16 15:57:02	bluecereal	alright, thanks guys.  
2016-12-16 15:58:05	bluecereal	this was hard to understand, as originally i believed an if-let was the logic of if and let interacting in a neat way
2016-12-16 15:58:31	insaneinside	`let` is a statement unfortunately, so it has no value
2016-12-16 15:58:59	bluecereal	instead of "this desugars to this because i said so!"
2016-12-16 16:00:27	◥	nateozem (nate@moz-6b4.j8i.107.209.IP) has joined #rust-beginners
2016-12-16 16:02:20	bluecereal	the Book explains if-let and while-let, but it doesn't say anything about WHY if-let desugars the way it does.
2016-12-16 16:02:43	◣	hackebeilchen (Peter@moz-1o2bvv.ip-addr.inexio.net) has quit (Connection closed)
2016-12-16 16:03:27	~steveklabnik	i guess i just assume sugar is always for convenience
2016-12-16 16:05:47	insaneinside	steveklabnik: also dentists ;P
2016-12-16 16:06:07	bluecereal	it is definitely implied!  but idk if everybody will pick up on that, especially noobs like me.  
2016-12-16 16:06:14	~steveklabnik	totally
2016-12-16 16:06:14	⚡	WindowsBunnyFluffyNaptime is now known as WindowsBunnyTruckSimulator
2016-12-16 16:06:21	~steveklabnik	i was reflecting, not saying you're wrong :)
2016-12-16 16:07:43	◥	montanonic (nicholas@moz-e3dvbk.dccu.6nti.3004.2603.IP) has joined #rust-beginners
2016-12-16 16:08:08	bluecereal	i didnt think you were!  
2016-12-16 16:08:56	~steveklabnik	:) <3
2016-12-16 16:08:57	bluecereal	"if let allows you to combine if and let together to reduce the overhead of certain kinds of pattern matches."  
2016-12-16 16:09:22	insaneinside	ewww, that _is_ all kinds of misleading
2016-12-16 16:09:45	~steveklabnik	ah yeah
2016-12-16 16:09:54	bluecereal	a sentence stating "this desugars to this as a convenience", after that might clarify a bit more
2016-12-18 17:34:05	⚡	irc: disconnected from server
2016-12-18 17:34:18	◥	boon (d8v3@moz-cf64oa.eqdp.1nof.0602.2601.IP) has joined #rust-beginners
2016-12-18 17:34:18	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2016-12-18 17:34:18	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2016-12-18 17:34:18	⚡	Channel #rust-beginners: 546 nicks (4 ops, 0 halfops, 0 voices, 542 normals)
2016-12-18 17:34:22	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2016-12-18 17:35:43	◣	sscott (Thunderbird@moz-lksml6.stvt.i7og.0c7d.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 17:36:25	◣	kerrang (Mibbit@moz-tgrup5.fios.verizon.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-18 17:37:00	◥	bkn (bkn@moz-dbkqi7.fios.verizon.net) has joined #rust-beginners
2016-12-18 17:41:01	◥	newbie (eibwen@moz-7517ta.dip0.t-ipconnect.de) has joined #rust-beginners
2016-12-18 17:43:55	◣	eibwen (eibwen@moz-9d4eo5.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2016-12-18 17:46:29	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Connection closed)
2016-12-18 17:48:54	◥	nicholasf (nicholasf@moz-nap.qhj.136.1.IP) has joined #rust-beginners
2016-12-18 17:52:16	◣	waffles (wafflespean@moz-n03.kju.23.1.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 17:56:20	◥	ubsandroid_ (ubsan@moz-2kfem3.a9ld.kjr0.fb90.2607.IP) has joined #rust-beginners
2016-12-18 17:56:52	◣	ubsandroid_ (ubsan@moz-2kfem3.a9ld.kjr0.fb90.2607.IP) has quit (Connection closed)
2016-12-18 17:57:00	◥	ubsandroid_ (ubsan@moz-uokv8f.subnet.rcn.com) has joined #rust-beginners
2016-12-18 17:57:35	◣	ubsandroid (ubsan@moz-uokv8f.subnet.rcn.com) has quit (Connection closed)
2016-12-18 17:58:26	◥	zxq9 (ceverett@moz-uh0mao.mesh.ad.jp) has joined #rust-beginners
2016-12-18 18:00:52	nicholasf	Hi. Im hacking together my first real Rust program. I'm building a parser that works with S3.
2016-12-18 18:01:10	nicholasf	when trying to do anything with Cargo really Im encountering this error:
2016-12-18 18:01:18	nicholasf	error: Package `rusoto_codegen v0.4.0` does not have these features: `with-syntex`
2016-12-18 18:01:29	nicholasf	so, it looks like there is a typo in rusoto, right?
2016-12-18 18:01:40	insaneinside	nicholasf: hmm?
2016-12-18 18:02:26	insaneinside	"syntex" is the name of a crate, so "with-syntex" is probably a feature that enables a dependency on that crate
2016-12-18 18:02:33	tl8atWork	Might use compiler macros
2016-12-18 18:02:40	tl8atWork	IE, needs Nightly
2016-12-18 18:02:58	XMPPwocky	syntex is a crate that emulates compiler plugins
2016-12-18 18:03:49	nicholasf	hrm, ok
2016-12-18 18:03:56	▷	nicholasf looks through the docs
2016-12-18 18:04:19	nicholasf	this is the lib: https://github.com/rusoto/rusoto
2016-12-18 18:04:25	◥	Dima (textual@moz-iim.4il.27.103.IP) has joined #rust-beginners
2016-12-18 18:04:29	insaneinside	nicholasf: rusoto_codegen does not appear to have a feature named "with-syntex", however: https://github.com/rusoto/rusoto/blob/master/codegen/Cargo.toml
2016-12-18 18:04:40	insaneinside	nicholasf: can you pastebin your Cargo.toml?
2016-12-18 18:04:52	nicholasf	insaneinside: I can use gist, sure
2016-12-18 18:05:09	nicholasf	https://gist.github.com/nicholasf/dcb80181968fc86fb1248452421e156a
2016-12-18 18:05:30	◣	ufobat (Martin@moz-r3dejj.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2016-12-18 18:06:22	◣	JuggleTux (tux@moz-9o5sh5.cust.swisscom.ch) has quit (Quit: WeeChat 1.0.1)
2016-12-18 18:06:51	nicholasf	this looks like the lib: https://github.com/serde-rs/syntex
2016-12-18 18:06:56	insaneinside	nicholasf: is there a reason you're using version 0.17?
2016-12-18 18:07:32	◣	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has quit (Ping timeout: 121 seconds)
2016-12-18 18:07:41	nicholasf	insaneinside: only that it's the version they mention here: https://github.com/rusoto/rusoto#installation
2016-12-18 18:07:50	insaneinside	docs.rs says it couldn't even build that version of rusoto https://docs.rs/crate/rusoto/0.17.0
2016-12-18 18:07:55	nicholasf	Ill switch to 0.20.0
2016-12-18 18:08:25	nicholasf	ok, that worked
2016-12-18 18:08:52	nicholasf	thanks 
2016-12-18 18:11:07	◣	b_jonas (x@moz-v5n37u.math.bme.hu) has quit (Ping timeout: 121 seconds)
2016-12-18 18:11:09	◥	b_jonas (x@moz-v5n37u.math.bme.hu) has joined #rust-beginners
2016-12-18 18:12:09	◥	bestofluck (textual@moz-i1j138.pe10.jh1n.e000.2605.IP) has joined #rust-beginners
2016-12-18 18:12:50	nicholasf	 yeh, Ill do a PR so they list a better version
2016-12-18 18:13:04	insaneinside	cool :)
2016-12-18 18:14:03	onmyo	when writing a doc string on a thing with an annotation, which comes first?
2016-12-18 18:14:15	◣	newbie (eibwen@moz-7517ta.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2016-12-18 18:14:25	simulacrum	I usually do doc string
2016-12-18 18:14:43	simulacrum	It's easier to read/edit/interpet code when the annotation is right above
2016-12-18 18:15:16	onmyo	makes sense; the annotation is 'part of' the function
2016-12-18 18:17:11	simulacrum	It's rather rare for anything except #[inline] to be on functions, but sure
2016-12-18 18:17:26	simulacrum	I was speaking more about structs/enums
2016-12-18 18:18:49	onmyo	i was thinking about test functions :)
2016-12-18 18:18:56	onmyo	but yeah it works either way
2016-12-18 18:19:28	◣	remexre (remexre@moz-7vpie7.rqf4.7v0m.0444.2601.IP) has left #rust-beginners ("Leaving")
2016-12-18 18:20:00	◣	nicholasf (nicholasf@moz-nap.qhj.136.1.IP) has quit (Connection closed)
2016-12-18 18:24:27	◣	iasoon (iasoon@moz-e7428r.coc6.obdm.a03f.2a02.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 18:25:20	◥	eberan (eber@moz-9be6qt.ca.comcast.net) has joined #rust-beginners
2016-12-18 18:26:12	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 18:26:40	◣	CryZe (CryZe@moz-j11a9n.dynamic.kabel-deutschland.de) has quit (Ping timeout: 121 seconds)
2016-12-18 18:27:38	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2016-12-18 18:34:14	◥	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has joined #rust-beginners
2016-12-18 18:36:39	◥	bronson (bronson@moz-suja1u.dynamic.fusionbroadband.com) has joined #rust-beginners
2016-12-18 18:39:09	◥	ghishadow________ (ghishadow@moz-oha.mvo.247.47.IP) has joined #rust-beginners
2016-12-18 18:39:17	◥	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has joined #rust-beginners
2016-12-18 18:40:55	◣	bronson (bronson@moz-suja1u.dynamic.fusionbroadband.com) has quit (Ping timeout: 121 seconds)
2016-12-18 18:41:49	◣	ghishadow_______ (ghishadow@moz-rt5.i2c.199.117.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 18:45:48	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 18:47:11	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2016-12-18 18:47:46	◣	moltendorf (moltendorf@moz-140pst.ca.comcast.net) has quit (Connection closed)
2016-12-18 18:47:58	◥	scrogson1 (scrogson@moz-hq694i.tftc.9t39.0306.2602.IP) has joined #rust-beginners
2016-12-18 18:48:09	◣	mmstick (mmstick@moz-q1hptf.fios.verizon.net) has quit (Connection closed)
2016-12-18 18:49:22	◥	jsgrant_ (jsgrant@moz-ukbqhp.mo.charter.com) has joined #rust-beginners
2016-12-18 18:49:28	◥	starblue (juergen@moz-aobiin.pools.vodafone-ip.de) has joined #rust-beginners
2016-12-18 18:51:07	◣	starblue1 (juergen@moz-kvjkpf.pools.vodafone-ip.de) has quit (Ping timeout: 121 seconds)
2016-12-18 18:52:04	◣	scrogson1 (scrogson@moz-hq694i.tftc.9t39.0306.2602.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 18:53:38	◥	zenon (Mibbit@moz-27n9dd.hstntx.sbcglobal.net) has joined #rust-beginners
2016-12-18 18:53:42	◣	zenon (Mibbit@moz-27n9dd.hstntx.sbcglobal.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-18 18:54:27	◣	theemathas (theemathas@moz-a2a6au.wa.comcast.net) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-12-18 18:57:12	◣	ot (ot@moz-gmtpic.cpe.webspeed.dk) has quit (Quit: ChatZilla 0.9.93 [Firefox 50.1.0/20161213212120])
2016-12-18 19:01:18	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 19:02:42	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2016-12-18 19:05:34	◣	bestofluck (textual@moz-i1j138.pe10.jh1n.e000.2605.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-18 19:05:55	◥	caconym (caconym@moz-klghvh.wa.comcast.net) has joined #rust-beginners
2016-12-18 19:09:59	◣	caconym (caconym@moz-klghvh.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2016-12-18 19:14:43	◥	kushal (kdas@moz-9j3.cdf.97.27.IP) has joined #rust-beginners
2016-12-18 19:19:55	◥	nicholasf (nicholasf@moz-nap.qhj.136.1.IP) has joined #rust-beginners
2016-12-18 19:20:52	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 19:22:15	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2016-12-18 19:22:58	nicholasf	getting an openssl related error when trying to build my program: https://gist.github.com/nicholasf/3aa8eed8f407aab6d9fa0fa93ec60dde
2016-12-18 19:23:07	nicholasf	Ive since installed openssl (this is a new machine)
2016-12-18 19:23:27	nicholasf	which is what https://github.com/servo/servo/#os-x suggests
2016-12-18 19:23:31	nicholasf	however, the error persists
2016-12-18 19:23:39	nicholasf	Do I have to reinstall Rust?
2016-12-18 19:24:06	◣	eberan (eber@moz-9be6qt.ca.comcast.net) has quit (Quit: Leaving.)
2016-12-18 19:28:56	◥	bestofluck (textual@moz-i1j138.pe10.jh1n.e000.2605.IP) has joined #rust-beginners
2016-12-18 19:29:08	◣	nicholasf (nicholasf@moz-nap.qhj.136.1.IP) has quit (Connection closed)
2016-12-18 19:29:44	◣	kimundi (kimundi@moz-r95386.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2016-12-18 19:30:45	◣	def (def@moz-n5pms2.niksula.hut.fi) has quit (Ping timeout: 121 seconds)
2016-12-18 19:30:48	◥	def (def@moz-n5pms2.niksula.hut.fi) has joined #rust-beginners
2016-12-18 19:31:11	◥	kimundi (kimundi@moz-v4nr7g.dip0.t-ipconnect.de) has joined #rust-beginners
2016-12-18 19:34:57	◥	martinium (martinium@moz-c06.kt4.181.107.IP) has joined #rust-beginners
2016-12-18 19:38:17	◥	ghishadow_______ (ghishadow@moz-rt5.i2c.199.117.IP) has joined #rust-beginners
2016-12-18 19:39:36	◣	ghishadow________ (ghishadow@moz-oha.mvo.247.47.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 19:41:45	◥	ghishadow________ (ghishadow@moz-e1k.f76.207.117.IP) has joined #rust-beginners
2016-12-18 19:42:43	◥	nicholasf (nicholasf@moz-6nedbk.internode.on.net) has joined #rust-beginners
2016-12-18 19:42:44	◣	ghishadow_______ (ghishadow@moz-rt5.i2c.199.117.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 19:48:50	nicholasf	ok, I had to export some env vars to point out where openssl lived, worked out
2016-12-18 19:49:31	◥	ghishadow_________ (ghishadow@moz-5rf.mjt.247.47.IP) has joined #rust-beginners
2016-12-18 19:50:13	◣	ghishadow________ (ghishadow@moz-e1k.f76.207.117.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 19:53:47	bbigras	is there a recommended license for crates?
2016-12-18 19:54:31	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 19:54:59	◣	ghishadow_________ (ghishadow@moz-5rf.mjt.247.47.IP) has quit (Connection closed)
2016-12-18 19:55:09	◥	ghishadow_________ (ghishadow@moz-oha.mvo.247.47.IP) has joined #rust-beginners
2016-12-18 19:55:47	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2016-12-18 19:55:53	◣	russ_za (smuxi@moz-01aauh.voxdsl.co.za) has quit (Ping timeout: 121 seconds)
2016-12-18 19:56:27	◥	russ_za (smuxi@moz-2uiee8.voxdsl.co.za) has joined #rust-beginners
2016-12-18 19:58:49	◥	yeahnoob (kvirc@moz-vah.a5n.9.111.IP) has joined #rust-beginners
2016-12-18 20:01:05	◣	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2016-12-18 20:01:38	◣	ghishadow_________ (ghishadow@moz-oha.mvo.247.47.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 20:01:49	◥	ghishadow_________ (ghishadow@moz-e1k.f76.207.117.IP) has joined #rust-beginners
2016-12-18 20:02:26	◣	russ_za (smuxi@moz-2uiee8.voxdsl.co.za) has quit (Ping timeout: 121 seconds)
2016-12-18 20:03:32	Icefoz	bbigras: MIT seems to be common.
2016-12-18 20:04:34	◥	russ_za (smuxi@moz-01aauh.voxdsl.co.za) has joined #rust-beginners
2016-12-18 20:09:55	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 20:10:02	bbigras	Icefoz: thanks
2016-12-18 20:11:19	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2016-12-18 20:15:48	◥	agmcleod (textual@moz-cutlp5.cpe.teksavvy.com) has joined #rust-beginners
2016-12-18 20:16:07	agmcleod	Working on day11 still for advent of code. Starting to flatten out my code instead of using recursion (goes too deep)
2016-12-18 20:16:21	◣	bkn (bkn@moz-dbkqi7.fios.verizon.net) has quit (Client exited)
2016-12-18 20:16:41	agmcleod	So what im looking to do is build a working vector of sorts that is inside a loop {} block. That then gets iterated via for loop.
2016-12-18 20:17:01	agmcleod	So once the for loop finishes, i update my working vector from a temp vector, so it has more data to go through
2016-12-18 20:17:23	agmcleod	Issue here is, i want to push mutable references to that working vector, so it the inner loop code modifies the correct data.
2016-12-18 20:17:50	agmcleod	Problem is those are to structs created inside the for loop, so they don't live long enough. Do i need to use Box or Arc to achieve that kind of allocation?
2016-12-18 20:18:36	XMPPwocky	mind showing some source?
2016-12-18 20:18:39	agmcleod	https://github.com/agmcleod/adventofcode-2016/blob/master/11/src/main.rs#L59
2016-12-18 20:18:41	agmcleod	not at all
2016-12-18 20:18:45	XMPPwocky	cool
2016-12-18 20:18:55	agmcleod	Can see how im using working_set, next_set and connected_nodes
2016-12-18 20:19:17	XMPPwocky	why &mut and not just the nodes themselves?
2016-12-18 20:19:52	agmcleod	Node works like a tree structure
2016-12-18 20:20:18	agmcleod	so if i want the node itself to hold its children, i need to either make a reference to them, or make a copy to push them into the vector
2016-12-18 20:20:31	agmcleod	so when the vector goes through, its copies would get updated, not the ones on the tree
2016-12-18 20:20:44	◥	scrogson1 (scrogson@moz-hq694i.tftc.9t39.0306.2602.IP) has joined #rust-beginners
2016-12-18 20:21:03	◥	daschl (daschl@moz-kvc.ipu.178.62.IP) has joined #rust-beginners
2016-12-18 20:21:09	XMPPwocky	hmm
2016-12-18 20:21:31	agmcleod	hence why i initially went recursion, as i can return the object that gets mutated
2016-12-18 20:21:43	◥	jedahan (jedahan@moz-b93ovs.res.rr.com) has joined #rust-beginners
2016-12-18 20:24:50	◣	scrogson1 (scrogson@moz-hq694i.tftc.9t39.0306.2602.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 20:26:03	◣	ghishadow_________ (ghishadow@moz-e1k.f76.207.117.IP) has quit (Client exited)
2016-12-18 20:27:59	◣	jedahan (jedahan@moz-b93ovs.res.rr.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-12-18 20:29:57	◣	martinium (martinium@moz-c06.kt4.181.107.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 20:30:32	◣	bestofluck (textual@moz-i1j138.pe10.jh1n.e000.2605.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-18 20:35:31	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 20:36:51	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2016-12-18 20:37:27	◥	bronson (bronson@moz-suja1u.dynamic.fusionbroadband.com) has joined #rust-beginners
2016-12-18 20:39:20	◣	agmcleod (textual@moz-cutlp5.cpe.teksavvy.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-12-18 20:41:46	◣	bronson (bronson@moz-suja1u.dynamic.fusionbroadband.com) has quit (Ping timeout: 121 seconds)
2016-12-18 20:43:08	tl8atWork	I have a design type question
2016-12-18 20:43:09	tl8atWork	https://gist.github.com/tl8roy/0c0a1211ed8b9d132f69bd3aaceab1d9
2016-12-18 20:43:28	◥	ubsandroid (ubsan@moz-djmlsp.subnet.rcn.com) has joined #rust-beginners
2016-12-18 20:43:36	tl8atWork	The goal is to set up the thread and pass down channels for comms
2016-12-18 20:43:49	tl8atWork	If the channel dies, then restart the thread
2016-12-18 20:44:07	tl8atWork	The error I get is:  cannot assign to `self.graphics` because it is borrowed
2016-12-18 20:44:35	tl8atWork	Now that is fine, but I don't know the best way to get around that
2016-12-18 20:45:57	◣	ubsandroid_ (ubsan@moz-uokv8f.subnet.rcn.com) has quit (Ping timeout: 121 seconds)
2016-12-18 20:49:29	◥	waffles (wafflespean@moz-kv4.jmi.165.122.IP) has joined #rust-beginners
2016-12-18 20:49:46	◣	yeahnoob (kvirc@moz-vah.a5n.9.111.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 20:50:01	◥	yeahnoob (kvirc@moz-vah.a5n.9.111.IP) has joined #rust-beginners
2016-12-18 20:50:59	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 20:51:38	◥	scrogson1 (scrogson@moz-hq694i.tftc.9t39.0306.2602.IP) has joined #rust-beginners
2016-12-18 20:52:23	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2016-12-18 20:53:04	◥	bestofluck (textual@moz-i1j138.pe10.jh1n.e000.2605.IP) has joined #rust-beginners
2016-12-18 20:53:24	◥	agmcleod (textual@moz-cutlp5.cpe.teksavvy.com) has joined #rust-beginners
2016-12-18 20:58:45	◣	casey_ (casey@moz-v0ns05.tpgi.com.au) has quit (Connection closed)
2016-12-18 20:59:08	◣	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 20:59:44	◣	daschl (daschl@moz-kvc.ipu.178.62.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-18 21:00:44	◥	jedahan (jedahan@moz-b93ovs.res.rr.com) has joined #rust-beginners
2016-12-18 21:01:08	◣	bestofluck (textual@moz-i1j138.pe10.jh1n.e000.2605.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-18 21:01:10	◥	mada (mariano@moz-8r3.lft.178.190.IP) has joined #rust-beginners
2016-12-18 21:01:13	Icefoz	tl8atWork: Return a value from the match block, then assign it outside the match block.
2016-12-18 21:02:05	◥	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has joined #rust-beginners
2016-12-18 21:03:20	◣	jedahan (jedahan@moz-b93ovs.res.rr.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-12-18 21:04:01	◥	fritschy (mfritzsc@moz-hb97a0.de) has joined #rust-beginners
2016-12-18 21:04:46	◣	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has quit (Connection closed)
2016-12-18 21:05:19	tl8atWork	Top level or inner match block?
2016-12-18 21:05:26	◣	urcra (urcra@moz-9lk9gn.cpe.webspeed.dk) has quit (Connection closed)
2016-12-18 21:06:05	Icefoz	Yes?
2016-12-18 21:06:50	tl8atWork	Which match block should I return from ideally?
2016-12-18 21:07:32	Icefoz	All of them.
2016-12-18 21:07:37	tl8atWork	ok
2016-12-18 21:07:39	Icefoz	Whenever you have 'self.graphics = whatever' just have 'whatever'.
2016-12-18 21:08:00	Icefoz	Then do `let tmp = match self.graphics ...; self.graphics = tmp;`
2016-12-18 21:08:23	◥	bestofluck (textual@moz-i1j138.pe10.jh1n.e000.2605.IP) has joined #rust-beginners
2016-12-18 21:08:23	◥	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has joined #rust-beginners
2016-12-18 21:08:39	tl8atWork	ahh, I see now
2016-12-18 21:10:49	◣	cscorley (cscorley@moz-fp90ai.WISOLT3.epbfi.com) has quit (Connection closed)
2016-12-18 21:11:12	◣	mada (mariano@moz-8r3.lft.178.190.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 21:12:33	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 21:12:44	◥	TechCrunch (Tech@moz-ant.ip3.100.101.IP) has joined #rust-beginners
2016-12-18 21:13:54	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2016-12-18 21:14:35	tl8atWork	Small problem, on the Ok(_) arm, I need to return its self (EG Some(graphics_threads))
2016-12-18 21:15:40	◣	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 21:19:09	Icefoz	I'm sleepy so all I can suggst is "think hard about your problem until that's no longer the case".  :/
2016-12-18 21:19:10	◣	bestofluck (textual@moz-i1j138.pe10.jh1n.e000.2605.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-12-18 21:19:39	Icefoz	Or, any reason it can't return `self.graphics` in that case?  It might yell at you 'cause it's already borrowed, but it might not...
2016-12-18 21:20:10	◣	TechCrunch (Tech@moz-ant.ip3.100.101.IP) has quit (Ping timeout: 121 seconds)
2016-12-18 21:20:11	tl8atWork	Just thought of that and tried it, unfortunatly it doesn't like that
2016-12-18 21:20:16	◣	kushal (kdas@moz-9j3.cdf.97.27.IP) has quit (Connection closed)
2016-12-18 21:20:18	Icefoz	awww.
2016-12-18 21:20:45	◣	waffles (wafflespean@moz-kv4.jmi.165.122.IP) has quit (Connection closed)
2016-12-18 21:21:24	Icefoz	I wish borrowck knew more about dependencies between variables; it'd make life a lot easier.
2016-12-18 21:21:44	◥	waffles (wafflespean@moz-kv4.jmi.165.122.IP) has joined #rust-beginners
2016-12-18 21:22:24	tl8atWork	I found a way to get around it, it isn't elegant, but it does appear to work
2016-12-18 21:22:29	Icefoz	Oh?  Do tell!
2016-12-18 21:23:13	tl8atWork	Added a boolean that only does the last step (The assignment back) if something changed
2016-12-18 21:23:38	Icefoz	can I see the code?  That sounds weird.
2016-12-18 21:24:11	tl8atWork	https://gist.github.com/tl8roy/0c0a1211ed8b9d132f69bd3aaceab1d9
2016-12-18 21:24:51	Icefoz	Can't just do `self.graphics = match ...` ?
2016-12-18 21:25:23	Icefoz	oh hey
2016-12-18 21:25:26	Icefoz	just return the boolean
2016-12-18 21:25:27	Icefoz	check on that
2016-12-18 21:25:40	Icefoz	and do the contents of the first None branch if necessary.
2016-12-18 21:25:42	Icefoz	bingo.
2016-12-18 21:26:26	Icefoz	It ends up as `if need_to_reset() { self.graphics = Some(GraphicsThread{ ... }) }`
2016-12-18 21:28:26	Icefoz	dammit I say stupid things like "think hard about your problem until it works" and then manage to do exactly that.
2016-12-18 21:28:27	tl8atWork	Thanks, that builds
2016-12-18 21:28:31	Icefoz	If only I could do this for my own problems.
2016-12-18 21:28:38	Icefoz	Sweet!
2016-12-18 21:28:55	Icefoz	Which part, returning the bool or just assigning directly to self.graphics?
2016-12-18 21:28:57	tl8atWork	The best bit, if it builds, it probably runs
2016-12-18 21:29:04	Icefoz	I knowwwwwww
2016-12-18 21:29:09	tl8atWork	Both
2016-12-18 21:29:18	Icefoz	people who don't like strong type systems are suckers.
2016-12-18 21:29:19	Icefoz	Nice.
2016-12-18 21:29:56	tl8atWork	I have been doing PHP for the last few years, I like Rust :P
2016-12-18 21:30:03	Icefoz	I'm sorry.
2016-12-18 21:31:40	Arnavion	I wish borowck terminated borrows for early returns
2016-12-18 21:33:08	Icefoz	Arnavion: I'm sure it could if the early return always happens, but only 'cause everything after it is dead code.
2016-12-18 21:33:34	Arnavion	Not really, it just means the region for a borrow is more complicated than just a single scope
2016-12-18 21:34:04	◣	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has quit (Ping timeout: 121 seconds)
2016-12-18 21:34:33	Arnavion	ie   match (&x) { ... => return x, _ => () }   should be allowed instead of making me manually shunt to the outer scope using Option or w/e and return later
2016-12-18 21:35:26	◥	offs3tzer0 (offs3tzer0@moz-9ak1ln.customer.lyse.net) has joined #rust-beginners
2017-01-03 12:57:42	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-03 12:57:42	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-03 12:57:42	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-03 12:57:42	⚡	Channel #rust-beginners: 627 nicks (3 ops, 0 halfops, 0 voices, 624 normals)
2017-01-03 12:57:44	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-03 12:57:53	vorner	Is there a way to export a macro so it is inside a submodule of the crate? Placing it in the module doesn't help, it appears to live on the crate level.
2017-01-03 12:58:09	◣	hackebeilchen (Peter@moz-ovp14u.ip-addr.inexio.net) has quit (Connection closed)
2017-01-03 12:58:32	stephaneyfx	vorner, i think macros are not namespaced
2017-01-03 12:59:08	ubsan	well, not everything (case in point) ^
2017-01-03 12:59:37	caleb	macros' aren't namespaced?
2017-01-03 12:59:45	caleb	c has that same problem
2017-01-03 12:59:58	stephaneyfx	vorner, caleb, see the second example there: https://doc.rust-lang.org/book/macros.html#scoping-and-macro-importexport
2017-01-03 13:00:13	kebolio	macros aren't namespaced which is why you need the #[macro_use] label
2017-01-03 13:00:13	caleb	but in c it's worse, especially once you pull in beasts like windows.h
2017-01-03 13:00:34	stephaneyfx	#undef max #undef min ...
2017-01-03 13:00:39	ubsan	caleb: quite
2017-01-03 13:00:40	◥	Akien_ (akien@moz-gd94u9.dyn.telefonica.de) has joined #rust-beginners
2017-01-03 13:00:49	ubsan	caleb: again, hoping for modules
2017-01-03 13:00:51	~steveklabnik	and iirc macros by example 2.0 will have namespacing?
2017-01-03 13:00:56	ubsan	steveklabnik: yeah
2017-01-03 13:01:02	◥	bbsome (Mibbit@moz-l9u.btc.157.37.IP) has joined #rust-beginners
2017-01-03 13:01:05	caleb	yeah, there are probably a dozen macros you can define to prevent windows.h from clobbering everything
2017-01-03 13:01:25	caleb	but it is still a mess sometimes
2017-01-03 13:03:05	◥	caulagi (caulagi@moz-cgibnc.bredband.comhem.se) has joined #rust-beginners
2017-01-03 13:03:36	◥	Callaghan (Callaghan@moz-ar4je2.highway.telekom.at) has joined #rust-beginners
2017-01-03 13:05:14	caleb	Q: other than doing it my self is there a way to get format! to pad hex printed integers with 0's?, ie: 6 would be 0x06
2017-01-03 13:05:50	ubsan	caleb: format!("0x{02:x}", foo)
2017-01-03 13:05:50	ubsan	iirc
2017-01-03 13:06:02	ubsan	playbot: format!("0x{02:x}", 6)
2017-01-03 13:06:03	◥	martianwars (uid124042@moz-1flne0.brockwell.irccloud.com) has joined #rust-beginners
2017-01-03 13:06:04	⚡	Notice(playbot): error: invalid reference to argument `2` (there is 1 argument)
2017-01-03 13:06:04	⚡	Notice(playbot):   --> <anon>:10:17
2017-01-03 13:06:04	⚡	Notice(playbot):    |
2017-01-03 13:06:04	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2iMGNQT)
2017-01-03 13:06:05	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 13:06:08	ubsan	dangit
2017-01-03 13:06:14	◣	himi (sjjf@moz-r3ta53.internode.on.net) has quit (Ping timeout: 121 seconds)
2017-01-03 13:06:49	ubsan	playbot: format!("0x{:02x}", 6)
2017-01-03 13:06:53	⚡	Notice(playbot): "0x06"
2017-01-03 13:06:56	ubsan	caleb: ^
2017-01-03 13:07:12	⚡	Binero_ is now known as Binero
2017-01-03 13:08:03	caleb	does it need to be {:02x}? or can it just be {:2x}?
2017-01-03 13:08:32	ubsan	caleb: :2x means "pad with spaces"
2017-01-03 13:08:33	ubsan	iirc
2017-01-03 13:08:36	muskox	playbot: format!("0x{:2x}", 6)
2017-01-03 13:08:42	⚡	Notice(playbot): "0x 6"
2017-01-03 13:09:11	caleb	ahh
2017-01-03 13:09:59	caleb	and i presume there is no way to sneak the '#' in there? rust doesn't seem to let me
2017-01-03 13:10:35	◥	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-03 13:10:38	ubsan	the #?
2017-01-03 13:11:13	caleb	format!("{:#x}", 5) => "0x5"
2017-01-03 13:11:49	ubsan	what's the hash do?
2017-01-03 13:11:58	caleb	adds the 0x
2017-01-03 13:11:58	◣	Hoff (kvirc@moz-84jd08.dhcp.inet.fi) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2017-01-03 13:12:00	ubsan	oh
2017-01-03 13:12:03	ubsan	what's the point?
2017-01-03 13:12:08	ubsan	you just put the 0x in front
2017-01-03 13:12:12	caleb	looks cleaner?
2017-01-03 13:12:19	ubsan	playbot: format!("{:#02x}", 5)
2017-01-03 13:12:19	⚡	Notice(playbot): "0x5"
2017-01-03 13:12:22	caleb	idk, the stdlib people aded it
2017-01-03 13:12:25	ubsan	guess not
2017-01-03 13:12:29	misdreavus	makes it so that you don't have to put in the 0x yourself
2017-01-03 13:12:36	ubsan	playbot: format!("{:#04x}", 5)
2017-01-03 13:12:36	⚡	Notice(playbot): "0x05"
2017-01-03 13:12:40	◣	pachuco (Mibbit@moz-1bb44v.dsl.teksavvy.com) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 13:12:41	kimundi	# is the "alternative" printing mode
2017-01-03 13:12:44	ubsan	it includes the 0x in the number
2017-01-03 13:12:59	misdreavus	# is also used in Debug to pretty-print the output
2017-01-03 13:13:01	caleb	huh
2017-01-03 13:13:17	caleb	i must have made a typo
2017-01-03 13:13:33	caleb	tis the life of a lazy typist
2017-01-03 13:14:13	◥	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has joined #rust-beginners
2017-01-03 13:15:37	vorner	If I re-export a symbol through `pub use someothercrate::symbol`, does someone using my crate need to use `extern someothercrate` too? Because I seem to get that error here :-|.
2017-01-03 13:18:07	vorner	Hmm, strange, the error went away with next compilation O:-)
2017-01-03 13:18:20	◣	leviat (Mibbit@moz-uaikq2.dynamic.kabel-deutschland.de) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 13:18:36	misdreavus	i was thinking you wouldn't need to, that's the recommnded way to include another crate's types into your own
2017-01-03 13:19:13	◣	vandenoever (oever@moz-8onu2e.adsl-surfen.hetnet.nl) has quit (Quit: ䷴៚)
2017-01-03 13:19:16	◥	oever (oever@moz-8onu2e.adsl-surfen.hetnet.nl) has joined #rust-beginners
2017-01-03 13:19:31	vorner	Yes, I might have forgotten to save the file or something. It works now.
2017-01-03 13:20:19	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-03 13:20:28	◣	caulagi (caulagi@moz-cgibnc.bredband.comhem.se) has quit (Quit: leaving)
2017-01-03 13:22:07	kebolio	ok
2017-01-03 13:22:14	kebolio	fontconfig-sys crate doesn't work
2017-01-03 13:22:31	Redrield	Alright, new question. How can I implement futures::IntoFuture for an arbitrary type
2017-01-03 13:22:33	Redrield	In this instance, u8
2017-01-03 13:22:35	◥	manuel_ (manuel@moz-44m.14s.6.209.IP) has joined #rust-beginners
2017-01-03 13:22:47	kebolio	i imported servo-fontconfig and it's acting really strangely
2017-01-03 13:22:52	kebolio	extern crate fontconfig; works
2017-01-03 13:22:53	misdreavus	Redrield: you'll need to make a newtype wrapper
2017-01-03 13:22:59	kebolio	use fontconfig::*; does not
2017-01-03 13:23:16	Redrield	Is there an example of how to do that somewhere misdreavus?
2017-01-03 13:23:46	misdreavus	struct FutureByte(u8); impl IntoFuture for FutureByte { ... }
2017-01-03 13:24:03	◥	shouya (shouya@moz-ptr.a30.245.114.IP) has joined #rust-beginners
2017-01-03 13:24:03	caleb	so vec! can't fill a vector with a variable size?
2017-01-03 13:24:15	misdreavus	caleb: what do you mean?
2017-01-03 13:24:30	caleb	let x = ...; let v = vec![42, x]
2017-01-03 13:24:33	misdreavus	kebolio: are you doing both the extern-crate and use lines? what error are you getting?
2017-01-03 13:24:45	misdreavus	caleb: vec![42; x] // note the semicolon
2017-01-03 13:24:52	caleb	the , is supposed to be a semicolon, but yeah
2017-01-03 13:25:01	~steveklabnik	iirc it must be a constant
2017-01-03 13:25:15	~steveklabnik	playbot: let x = 5; vec![4, x];
2017-01-03 13:25:15	misdreavus	ah, forgot that one
2017-01-03 13:25:18	⚡	Notice(playbot): ()
2017-01-03 13:25:19	kebolio	misdreavus: servo-fontconfig = "*" in Cargo.toml
2017-01-03 13:25:21	~steveklabnik	huh
2017-01-03 13:25:25	⚡	oever is now known as vandenoever
2017-01-03 13:25:25	◥	wallacoloo____ (colin@moz-tvseqg.tukw.qwest.net) has joined #rust-beginners
2017-01-03 13:25:27	~steveklabnik	playbot: let x = 5; vec![4, x]
2017-01-03 13:25:28	kebolio	extern crate fontconfig; in drw.rs
2017-01-03 13:25:29	◥	emilk (emilk@moz-segdev.cust.bredbandsbolaget.se) has joined #rust-beginners
2017-01-03 13:25:29	⚡	Notice(playbot): [4, 5]
2017-01-03 13:25:32	~steveklabnik	lol
2017-01-03 13:25:38	~steveklabnik	playbot: let x = 5; vec![4; x]
2017-01-03 13:25:41	⚡	Notice(playbot): [4, 4, 4, 4, 4]
2017-01-03 13:25:44	kebolio	it doesn't let me use fontconfig::FcNameParse
2017-01-03 13:25:45	~steveklabnik	ther ewe go
2017-01-03 13:25:47	ubsan	steveklabnik: it's because it's a macro
2017-01-03 13:25:49	~steveklabnik	apparently it does not
2017-01-03 13:26:02	ubsan	array literals must be a constant
2017-01-03 13:26:04	~steveklabnik	ubsan: yeah for some reason i thought it required more than just a binding
2017-01-03 13:26:07	~steveklabnik	ahhhhh right
2017-01-03 13:26:47	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-03 13:26:50	ubsan	vec![x; y] is expanded to let mut v = Vec::with_capacity(y); for _ in 0..y { v.push(x.clone()); } v
2017-01-03 13:26:54	ubsan	or something like it
2017-01-03 13:27:24	~steveklabnik	right
2017-01-03 13:27:45	kimundi	It used to be limited to a constant though
2017-01-03 13:27:50	◣	muskox (muskox@moz-8mbs17.res.rr.com) has left #rust-beginners ("WeeChat 1.6")
2017-01-03 13:27:54	ubsan	really/
2017-01-03 13:27:56	fuine	does anyone know if mem::size_of::<T> is compile-time resolved for primitive types?
2017-01-03 13:27:58	ubsan	*?
2017-01-03 13:28:06	kimundi	since at one point it did basically do box [T; N] and construct a vector around that
2017-01-03 13:28:08	ubsan	fuine: it's resolved at compile time for all types
2017-01-03 13:28:12	ubsan	kimundi: oh right
2017-01-03 13:28:15	◥	iiddnn__ (iacopodeeno@moz-fcea0a.retail.telecomitalia.it) has joined #rust-beginners
2017-01-03 13:28:21	fuine	ubsan: thanks
2017-01-03 13:28:31	◥	makoLume (mako@moz-rmueac.flip.co.nz) has joined #rust-beginners
2017-01-03 13:29:04	kimundi	fuine: But it has the semantic of a runtime function call for all types (though the optimizer will inline it as a constant)
2017-01-03 13:29:14	◣	rkruppe (chatzilla@moz-c6skn4.unity-media.net) has quit (Quit: ChatZilla 0.9.93 [Firefox 50.1.0/20161213225203])
2017-01-03 13:29:34	◣	emilk (emilk@moz-segdev.cust.bredbandsbolaget.se) has quit (Ping timeout: 121 seconds)
2017-01-03 13:30:32	fuine	kimundi: that's exactly what i want
2017-01-03 13:31:21	karinqe	is there some way to select between channels and futures? i.e. I'm currently using chan_select! to select between the signal thread and a thread that basically just waits for stdin
2017-01-03 13:31:29	karinqe	among other things
2017-01-03 13:31:51	karinqe	can I transform that thead that just waits for stdin into a future and keep the current event loop?
2017-01-03 13:31:51	◣	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has quit (Client exited)
2017-01-03 13:32:09	karinqe	so that I don't have to spawn up a thread just to block on read_line()
2017-01-03 13:32:38	◣	bushidoboy (dbishop@moz-ok6.k7o.229.192.IP) has quit (Quit: WeeChat 1.6)
2017-01-03 13:32:47	◥	ParadoxSpiral (ParadoxSpir@moz-8tm2as.8m1p.nldu.0908.2a02.IP) has joined #rust-beginners
2017-01-03 13:33:19	◣	tyoc__ (tyoc@moz-64b0ua.iusacell.net) has quit (Quit: tyoc213.github.com)
2017-01-03 13:33:28	◥	tyoc213 (tyoc@moz-l5e.5lp.203.189.IP) has joined #rust-beginners
2017-01-03 13:33:29	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 13:34:02	tyoc213	some one has used rust with vs2015 cmmunity?
2017-01-03 13:34:07	◥	srwalker101 (srwalker101@moz-i5q.7te.223.2.IP) has joined #rust-beginners
2017-01-03 13:34:38	◥	NCommander (mcasa@moz-o8m8c2.fios.verizon.net) has joined #rust-beginners
2017-01-03 13:36:10	onmyo	sanity check: if I have a struct that has six fields, and I'm going to need to iterate over all of them, is a pattern like this reasonable? https://is.gd/9jnSEQ
2017-01-03 13:36:41	onmyo	obviously I'd give things better names and make the functions methods on S, but is my general approach sound?
2017-01-03 13:41:03	Redrield	misdreavus: Alright, I've implemented IntoFuture with the following https://gist.github.com/Redrield/d9a8473771d0d8a8fbaacef14c53ffdf
2017-01-03 13:41:12	Redrield	What do I do for the implementation of poll for FutureByte?
2017-01-03 13:41:41	Binero	onmyo: How is that going to help with iterating? :o
2017-01-03 13:42:49	misdreavus	Redrield: if it's meant to be immediately available, then you can just put something like `Ok(Async::Ready(self.0))` as the body
2017-01-03 13:43:05	◣	shouya (shouya@moz-ptr.a30.245.114.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 13:43:20	onmyo	Binero: well, I also define an iterator that yields Field::X, Field::Y, and then I can do `for field in Field::iter() { let r = s.field_ref(field); ... }`
2017-01-03 13:43:21	misdreavus	Redrield: note that there's a canned function for "future with an immediately available value" tho https://docs.rs/futures/0.1.7/futures/fn.finished.html
2017-01-03 13:43:29	◥	makoLime (mako@moz-o2p8h1.flip.co.nz) has joined #rust-beginners
2017-01-03 13:43:39	Redrield	misdreavus: poll is a required function, according to the docs
2017-01-03 13:44:01	◣	NeverDie (NeverDie@moz-crtjcd.fios.verizon.net) has quit (Quit: http://radiux.io/)
2017-01-03 13:44:03	misdreavus	right, finished() is what you can use instead of creating FutureByte in the first place
2017-01-03 13:44:22	Binero	onmyo: Why not have an iterator that yields all fields then? Why are you iterating over fields in the first place? 
2017-01-03 13:44:26	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-03 13:44:35	onmyo	because I also need to know *which* field it is
2017-01-03 13:44:39	◣	vorner (vorner@moz-fjnbbo.cz) has quit (Quit: Error from remote client)
2017-01-03 13:45:07	onmyo	because sometimes I need to do things like 'double field X, halve field Y' and it'd be nice if I could store that as a tuple (Field::X, Field::Y)
2017-01-03 13:45:19	Redrield	What does this error mean? https://hastebin.com/kiqamelebe.rb
2017-01-03 13:45:26	Binero	onmyo: But you're not treating it like a structure, you're treating it like a vector. 
2017-01-03 13:45:44	onmyo	I mean, right now instead of a struct I have a HashMap<Field, i32>
2017-01-03 13:45:50	◥	NeverDie (NeverDie@moz-crtjcd.fios.verizon.net) has joined #rust-beginners
2017-01-03 13:45:52	◣	makoLume (mako@moz-rmueac.flip.co.nz) has quit (Ping timeout: 121 seconds)
2017-01-03 13:45:53	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2017-01-03 13:45:57	misdreavus	Redrield: you can't impl traits you didn't create for types you didn't create
2017-01-03 13:46:00	onmyo	which *works*, but it means I have to make sure I fill it completely when I initialize it
2017-01-03 13:46:13	◥	bjz (bjz@moz-puppgq.tpgi.com.au) has joined #rust-beginners
2017-01-03 13:46:17	misdreavus	Redrield: when i said "instead of creating FutureByte", i meant in the spot when you'd put the u8 as a Future
2017-01-03 13:46:28	◣	Redrield (Emacs@moz-6ca4eo.botspam.redrield.com) has left #rust-beginners ("ERC (IRC client for Emacs 25.1.1)")
2017-01-03 13:46:34	◥	_jahmez (jamesmunns@moz-7kai5t.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-03 13:46:43	◣	Aankhen`` (notasquid@moz-h1l.k2t.69.182.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 13:46:43	onmyo	and for the most part I do want it to be a struct, I just need this bit of 'reflection'
2017-01-03 13:46:50	misdreavus	Redrield: this impl won't work as-is, just call finished() whenever you want to yield an immediately available value
2017-01-03 13:47:01	◥	Redrield (Emacs@moz-6ca4eo.botspam.redrield.com) has joined #rust-beginners
2017-01-03 13:47:10	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-03 13:47:12	misdreavus	Redrield: don't write the impl, just call the function in your other code
2017-01-03 13:47:32	◥	jinshil (jinshil@moz-juf.s9m.183.210.IP) has joined #rust-beginners
2017-01-03 13:48:22	_jahmez	Hey all, I'm trying to use errors as return types, however I end up needing to implement From<T> all over the place. Is there any way to make an automatic Err<T> to Err(()) I can define once in my project?
2017-01-03 13:48:38	_jahmez	Its mostly so I can use try/? when prototyping
2017-01-03 13:48:46	onmyo	_jahmez: look into error-chain, maybe
2017-01-03 13:49:12	onmyo	it defines an error type for you and you can tell it which 'foreign' error types (like io::Result) should be automatically converted
2017-01-03 13:50:07	~steveklabnik	!crate error-chain
2017-01-03 13:50:07	rustbot	error-chain (0.7.2) - Yet another error boilerplate library. -> https://crates.io/crates/error-chain <https://docs.rs/crate/error-chain>
2017-01-03 13:50:51	Binero	onmyo: Seems like a very odd thing to do. Regardless, why use an enum and not just directly have the iterator give you the fields? 
2017-01-03 13:51:32	◣	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has quit (Ping timeout: 121 seconds)
2017-01-03 13:52:24	◥	himi (sjjf@moz-r3ta53.internode.on.net) has joined #rust-beginners
2017-01-03 13:52:36	kebolio	none of the fontconfig bindings work properly
2017-01-03 13:53:09	◣	karinqe (karinqe@moz-ptt.nvt.172.163.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 13:53:09	onmyo	Binero: because I might need to, for example, make sure that all the values are less than a threshold, and it's useful to be able to say *which* one went over it
2017-01-03 13:53:22	misdreavus	kebolio: what system are you building on? do you have the fontconfig development headers?
2017-01-03 13:53:25	onmyo	if I just get an iterator over &i32s then I can't say that
2017-01-03 13:53:35	kebolio	misdreavus: arch linux, and yes
2017-01-03 13:53:42	kebolio	it's a crate problem
2017-01-03 13:53:42	misdreavus	what error are you getting?
2017-01-03 13:53:44	◥	ttdonovan (ttdonovan@moz-l04.bae.185.208.IP) has joined #rust-beginners
2017-01-03 13:53:56	kebolio	"extern crate fontconfig" doesn't complain
2017-01-03 13:54:16	Binero	onmyo: What are you actually doing that you need this weird type of relfection? :o
2017-01-03 13:54:17	kebolio	but then nothing works from the crate i.e unresolved fontconfig::FcNameParse
2017-01-03 13:54:24	onmyo	I'm implementing a game engine.
2017-01-03 13:54:38	kebolio	and "use fontconfig::*" doesn't work at all
2017-01-03 13:54:49	onmyo	basically what I *actually* want is a HashMap where there's a finite amount of possible keys, and I can statically know that the keys are always present
2017-01-03 13:55:11	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2017-01-03 13:55:16	Icefoz	onmyo: Array of enums.  :/
2017-01-03 13:55:20	Icefoz	Sort of.
2017-01-03 13:55:27	◥	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has joined #rust-beginners
2017-01-03 13:55:28	onmyo	yeah ew :V
2017-01-03 13:55:47	onmyo	actually wait instead of adding functions I can just implement Index and IndexMut
2017-01-03 13:55:57	◥	guzzlefry (gus@moz-9e5i2m.jax.bellsouth.net) has joined #rust-beginners
2017-01-03 13:56:30	◥	arcresu (arcresu@moz-m8qo83.tpgi.com.au) has joined #rust-beginners
2017-01-03 13:56:31	Icefoz	onmyo: That's basically the use case that made me write https://github.com/rust-lang/rfcs/issues/1798 
2017-01-03 13:56:33	◣	xpe (textual@moz-1ko1nj.ei8p.t9hi.0644.2601.IP) has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2017-01-03 13:56:35	Icefoz	I should implement it someday.
2017-01-03 13:56:41	◣	supercurio (Mibbit@moz-khkdde.cust.bredbandsbolaget.se) has quit (Quit: Bye!)
2017-01-03 13:56:45	misdreavus	it looks like the only thing `fontconfig` itself exports is the Font and Pattern types? https://docs.rs/crate/fontconfig/0.0.1/source/src/lib.rs
2017-01-03 13:57:11	kebolio	misdreavus: i'm using servo-fontconfig.
2017-01-03 13:57:20	◥	xpe (textual@moz-1ko1nj.ei8p.t9hi.0644.2601.IP) has joined #rust-beginners
2017-01-03 13:57:22	◥	makoLume (mako@moz-o2p8h1.flip.co.nz) has joined #rust-beginners
2017-01-03 13:57:26	misdreavus	ah, thanks
2017-01-03 13:57:32	kebolio	fontconfig crate predates the rfc0940, which means you can't use it at all
2017-01-03 13:58:32	misdreavus	doesn't matter, it'll translate as an underscore
2017-01-03 13:58:37	onmyo	actually I guess the hypothetical FixedEnumMap<K, V> is just the type of functions from K to V
2017-01-03 13:59:06	◣	kaljaman69 (kaljamies@moz-ramduc.60.citypartner.pl) has quit (Ping timeout: 121 seconds)
2017-01-03 13:59:13	misdreavus	kebolio: did you try `fontconfig::fontconfig::*`?
2017-01-03 13:59:26	misdreavus	er, fontconfig_sys::fontconfig::*
2017-01-03 13:59:36	kebolio	nope
2017-01-03 13:59:37	kebolio	ah
2017-01-03 13:59:47	kebolio	unresolved import
2017-01-03 13:59:47	misdreavus	or even servo_fontconfig
2017-01-03 13:59:48	Redrield	How can I fix this error? https://hastebin.com/izelifaher.coffeescript? code: https://hastebin.com/efaqajaror.rb
2017-01-03 13:59:54	◣	makoLime (mako@moz-o2p8h1.flip.co.nz) has quit (Ping timeout: 121 seconds)
2017-01-03 14:00:01	kebolio	also unresolved
2017-01-03 14:00:15	misdreavus	you'll need to explicitly bring it in as an extern crate first
2017-01-03 14:00:47	kebolio	really bizarre
2017-01-03 14:00:59	kebolio	still unresolved, i have extern crate fontconfig and fontconfig_sys
2017-01-03 14:01:32	misdreavus	neither of those will bring in servo_fontconfig into your root namespace
2017-01-03 14:01:57	kebolio	extern crate servo_fontconfig *does* complain
2017-01-03 14:02:03	_jahmez	onmyo and steve, thanks!
2017-01-03 14:02:05	kebolio	error, rather
2017-01-03 14:02:09	◥	kaljaman69 (kaljamies@moz-ramduc.60.citypartner.pl) has joined #rust-beginners
2017-01-03 14:02:13	_jahmez	For reference, this is what I was hoping for: https://gist.github.com/jamesmunns/254686af8405ea1f163de647c574374a
2017-01-03 14:02:23	_jahmez	(in non-real rust code)
2017-01-03 14:02:27	misdreavus	kebolio: is it in your Cargo.toml?
2017-01-03 14:02:36	_jahmez	but i'll look into error_chain
2017-01-03 14:02:47	kebolio	yes
2017-01-03 14:03:06	kebolio	its servo-fontconfig = "*" just at the moment
2017-01-03 14:03:59	misdreavus	can you post your code and Cargo.toml? i'm having a hard time getting to the bottom of this
2017-01-03 14:04:42	◥	DroidLogician (cyber@moz-rbllem.ca.charter.com) has joined #rust-beginners
2017-01-03 14:05:36	kebolio	misdreavus: https://w1r3.net/ogvSgw.txt
2017-01-03 14:05:40	◣	dm3 (dm3@moz-rj6.7o9.61.78.IP) has quit (Connection closed)
2017-01-03 14:05:42	kebolio	obv doesn't compile atm
2017-01-03 14:06:01	◥	dm3 (dm3@moz-rj6.7o9.61.78.IP) has joined #rust-beginners
2017-01-03 14:07:24	radix-M	Is there anything like Vec::retain but which gives me mutable references to the elements? I keep running into these situations where I'm processing a vector and need to drop some elements
2017-01-03 14:07:35	misdreavus	kebolio: ditch the fontconfig/fontconfig_sys extern crate lines, and turn `use fontconfig::*;` into `use servo_fontconfig::fontconfig::*;`
2017-01-03 14:08:19	misdreavus	(also iirc there's a ptr::null_mut that's already a *mut T)
2017-01-03 14:08:53	◣	kaljaman69 (kaljamies@moz-ramduc.60.citypartner.pl) has quit (Quit: leaving)
2017-01-03 14:08:56	kebolio	extern crate servo_fontconfig - can't find crate
2017-01-03 14:09:12	◥	emilk (emilk@moz-segdev.cust.bredbandsbolaget.se) has joined #rust-beginners
2017-01-03 14:09:43	radix-M	oh, I just did a google fer `retain_mut` and found a crate called `odds` which has it
2017-01-03 14:10:03	◣	dm3 (dm3@moz-rj6.7o9.61.78.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 14:10:06	misdreavus	kebolio: s/servo_fontconfig/fontconfig
2017-01-03 14:10:22	misdreavus	i think it's exporting the library as "fontconfig" even though the crate is "servo-fontconfig"
2017-01-03 14:10:25	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-03 14:11:24	misdreavus	leave the line in Cargo.toml as-is, just change the lines in main.rs
2017-01-03 14:11:24	kebolio	this doesn't work either
2017-01-03 14:11:24	kebolio	:/
2017-01-03 14:11:24	kebolio	"did you mean self::fontconfig::fontconfig?"
2017-01-03 14:11:37	misdreavus	what is the text of the line it's pointing at?
2017-01-03 14:11:41	misdreavus	it shouldn't suggest self for use lines
2017-01-03 14:11:50	kebolio	use fontconfig::fontconfig::*;
2017-01-03 14:11:51	misdreavus	is this not at the crate root
2017-01-03 14:11:51	misdreavus	?
2017-01-03 14:12:04	kebolio	its in src/drw.rs
2017-01-03 14:12:08	misdreavus	there's your problem
2017-01-03 14:12:11	kebolio	it shouldn't matter, should it?
2017-01-03 14:12:13	kebolio	:/
2017-01-03 14:12:15	misdreavus	it totally does
2017-01-03 14:12:23	misdreavus	`use` paths always start st the crate root
2017-01-03 14:12:41	misdreavus	but your extern crate lines put the crates' contents in that module
2017-01-03 14:13:13	kebolio	ok, i put extern crate in my main.rs
2017-01-03 14:13:21	kebolio	and it works fine, thanks
2017-01-03 14:13:24	misdreavus	by convention, it's common to put all extern crate lines in lib.rs/main.rs and just use what's needed anywhere else
2017-01-03 14:13:44	kebolio	should i only keep fn main() in main.rs then
2017-01-03 14:13:52	misdreavus	that's up to you
2017-01-03 14:14:03	kebolio	right, well thank you anyway
2017-01-03 14:14:11	misdreavus	i'm just noting for including crates in your module tree
2017-01-03 14:14:16	misdreavus	glad it could work out (^^)b
2017-01-03 14:14:17	◣	caleb (Mibbit@moz-7suuq5.fios.verizon.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 14:14:19	◣	NCommander (mcasa@moz-o8m8c2.fios.verizon.net) has quit (Ping timeout: 121 seconds)
2017-01-03 14:15:04	◣	_jahmez (jamesmunns@moz-7kai5t.dip0.t-ipconnect.de) has quit (Quit: Lost terminal)
2017-01-03 14:15:06	◥	mib_biqikz (Mibbit@moz-raj2p8.internetdsl.tpnet.pl) has joined #rust-beginners
2017-01-03 14:15:19	◣	mib_biqikz (Mibbit@moz-raj2p8.internetdsl.tpnet.pl) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 14:15:56	◣	psychoslave________ (msg@moz-0t3ggi.fbx.proxad.net) has quit (Client exited)
2017-01-03 14:15:58	misdreavus	Redrield: the root of the issue is that .then() wants you to return another future
2017-01-03 14:16:13	misdreavus	Redrield: you might be able to get away with using .map() instead, tho i'm not sure on that one
2017-01-03 14:17:45	◣	bjz (bjz@moz-puppgq.tpgi.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-03 14:18:37	◣	xpe (textual@moz-1ko1nj.ei8p.t9hi.0644.2601.IP) has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2017-01-03 14:19:56	jinshil	`static MyStaticStruct: MyStruct = MyStruct::new();`  Compiler Error E0015: calls in statics are limited to struct and enum constructors.
2017-01-03 14:20:44	jinshil	I asked this before, but I wanted to confirm.  Is that error ^ an arbitrary limitation, or by design?
2017-01-03 14:21:16	@mbrubeck	jinshil: It's by design that no user code runs before main, so there are no static constructors that are evaluated at runtime.
2017-01-03 14:21:23	◥	dm3 (dm3@moz-rj6.7o9.61.78.IP) has joined #rust-beginners
2017-01-03 14:21:36	@mbrubeck	jinshil: But the limitation will be relaxed some when the `const fn` feature is stabilized.
2017-01-03 14:21:44	jinshil	hmm.  Good thing I asked, because that answer is different from the one I received last time.
2017-01-03 14:21:44	@mbrubeck	(I think)
2017-01-03 14:22:22	~steveklabnik	mbrubeck: +1
2017-01-03 14:22:46	◣	hansaplast (hansaplast@moz-7v4sej.ve71.89v9.120b.2a02.IP) has quit (Connection closed)
2017-01-03 14:23:02	◣	hardenedapple (hardenedapp@moz-ckqh3b.dsl.pipex.com) has quit (Quit: WeeChat 1.6)
2017-01-03 14:23:39	jinshil	But now I'm kindof dissappointed because my constructors are 20 lines long.
2017-01-03 14:23:55	◥	man (elite_man@moz-stt2ab.ca.comcast.net) has joined #rust-beginners
2017-01-03 14:24:19	◥	montanonic (nicholas@moz-8oe.qek.216.209.IP) has joined #rust-beginners
2017-01-03 14:25:03	jinshil	Macros to the rescue I guess.
2017-01-03 14:25:18	◣	Binero (Binero@moz-2gc2ul.isp.belgacom.be) has quit (Client exited)
2017-01-03 14:26:11	◥	mindCrime (prhodes@moz-gsh24b.dyn6.twc.com) has joined #rust-beginners
2017-01-03 14:27:09	Icefoz	Grrr, speaking of macros
2017-01-03 14:27:14	◣	ufobat (Martin@moz-6gn1m5.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2017-01-03 14:27:23	Icefoz	Is there a good way to ask cargo to macro-expand and show me what the macro is?
2017-01-03 14:27:40	Icefoz	I don't see a good way to feed rustc's -Z --pretty=expanded to it.
2017-01-03 14:27:53	◣	pseudo-sue (user@moz-epv.316.75.184.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 14:28:13	Icefoz	Is cargo-expand the best way?
2017-01-03 14:28:21	◥	cmyr (cmyr@moz-to3mp4.158.electronicbox.net) has joined #rust-beginners
2017-01-03 14:28:33	bluss	it should be possible to give it that with cargo rustc
2017-01-03 14:28:35	misdreavus	cargo rustc?
2017-01-03 14:28:39	misdreavus	RUSTFLAGS?
2017-01-03 14:28:54	bluss	cargo build -v and copy and paste :)
2017-01-03 14:29:18	Icefoz	Aha, ok.
2017-01-03 14:29:30	Icefoz	...huh, now rustc complains that --pretty doesn't exist.
2017-01-03 14:29:44	Icefoz	Oh.  Only on nightly apparently.  :/
2017-01-03 14:30:48	◣	iiddnn__ (iacopodeeno@moz-fcea0a.retail.telecomitalia.it) has quit (Client exited)
2017-01-03 14:31:00	◣	Guest27 (textual@moz-hu6h73.rev.dnainternet.fi) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-03 14:31:17	Icefoz	So I guess I just will give up on using macros, why not.
2017-01-03 14:35:15	radix-M	bluss: if you're the bluss who made odds, thank you for retain_mut :) 
2017-01-03 14:36:24	◥	liquidnight (Mibbit@moz-rq435q.dyn.telefonica.de) has joined #rust-beginners
2017-01-03 14:37:57	◣	davs (davs@moz-pk0b43.pool.digicable.sk) has quit (Ping timeout: 121 seconds)
2017-01-03 14:40:34	◥	bjz (bjz@moz-k9990q.optusnet.com.au) has joined #rust-beginners
2017-01-03 14:40:52	◣	kitsu (kitsu@moz-34sno4.dynamic.ufanet.ru) has quit (Ping timeout: 121 seconds)
2017-01-03 14:40:53	Icefoz	It is *really annoying* that macros can't synthesize identifiers.
2017-01-03 14:42:30	◥	rkruppe (chatzilla@moz-c6skn4.unity-media.net) has joined #rust-beginners
2017-01-03 14:42:38	◣	blaphmat (Mibbit@moz-k6odhe.rev.numericable.fr) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 14:42:46	◥	smerft (Mibbit@moz-cpbmio.uws.ualberta.ca) has joined #rust-beginners
2017-01-03 14:43:11	◣	jbradberry (jrb@moz-kpp3mi.biz.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-03 14:43:57	◣	sooda (sooda@moz-fn3nq3.bb.dnainternet.fi) has quit (Ping timeout: 121 seconds)
2017-01-03 14:44:02	◥	frogzilla (Mibbit@moz-b49s87.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-03 14:44:10	Vtec234	Can I map over an array?
2017-01-03 14:44:25	◣	frogzilla (Mibbit@moz-b49s87.hfc.comcastbusiness.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 14:44:27	misdreavus	are you wanting to mutate items in-place?
2017-01-03 14:44:29	Vtec234	i.e. [T; 16] -> [B; 16] with F: FnOnce(T) -> B
2017-01-03 14:44:35	Vtec234	misdreavus: change types
2017-01-03 14:45:10	misdreavus	not that i know of, but that smells ripe for a macro
2017-01-03 14:45:34	Icefoz	Map over an array slice instead.
2017-01-03 14:45:39	Vtec234	please don't tell me i literally have to do new_arr = [ fn(arr[0]), fn(arr[1]), fn(arr[2]), ... ]
2017-01-03 14:45:50	Vtec234	Icefoz: can i collect the slice into an array?
2017-01-03 14:45:53	misdreavus	if you want a fixed array back, unfortunately yes
2017-01-03 14:46:05	Vtec234	muh integer generics :<
2017-01-03 14:46:17	misdreavus	that's not even integer generics
2017-01-03 14:46:33	bluss	radix-M: yep. np, sorry about the mess (all the things in odds :P
2017-01-03 14:46:33	misdreavus	that's unknown sized return value
2017-01-03 14:46:58	Vtec234	misdreavus: well, [T; N] -> [B; N] is generic over N and maps the array
2017-01-03 14:47:09	misdreavus	ah, right
2017-01-03 14:47:14	◣	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has quit (Quit: Leaving)
2017-01-03 14:47:23	Vtec234	i guess it might still not be implementable even with generics
2017-01-03 14:47:33	◣	bjz (bjz@moz-k9990q.optusnet.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-03 14:47:34	onmyo	so is splitting a project up into multiple crates the recommended approach to solve slow compiles?
2017-01-03 14:48:17	◣	liquidnight (Mibbit@moz-rq435q.dyn.telefonica.de) has left #rust-beginners
2017-01-03 14:48:29	Icefoz	Vtec234: https://is.gd/ph3qh1
2017-01-03 14:49:05	Icefoz	But yeah, unknown sized return types.
2017-01-03 14:49:07	◣	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has quit (Ping timeout: 121 seconds)
2017-01-03 14:49:07	◥	liquidnight (Mibbit@moz-rq435q.dyn.telefonica.de) has joined #rust-beginners
2017-01-03 14:49:11	◥	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-03 14:49:46	Vtec234	Icefoz: that's nice, but it's a Vec and i need performance :/
2017-01-03 14:49:57	◥	bjz (bjz@moz-k9990q.optusnet.com.au) has joined #rust-beginners
2017-01-03 14:50:11	◣	stelarcf_______________________ (stelarcf@moz-jd7lsk.com) has quit (Client exited)
2017-01-03 14:50:24	◥	stelarcf_______________________ (stelarcf@moz-jd7lsk.com) has joined #rust-beginners
2017-01-03 14:50:24	Icefoz	Vtec234: Make the same iterator without the .collect() and iterate over it filling out a fixed-size array?
2017-01-03 14:50:47	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2017-01-03 14:50:53	bluss	Icefoz: a note on the expanding messages from before, the incantation is not literally rustc -Z --pretty=expanded
2017-01-03 14:51:08	◣	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has quit (Ping timeout: 121 seconds)
2017-01-03 14:51:42	misdreavus	oh wait!
2017-01-03 14:51:45	misdreavus	!crate init-with
2017-01-03 14:51:45	rustbot	init_with (1.0.0) - Helper trait to initilize an array with a function -> https://crates.io/crates/init_with <https://docs.rs/crate/init_with>
2017-01-03 14:51:51	misdreavus	Vtec234: see if this will help ^
2017-01-03 14:52:46	▷	misdreavus can't believe they forgot their own crate -_-
2017-01-03 14:53:23	Icefoz	Vtec234: https://is.gd/mj3tPd
2017-01-03 14:53:28	◥	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has joined #rust-beginners
2017-01-03 14:53:29	◥	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-03 14:53:39	~steveklabnik	misdreavus: :)
2017-01-03 14:53:48	misdreavus	:P
2017-01-03 14:54:03	Icefoz	bluss: Yeah I figured out the right runes in the end, thanks.
2017-01-03 14:54:48	liquidnight	hello, i am a beginner and am searching some documentation.  anyone could give me a short hint ?
2017-01-03 14:54:54	misdreavus	!learnrust
2017-01-03 14:54:54	rustbot	Top Resources: https://doc.rust-lang.org/book/ http://rustbyexample.com/ http://github.com/carols10cents/rustlings
2017-01-03 14:54:56	@mbrubeck	onmyo: It's a useful step, yes. Hopefully incremental compilation will soon bring the same benefits without needing to split crates.
2017-01-03 14:55:15	◣	Akien_ (akien@moz-gd94u9.dyn.telefonica.de) has quit (Quit: self.get_tree().quit())
2017-01-03 14:55:17	misdreavus	liquidnight: check those links rustbot posted, they're pretty good resources to read about the language
2017-01-03 14:55:18	@mbrubeck	liquidnight: http://intorust.com/ is good if you like videos/screencasts
2017-01-03 14:55:43	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-03 14:56:22	liquidnight	thanks,  the intro and the carols is new to me, i look into it
2017-01-03 14:56:23	Vtec234	misdreavus: hey, it does! i was actually using init_with in the same code, but forgot i could mutate state in the closure! so i just use a counter
2017-01-03 14:56:26	Vtec234	thanks
2017-01-03 14:56:31	misdreavus	(^^)b
2017-01-03 14:56:34	asteriskServes	Is there a way to clone or copy a closure? Namely I have function that wants to take ownership of closure, but this function will not accept a boxed closure as far as I can tell so. However, I need to use this closure multiple times.
2017-01-03 14:56:48	asteriskServes	Context would be https://is.gd/UJwjES
2017-01-03 14:57:03	onmyo	mbrubeck: cool :)
2017-01-03 14:57:59	liquidnight	mbrubeck : thanks, i saw the introust already before.
2017-01-03 14:58:29	Xion	asteriskServes: Make a new one that calls the old closure?
2017-01-03 14:58:31	@mbrubeck	asteriskServes: There's no way to directly clone/copy a closure.  If it doesn't capture anything you can make it a `fn` instead, and I think `fn` types are Copy...
2017-01-03 14:59:34	rkruppe	asteriskServes: Box<Fn(&mut Request) -> CtxT> does not work, at least in part, because of the Sync+Send bound. So write Box<Fn(&mut Request) -> CtxT + Sync + Send>
2017-01-03 15:00:11	◣	bjz (bjz@moz-k9990q.optusnet.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-03 15:00:44	rkruppe	hm but that might still not work because there's no explicit impl for Box, just for &Fn =/
2017-01-03 15:00:54	liquidnight	misdreavus and all others: i looked through carols10cent and am still searching a specific hint.
2017-01-03 15:01:12	kebolio	can i use a method call in a match or if-let?
2017-01-03 15:01:24	◥	cornelius (Mibbit@moz-0dct8k.retail.telecomitalia.it) has joined #rust-beginners
2017-01-03 15:01:26	kebolio	specifically .is_null()
2017-01-03 15:01:37	asteriskServes	I see thanks for help.
2017-01-03 15:01:42	liquidnight	I look for documentation of  struct with generic associated function.  Did not find how to call such method with generics instantiation.
2017-01-03 15:01:42	~steveklabnik	playbot: fn foo() -> i32 { 5 } match foo() { 5 => "yes", _ => "no" }
2017-01-03 15:01:48	◣	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has quit (Connection closed)
2017-01-03 15:01:48	⚡	Notice(playbot): "yes"
2017-01-03 15:01:50	~steveklabnik	kebolio: ^ :)
2017-01-03 15:02:01	◥	caulagi (caulagi@moz-cgibnc.bredband.comhem.se) has joined #rust-beginners
2017-01-03 15:02:07	◣	dm3 (dm3@moz-rj6.7o9.61.78.IP) has quit (Connection closed)
2017-01-03 15:02:17	◣	cornelius (Mibbit@moz-0dct8k.retail.telecomitalia.it) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 15:02:21	kebolio	yes but i want to bind the pointer
2017-01-03 15:02:29	◥	dm3 (dm3@moz-rj6.7o9.61.78.IP) has joined #rust-beginners
2017-01-03 15:02:37	kebolio	at the moment my stuff looks like
2017-01-03 15:02:56	kebolio	let ptr = XWhatever()
2017-01-03 15:03:00	kebolio	if ptr.is_null() {
2017-01-03 15:03:47	◣	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has quit (Client exited)
2017-01-03 15:04:10	◣	Kreest_ (Kreest@moz-voslm9.pool.invitel.hu) has quit (Connection closed)
2017-01-03 15:04:28	~steveklabnik	since it returns a boolean, i would argue that if is better than match
2017-01-03 15:04:47	◥	Jayflux_ (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-03 15:04:49	kebolio	ok
2017-01-03 15:04:53	kebolio	it be right
2017-01-03 15:05:22	misdreavus	liquidnight: if it's what i'm thinking of, there's a special syntax for it - the docs for Iterator::collect is a good rundown for it https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect
2017-01-03 15:05:40	liquidnight	misdreavus: ok i look into it
2017-01-03 15:05:44	misdreavus	steveklabnik: (is the turbofish in the new book? >_>)
2017-01-03 15:06:31	◣	dm3 (dm3@moz-rj6.7o9.61.78.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:06:34	◥	JasonW (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-03 15:06:42	~steveklabnik	i don't remember
2017-01-03 15:06:45	◣	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has quit (Ping timeout: 121 seconds)
2017-01-03 15:07:45	misdreavus	the syntax index in v1 doesn't link it to anything in there
2017-01-03 15:08:44	◥	poolish (bread@moz-q8q2pe.east.myfairpoint.net) has joined #rust-beginners
2017-01-03 15:09:35	◣	bread|laptop (bread@moz-22g.5vs.16.70.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:10:14	◣	Jayflux_ (Jayflux@moz-om2b67.dsl.as9105.com) has quit (Ping timeout: 121 seconds)
2017-01-03 15:10:14	liquidnight	misdreavus  :  almost, thanks.   I prepared a oneliner here:    https://play.rust-lang.org/#9129316130951513943 
2017-01-03 15:10:54	liquidnight	misdreavus:   the specialty is   the Struct::<type>::method();   syntax.  I found that nowhere in the documentation.
2017-01-03 15:11:02	misdreavus	i don't think that's the link you want? click "shorten" and use that instead
2017-01-03 15:11:29	◣	junqed (junqed@moz-rlk.8dl.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-03 15:11:54	◥	junqed (junqed@moz-rlk.8dl.70.178.IP) has joined #rust-beginners
2017-01-03 15:12:10	misdreavus	(it took me just to play.rust-lang.org and gave me the last thing i had there)
2017-01-03 15:12:16	liquidnight	Ah yes, shortened:  https://is.gd/drSxZg 
2017-01-03 15:12:48	◥	voider1 (voider1@moz-cnrpdc.dynamic.ziggo.nl) has joined #rust-beginners
2017-01-03 15:12:56	misdreavus	okay, yeah, it's the same idea but kind of a hidden gem
2017-01-03 15:13:18	misdreavus	::<SomeType> applies type parameters to the thing that precedes it in the path
2017-01-03 15:13:24	liquidnight	I  am still searching in the documentation where I find that trick. If anyone knows where that is mentioned in the book, please tell me
2017-01-03 15:13:32	misdreavus	so for collect::<Vec<_>>(), they're being applied to collect()
2017-01-03 15:13:45	misdreavus	and in Foo::<u16>::doit(), they're being applied to Foo
2017-01-03 15:13:57	misdreavus	the "hidden gem" part is that you can keep going and add to the path
2017-01-03 15:14:12	liquidnight	what's a hidden gem ? 
2017-01-03 15:14:17	misdreavus	that it's not well-documented
2017-01-03 15:14:23	misdreavus	oh, the idiom?
2017-01-03 15:14:32	misdreavus	um, something nice that not a lot of people know about
2017-01-03 15:14:42	◥	zucchini (Mibbit@moz-2jm.49a.244.17.IP) has joined #rust-beginners
2017-01-03 15:14:47	stephaneyfx	liquidnight, this syntax is mentioned in the book there: https://doc.rust-lang.org/book/iterators.html#consumers
2017-01-03 15:14:52	liquidnight	sorry, didn't get it.    At least i know it now.
2017-01-03 15:14:54	misdreavus	(i need to head out soon, hopefully that helps)
2017-01-03 15:15:32	liquidnight	thank you misdreavus , stephaneyfx .
2017-01-03 15:15:55	misdreavus	ah, that's a nicer introduction, thanks stephaneyfx!
2017-01-03 15:15:56	◣	junqed (junqed@moz-rlk.8dl.70.178.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:16:37	stephaneyfx	misdreavus, it's not that easy to find but it's there :)
2017-01-03 15:16:49	◣	jinshil (jinshil@moz-juf.s9m.183.210.IP) has quit (Quit: client terminated!)
2017-01-03 15:16:52	liquidnight	still, i never head to  chapter iterators when I handle with struct   :-)
2017-01-03 15:17:17	misdreavus	yeah
2017-01-03 15:17:34	liquidnight	thanks, i go idle if i can.
2017-01-03 15:17:43	misdreavus	steveklabnik: is it okay if i log an issue to rust-lang/book asking to add a note about the turbofish to the generics chapter?
2017-01-03 15:17:54	~steveklabnik	yes!
2017-01-03 15:17:54	misdreavus	cool
2017-01-03 15:18:01	liquidnight	yes, thanks too !
2017-01-03 15:18:02	misdreavus	figured it'd be a better place than in an unlogged channel
2017-01-03 15:18:05	◣	kebolio (kebolio@moz-iga7d7.as13285.net) has quit (Client exited)
2017-01-03 15:18:43	liquidnight	actually i found that trick on a 2 year old  reddit post ;-)
2017-01-03 15:19:17	◥	mib_32wqub (Mibbit@moz-r2q.k68.110.36.IP) has joined #rust-beginners
2017-01-03 15:19:41	◣	mib_32wqub (Mibbit@moz-r2q.k68.110.36.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 15:21:58	◣	voider1 (voider1@moz-cnrpdc.dynamic.ziggo.nl) has quit (Quit: )
2017-01-03 15:22:40	◣	futile (felix@moz-q7s1bv.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2017-01-03 15:23:26	◣	niklasad1 (niklasad1@moz-1l8g7e.cust.bredbandsbolaget.se) has quit (Ping timeout: 121 seconds)
2017-01-03 15:23:33	◥	hansaplast (hansaplast@moz-7v4sej.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2017-01-03 15:25:15	misdreavus	alright, i gotta run, y'all take care
2017-01-03 15:26:54	◥	solenodica (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-03 15:26:57	◥	robertbalicki (robertbalic@moz-6mr26d.res.rr.com) has joined #rust-beginners
2017-01-03 15:27:35	◣	hansaplast (hansaplast@moz-7v4sej.ve71.89v9.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:28:00	stephaneyfx	misdreavus, take care too!
2017-01-03 15:28:52	Redrield	How can I recover from a WouldBlock error from mio?
2017-01-03 15:29:08	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:29:11	Redrield	The code that's causing it is here https://hastebin.com/mifecafiqa.cs
2017-01-03 15:29:23	Redrield	I get a WouldBlock error on the byte.expect() line
2017-01-03 15:29:23	◣	oln (smuxi@moz-h6kap0.customer.cdi.no) has quit (A TLS packet with unexpected length was received.)
2017-01-03 15:30:01	◣	makoLume (mako@moz-o2p8h1.flip.co.nz) has quit (Ping timeout: 121 seconds)
2017-01-03 15:30:20	◣	refold (refold@moz-lkj.2mj.172.188.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:30:29	◣	cmyr (cmyr@moz-to3mp4.158.electronicbox.net) has quit (Client exited)
2017-01-03 15:30:47	insaneinside	in general with non-blocking I/O, that error means that you should wait a little while and try the (IO) operation again later
2017-01-03 15:32:22	insaneinside	Redrield: no idea if that helps -- I've never used mio :)
2017-01-03 15:33:01	Redrield	Doesn't seem to be
2017-01-03 15:33:25	Redrield	I inserted a thread::sleep(Duration::new(10, 0)); in between the connection from the client and the blocking operation
2017-01-03 15:33:34	Redrield	Still panicking after that line
2017-01-03 15:34:07	◣	sneaker (thomas@moz-blt.n21.144.213.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:34:29	insaneinside	Redrield, what happens if you run a delay->retry loop on error?  Does it loop forever?
2017-01-03 15:34:32	stephaneyfx	Redrield, i think you should not sleep but instead register your source to be notified when more bytes are available to read
2017-01-03 15:34:45	Redrield	stephaneyfx: How would I do that?
2017-01-03 15:35:22	stephaneyfx	Redrield, i haven't used mio but they mentioned epoll and that's how epoll works
2017-01-03 15:35:23	◣	manuel_ (manuel@moz-44m.14s.6.209.IP) has quit (Client exited)
2017-01-03 15:35:50	stephaneyfx	Redrield, the point is not to poll the source randomly but to be notified when more bytes are available to read
2017-01-03 15:35:51	◣	srwalker101 (srwalker101@moz-i5q.7te.223.2.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-03 15:36:02	◣	robertbalicki (robertbalic@moz-6mr26d.res.rr.com) has quit (Client exited)
2017-01-03 15:36:12	insaneinside	mm, isn't `epoll` a Linux-specific API?
2017-01-03 15:37:02	stephaneyfx	insaneinside, it is definitely not on windows, but there is IOCP on windows and kqueue for bsd
2017-01-03 15:37:33	stephaneyfx	insaneinside, there's also select but that may not be efficient
2017-01-03 15:37:43	◣	caulagi (caulagi@moz-cgibnc.bredband.comhem.se) has quit (Quit: leaving)
2017-01-03 15:39:05	◥	KermitoniT (kermitonit@moz-51mu2f.optusnet.com.au) has joined #rust-beginners
2017-01-03 15:39:24	ngc0202	What did the @ used to be used for in Rust?
2017-01-03 15:39:27	◥	shouya (shouya@moz-ptr.a30.245.114.IP) has joined #rust-beginners
2017-01-03 15:39:39	stephaneyfx	ngc0202, it's still used to match in patterns
2017-01-03 15:40:17	stephaneyfx	ngc0202, https://doc.rust-lang.org/book/patterns.html#bindings
2017-01-03 15:40:17	ngc0202	Was it used a lot in the past though?
2017-01-03 15:40:40	ngc0202	I'm just trying to figure out what someone I know was referring to when he said "and at least the code is no longer filled with @s"
2017-01-03 15:40:46	ngc0202	I've never seen it that much
2017-01-03 15:40:47	stephaneyfx	ngc0202, sorry, i wouldn't know. i started rust last november :p
2017-01-03 15:40:59	XMPPwocky	@ was used for GC pointers
2017-01-03 15:41:16	◣	OneEyed (oneeyed@moz-nothgt.iqk8.ruh3.0e35.2a01.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:41:33	ngc0202	GC?
2017-01-03 15:41:46	stephaneyfx	Garbage Collected
2017-01-03 15:41:51	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-03 15:41:55	ngc0202	Rust used to have a garbage collector? o.O
2017-01-03 15:41:59	Redrield	How can I fix this? https://hastebin.com/orefekagej.lua
2017-01-03 15:42:01	◥	_jahmez (jamesmunns@moz-7kai5t.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-03 15:42:02	LLBlumire	@T was sort of like Rc<T> today, ~T was sort of like Box<T> today
2017-01-03 15:42:05	LLBlumire	good old legacy types
2017-01-03 15:42:11	Redrield	This is the code that's causing it https://hastebin.com/ganahofoti.vbs
2017-01-03 15:42:26	ngc0202	Ohh I see
2017-01-03 15:42:44	stephaneyfx	but Rc is not garbage collected. it's more like shared_ptr in c++
2017-01-03 15:43:02	ngc0202	right
2017-01-03 15:43:09	◥	refold (refold@moz-lkj.2mj.172.188.IP) has joined #rust-beginners
2017-01-03 15:43:13	LLBlumire	Redrield: only patterns in match guards, not functions
2017-01-03 15:43:33	_jahmez	Hey all, I have a cffi question. What is the best way to convert an arbitrarily sized &[u8] into a continuous non-fat array I can pass to a C function that expects a null terminated array (of arbitrary size)?
2017-01-03 15:43:35	◥	jinshil (jinshl@moz-76n.0jp.94.115.IP) has joined #rust-beginners
2017-01-03 15:44:27	_jahmez	My thought was to allocate some reasonable size (1024 bytes), and copy the slice into a stack array, but this wouldn't handle truly arbitrary size
2017-01-03 15:44:33	◣	eibwen (eibwen@moz-hid249.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-03 15:44:41	◣	fwiw (fwiw@moz-2od.81c.78.36.IP) has quit (Quit: testing irc)
2017-01-03 15:45:04	insaneinside	_jahmez: use a Vec
2017-01-03 15:45:04	_jahmez	Is there a heap allocatable structure that guarantees non-fat alignment?
2017-01-03 15:45:23	_jahmez	Got it, so vec is skinny?
2017-01-03 15:45:26	insaneinside	_jahmez: use a Vec, copy the bytes into it, add a zero at the end, and call .as_ptr
2017-01-03 15:45:54	insaneinside	"fat" only applies to reference pointers like `&[T]` IIRC
2017-01-03 15:46:08	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:46:19	_jahmez	Got it. Wasn't sure if vec guaranteed to be in-memory continuous
2017-01-03 15:46:25	stephaneyfx	_jahmez, if you already have a zero in your slice, you can call as_ptr
2017-01-03 15:46:51	insaneinside	<https://doc.rust-lang.org/std/vec/struct.Vec.html> "A contiguous growable array type, written Vec<T> but pronounced 'vector'."
2017-01-03 15:46:52	LLBlumire	_jahmez: anything that dereferences to slice is in memory contiguous
2017-01-03 15:47:10	_jahmez	cool, that was what I was looking for. Thanks all for the sanity check!
2017-01-03 15:48:01	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-03 15:48:17	◣	LLBlumire (LLBlumire@moz-9so9ji.range165-120.btcentralplus.com) has quit (Quit: Leaving)
2017-01-03 15:49:04	Redrield	Hm...
2017-01-03 15:49:16	Redrield	I'm using mio's event loop, and the event says it's readable
2017-01-03 15:49:26	Redrield	But the main thread panics when I try to read from it
2017-01-03 15:50:04	◣	plutoniix (q@moz-9dq8h4.dynamic.totbb.net) has quit (Quit: Leaving)
2017-01-03 15:52:18	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:53:27	◥	bonk (bonk@moz-7bg41k.crbe.fpjm.00c2.2601.IP) has joined #rust-beginners
2017-01-03 15:54:02	Redrield	I honestly have no idea where I'm going wrong with this
2017-01-03 15:55:29	◥	manuel_ (manuel@moz-5eskqg.ma.comcast.net) has joined #rust-beginners
2017-01-03 15:55:31	◣	shouya (shouya@moz-ptr.a30.245.114.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:56:53	◣	zucchini (Mibbit@moz-2jm.49a.244.17.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 15:57:04	◣	mkollaro (mkollaro@moz-9qcfr7.5s2m.pbgm.0998.2001.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:57:29	◣	bonk (bonk@moz-7bg41k.crbe.fpjm.00c2.2601.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 15:58:44	◥	mkollaro (mkollaro@moz-59f.kke.191.134.IP) has joined #rust-beginners
2017-01-03 16:00:18	◥	NCommander (mcasa@moz-2fn4cv.res.rr.com) has joined #rust-beginners
2017-01-03 16:00:38	◣	KermitoniT (kermitonit@moz-51mu2f.optusnet.com.au) has quit (Quit: This computer has gone to sleep)
2017-01-03 16:01:34	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-03 16:02:47	◥	KermitoniT (kermitonit@moz-51mu2f.optusnet.com.au) has joined #rust-beginners
2017-01-03 16:04:34	◣	smerft (Mibbit@moz-cpbmio.uws.ualberta.ca) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 16:07:30	◣	manuel_ (manuel@moz-5eskqg.ma.comcast.net) has quit (Client exited)
2017-01-03 16:09:29	◣	bbsome (Mibbit@moz-l9u.btc.157.37.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 16:10:31	◥	cjhowe (textual@moz-6f600u.hr.cox.net) has joined #rust-beginners
2017-01-03 16:13:23	◥	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has joined #rust-beginners
2017-01-03 16:14:07	◣	tyoc213 (tyoc@moz-l5e.5lp.203.189.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 16:14:08	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Quit: Leaving...)
2017-01-03 16:15:56	◣	solenodica (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 16:16:03	◣	cjhowe (textual@moz-6f600u.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-03 16:17:48	◣	cynicaldevil (uid126068@moz-3m708d.brockwell.irccloud.com) has quit (Quit: Connection closed for inactivity)
2017-01-03 16:21:30	◣	wallacoloo____ (colin@moz-tvseqg.tukw.qwest.net) has quit (Client exited)
2017-01-03 16:22:39	◣	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 16:24:45	◥	hansaplast (hansaplast@moz-7v4sej.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2017-01-03 16:28:48	◣	hansaplast (hansaplast@moz-7v4sej.ve71.89v9.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2017-01-03 16:30:06	◥	solenodica (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-03 16:31:40	◣	saimen (saimen@moz-6nh7io.hsi5.kabel-badenwuerttemberg.de) has quit (Quit: WeeChat 1.6)
2017-01-03 16:32:38	◣	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has quit (Ping timeout: 121 seconds)
2017-01-03 16:33:46	◥	reedlepee (Mibbit@moz-5lt.q9n.52.204.IP) has joined #rust-beginners
2017-01-03 16:34:15	◣	reedlepee (Mibbit@moz-5lt.q9n.52.204.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-03 16:34:28	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-03 16:35:47	◣	poolish (bread@moz-q8q2pe.east.myfairpoint.net) has quit (Client exited)
2017-01-03 16:35:57	◣	KermitoniT (kermitonit@moz-51mu2f.optusnet.com.au) has quit (Quit: This computer has gone to sleep)
2017-01-03 16:36:07	◥	bread|laptop (bread@moz-q8q2pe.east.myfairpoint.net) has joined #rust-beginners
2017-01-04 09:56:13	⚡	irc: disconnected from server
2017-01-04 09:56:31	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-04 09:56:31	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-04 09:56:31	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-04 09:56:31	⚡	Channel #rust-beginners: 643 nicks (3 ops, 0 halfops, 0 voices, 640 normals)
2017-01-04 09:56:35	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-04 09:58:36	◣	kAworu (alex@moz-r13phb.ip-37-59-30.eu) has quit (A TLS packet with unexpected length was received.)
2017-01-04 09:59:31	◥	tuna74 (tuna74@moz-5h9cl2.bredband.comhem.se) has joined #rust-beginners
2017-01-04 10:00:04	◥	tyoc (tyoc@moz-l5e.5lp.203.189.IP) has joined #rust-beginners
2017-01-04 10:01:45	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2017-01-04 10:03:32	◣	tyoc213 (tyoc@moz-2ilelt.iusacell.net) has quit (Ping timeout: 121 seconds)
2017-01-04 10:04:21	◥	muskox (muskox@moz-8mbs17.res.rr.com) has joined #rust-beginners
2017-01-04 10:28:18	⚡	irc: disconnected from server
2017-01-04 10:28:36	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-04 10:28:36	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-04 10:28:36	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-04 10:28:36	⚡	Channel #rust-beginners: 644 nicks (3 ops, 0 halfops, 0 voices, 641 normals)
2017-01-04 10:28:40	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-04 10:30:31	stew	Moonlightning: what code are you looking at here?
2017-01-04 10:30:44	◥	ferdinand (Mibbit@moz-iegcb4.business.broadband.hu) has joined #rust-beginners
2017-01-04 10:30:51	ferdinand	hi
2017-01-04 10:31:09	◥	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-04 10:31:17	ferdinand	i'm trying to create a result type such that Result<(), ()>
2017-01-04 10:31:39	Moonlightning	stew: ...ask wyvern?
2017-01-04 10:31:52	◥	federico__ (federico@moz-6pq.5l8.108.201.IP) has joined #rust-beginners
2017-01-04 10:31:54	ferdinand	but I can't implement the std::error::Error, because () isn't defined in the current crate
2017-01-04 10:32:09	stew	ah got mixed up
2017-01-04 10:32:12	◣	federico_ (federico@moz-vdi.anu.108.201.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 10:32:13	stew	wyvern: what code are you looking at here
2017-01-04 10:32:27	◥	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has joined #rust-beginners
2017-01-04 10:32:32	Moonlightning	ferdinand: Why would you want a `Result<(), ()>`? o.o
2017-01-04 10:32:40	◥	srwalker_ (srwalker101@moz-l3sgo2.warwick.ac.uk) has joined #rust-beginners
2017-01-04 10:33:15	◣	caconym (caconym@moz-klghvh.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-04 10:33:20	wyvern	stew: https://github.com/jonhoo/hdrsample/blob/master/src/iterators/mod.rs#L76
2017-01-04 10:33:34	stew	wyvern: i think tuples make more sense when you are going to alias anyway and grab all the values from a tuple. or if the tuple is small-ish. 4-tuples are probably the largest i would want to deal with, but it would make sense with CMYK or RGBA
2017-01-04 10:34:04	wyvern	this isn't that simple; the meanings are non-obvious from the types and it would be possible to mix them up
2017-01-04 10:34:09	wyvern	So, I will probably refactor that
2017-01-04 10:34:27	Moonlightning	stew, wyvern: I'd actually argue that colors should probably be represented as structs :p
2017-01-04 10:34:37	Moonlightning	...actually, I think the Book even says that
2017-01-04 10:34:44	@mbrubeck	Moonlightning: It's like a boolean but *fancy* :)
2017-01-04 10:35:05	◥	jannick (jannick@moz-eu0lcm.siteimprove.com) has joined #rust-beginners
2017-01-04 10:35:13	breeden1	mbrubeck: and even accounts for FileNotFound scenarios
2017-01-04 10:35:15	@mbrubeck	ferdinand: You can use `struct Error;` instead of `()` as the error type
2017-01-04 10:35:19	jannick	hey is there an push to vec and get the index function?
2017-01-04 10:36:00	@mbrubeck	jannick: Nope, you'll have to call `vec.len()` and then do `vec.push(...)`
2017-01-04 10:36:03	◣	srwalker101 (srwalker101@moz-ec8ffd.warwick.ac.uk) has quit (Ping timeout: 121 seconds)
2017-01-04 10:36:23	stew	im not sure i use tuples too much directly, most of the time its when im iterating over something in a chunk or im pretending a long array of things is actually a series of , lets say, vector values for a shader
2017-01-04 10:36:37	stew	i might transform them into structs later, but yeah
2017-01-04 10:36:47	stew	or destructuring
2017-01-04 10:36:50	◣	srwalker_ (srwalker101@moz-l3sgo2.warwick.ac.uk) has quit (Ping timeout: 121 seconds)
2017-01-04 10:36:52	stew	use tuples all the time with destructuring
2017-01-04 10:37:18	Moonlightning	again, you can also destructure structs in Rust
2017-01-04 10:37:25	stew	yeah
2017-01-04 10:37:30	stew	im not disagreeing with you here
2017-01-04 10:37:40	◥	wallacoloo____ (colin@moz-3f4g94.dhcp4.washington.edu) has joined #rust-beginners
2017-01-04 10:37:42	◣	ferdinand (Mibbit@moz-iegcb4.business.broadband.hu) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 10:37:47	Moonlightning	:)
2017-01-04 10:37:51	breeden1	using a tuple to represent a chunk makes sense, even the .0, .1, ..., fields have semantic meaning there
2017-01-04 10:38:08	stew	yeah, or like "read in chunks of five, skip two"
2017-01-04 10:38:26	stew	i was referring to when you are calling a function that's just going to return a big effing array back at you
2017-01-04 10:38:35	stew	like, reading back from a graphics card
2017-01-04 10:38:40	Moonlightning	slice patterns pls
2017-01-04 10:38:52	⚡	agibson is now known as agibson|afk
2017-01-04 10:39:09	Moonlightning	while let [_, _, a, b, c] = chunks.next()
2017-01-04 10:40:29	stew	im not sure we are saying different things, but whatever
2017-01-04 10:42:16	◥	leonardo2 (chatzilla@moz-v70ao4.retail.telecomitalia.it) has joined #rust-beginners
2017-01-04 10:42:19	leonardo2	Hello
2017-01-04 10:42:52	leonardo2	So far I had no problems with "-C prefer-dynamic" (Windows 64 bit, GNU)
2017-01-04 10:43:03	leonardo2	But recently I've switched to rustup
2017-01-04 10:43:19	breeden1	> rust doesn't support tail call optimization, so we'd run out of stack; https://github.com/jonhoo/hdrsample/blob/master/src/iterators/mod.rs#L85.  LLVM does tail call optimizations though right?
2017-01-04 10:43:32	leonardo2	And now if I compile a program with "-C prefer-dynamic" it gives me an error like:  missing std-f652078ccb4a05c6.dll 
2017-01-04 10:44:10	leonardo2	breeden1: LLVM sometimes perform tail call optimizations, if you switch optimizations on, and the code is right and simple
2017-01-04 10:44:40	Moonlightning	breeden1: I believe tail-call optimization does happen in Rust; it's not /guaranteed/ right now, though.
2017-01-04 10:44:47	rkruppe	breeden1: additionally to what leonardo2 said, a call that looks like a tail call may actually be one because there are values around that need to be dropped after the call
2017-01-04 10:44:52	leonardo2	I have had to add a path :\Users\Utente\.rustup\toolchains\nightly-x86_64-pc-windows-gnu\lib\rustlib\x86_64-pc-windows-gnu\lib
2017-01-04 10:45:04	breeden1	rkruppe: oh, i wouldn't have considered that
2017-01-04 10:45:05	Moonlightning	breeden1: guaranteed tailcall optimization with the `become` keyword is in the works.
2017-01-04 10:45:17	breeden1	Moonlightning: really?? Interesting
2017-01-04 10:45:35	leonardo2	But don't hold your breath.
2017-01-04 10:45:36	Moonlightning	breeden1: ...yeah? There's a tracking issue open for it.
2017-01-04 10:45:37	breeden1	Moonlightning: so it would be a compile-time error if a tail call optimization couldn't be constructed?
2017-01-04 10:45:47	Moonlightning	breeden1: with `become`, yeah
2017-01-04 10:45:53	breeden1	i like it
2017-01-04 10:45:56	◥	caconym (caconym@moz-klghvh.wa.comcast.net) has joined #rust-beginners
2017-01-04 10:46:11	rkruppe	re: becomme - maybe? DemiMarie has been working on that but has been having doubts lately whether it's feasible for all backends
2017-01-04 10:46:33	Moonlightning	;-;
2017-01-04 10:46:35	breeden1	what other backends?
2017-01-04 10:46:50	rkruppe	wasm, cretonne, mrustc or other backends outputting C
2017-01-04 10:47:05	rkruppe	or even plain old LLVM backends that haven't implemented tail calls
2017-01-04 10:47:18	Moonlightning	backends...outputting...C...
2017-01-04 10:47:19	leonardo2	Like little CPUs
2017-01-04 10:47:31	breeden1	Moonlightning: mrustc! :D
2017-01-04 10:47:33	◥	djump (djump@moz-dkcp2c.wa.comcast.net) has joined #rust-beginners
2017-01-04 10:47:36	rkruppe	also it puts constraints on the calling conventions, so it might not be 100% zero cost
2017-01-04 10:47:48	◥	dpyro (dpyro@moz-el40ti.tx.frontiernet.net) has joined #rust-beginners
2017-01-04 10:48:14	Moonlightning	...well, I guess machine-generated C is not /nearly/ as likely to have memory errors in it as organic-written X
2017-01-04 10:48:17	Moonlightning	s/X/C/
2017-01-04 10:50:10	◣	djump_ (djump@moz-dkcp2c.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-04 10:50:13	◣	caconym (caconym@moz-klghvh.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-04 10:51:08	rkruppe	still far from guaranteed though
2017-01-04 10:51:30	rkruppe	you need to be very careful to avoid UB from things that aren't UB in rust (e.g. type punning, signed integer overflow)
2017-01-04 10:52:14	leonardo2	I've filed a basic bug report: https://github.com/rust-lang-nursery/rustup.rs/issues/900
2017-01-04 10:52:56	leonardo2	See you later
2017-01-04 10:53:07	◣	leonardo2 (chatzilla@moz-v70ao4.retail.telecomitalia.it) has quit (Quit: ChatZilla 0.9.93 [Firefox 50.1.0/20161208153507])
2017-01-04 10:54:36	Moonlightning	...is compiling to C, like, tier-four target support? :p
2017-01-04 10:55:05	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-04 10:55:21	Moonlightning	since C is supposed to run on literally every imaginable system XP
2017-01-04 10:55:25	voider1	So I'm making this Telegram API wrapper, and I'm thinking about how I should register the commandhandlers. If someone sends a command like: "/foo", and the bot is in the chat and sees the command and you've registered the command with your bot it should do something. 
2017-01-04 10:55:44	Moonlightning	> Telegram
2017-01-04 10:55:46	Moonlightning	kek
2017-01-04 10:55:46	voider1	I was thinking about making a Hashmap with the command name and the function associated.
2017-01-04 10:56:42	vandenoever	voider1: or an enum with a match, how many commands are there?
2017-01-04 10:56:55	voider1	vandenoever: You can define them yourself.
2017-01-04 10:57:06	voider1	vandenoever: As many as you like.
2017-01-04 10:57:22	voider1	vandenoever: /asd, /dfafa, /sdfds, /foobar, really anything can become a command.
2017-01-04 10:57:27	vandenoever	voider1: then a hashmap with closures makes sense
2017-01-04 10:57:40	voider1	Hmm, closures.
2017-01-04 10:57:44	voider1	Hadn't thought about that.
2017-01-04 10:57:44	vandenoever	or functions
2017-01-04 10:57:56	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2017-01-04 10:58:03	voider1	Would that be the best way to register functions you think?
2017-01-04 10:58:04	◥	skeeter (skeeter@moz-d5s7vm.tukw.qwest.net) has joined #rust-beginners
2017-01-04 10:58:12	vandenoever	voider1: i dont think it matters much
2017-01-04 10:58:27	Moonlightning	I don't think I like the enum-match thing (you still then have to map the enum variants to callables /some/how), but I'm not sure about the HashMap
2017-01-04 10:59:15	voider1	Moonlightning: So my idea was, when you pass the Hashmap to my Updater struct and you start polling for updates, it'll check if the command is in the HashMap, and when it's in executes the function.
2017-01-04 10:59:35	◣	kaljaman69 (kaljamies@moz-ramduc.60.citypartner.pl) has quit (Quit: leaving)
2017-01-04 10:59:44	Moonlightning	Hmm
2017-01-04 10:59:55	Moonlightning	Sounds good, I guess?
2017-01-04 11:00:08	Moonlightning	I'm getting that feeling that maybe there's a better way, kinda faintly
2017-01-04 11:00:21	voider1	Moonlightning: Yeah, me too.
2017-01-04 11:00:30	Moonlightning	(not in the usual strong /okay, no, stop, there MUST be a better way than this/)
2017-01-04 11:00:47	voider1	Yeah, I know what you mean. But I can't put my finger on it.
2017-01-04 11:01:18	Moonlightning	I think we have that collective whatsitcalled. Like the thing where you can't remember a word, and you try to describe it to someone else, and suddenly they can't remember the word either. :P
2017-01-04 11:01:49	voider1	Yeah, that's exactly what we're having right now.
2017-01-04 11:01:49	voider1	XD
2017-01-04 11:02:15	voider1	If there's a better way I want to do it the better way.
2017-01-04 11:02:37	voider1	But... What's the better way?
2017-01-04 11:02:54	voider1	Steveklabnik: Could you provide some insights?
2017-01-04 11:03:13	muskox	hashmap with closures seems like a fine way to do it IMO
2017-01-04 11:03:15	◣	vmeson (rmacleod@moz-hs5cri.cable.teksavvy.com) has quit (Ping timeout: 121 seconds)
2017-01-04 11:03:24	muskox	i can't really think of any downsides to that approach
2017-01-04 11:03:28	voider1	muskox: It's fine... But is it... The best?
2017-01-04 11:03:36	◥	vmeson (rmacleod@moz-hs5cri.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 11:03:46	◥	gunibert (gunibert@moz-1v6nka.dynamic.kabel-deutschland.de) has joined #rust-beginners
2017-01-04 11:03:56	@mbrubeck	voider1: Instead of closures you could also write your own `Plugin` trait, and have a `HashMap<String, Box<Plugin>>`
2017-01-04 11:04:15	voider1	Hmm, how could that work mbrubeck?
2017-01-04 11:04:21	voider1	I know how traits work.
2017-01-04 11:04:39	@mbrubeck	And you can even `impl<F> Plugin for F where F: Fn(Message) -> Output` if you want people to be able to use closures as plugins
2017-01-04 11:04:55	voider1	Hmm, but that would introduce a lot of setup overhead.
2017-01-04 11:05:05	@mbrubeck	voider1: Are you familiar with trait objects? https://doc.rust-lang.org/book/trait-objects.html
2017-01-04 11:05:56	voider1	mbrubeck: Not at all, let me see.
2017-01-04 11:06:09	@mbrubeck	voider1: In the case where closures implement the Plugin trait, I don't think there's any more overhead than if you did a `HashMap<String, Box<Fn(...)>>`
2017-01-04 11:06:44	Moonlightning	you can always start out with the mapping to closures, and then change it to mapping to `Plugin`s
2017-01-04 11:06:54	Moonlightning	that's backcompat (right?)
2017-01-04 11:07:14	◥	alx741_ (alx741@moz-qqb.dkk.152.190.IP) has joined #rust-beginners
2017-01-04 11:07:48	◣	undeadleech (undeadleech@moz-jf98c5.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2017-01-04 11:07:54	voider1	mbrubeck: Well, you'd have to make structs and implement the traits for each struct and then put those in a HashMap and then pass that to the Updater, right?
2017-01-04 11:08:36	@mbrubeck	voider1: Well, that's why I suggested implementing it for closures, so plugin implementers can choose whether to use a struct or a closure.
2017-01-04 11:09:14	◣	alx741_ (alx741@moz-qqb.dkk.152.190.IP) has quit (Client exited)
2017-01-04 11:09:24	voider1	mbrubeck: Hmm.
2017-01-04 11:09:26	Moonlightning	Yeah, it's a nice kind of scaled-functionality thing. Simple plugins can just be closures; you can add more features to the Plugin trait over time and more complex things can use it
2017-01-04 11:09:35	@mbrubeck	Your suggestion was a HashMap from strings to functions.  My suggestion is a HashMap from strings to plugins, where a plugin can be either a function or any other type that implements the plugin trait.
2017-01-04 11:09:50	◣	alx741 (alx741@moz-736.gma.152.190.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 11:11:43	voider1	mbrubeck: Hmm, I think I need to look more into traits, I've only used them with structs.
2017-01-04 11:12:02	voider1	But you can implement traits for functions?
2017-01-04 11:12:17	◣	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 11:12:38	misdreavus	you can implement them for the closure traits
2017-01-04 11:12:47	voider1	Closure traits... Never heard of those.
2017-01-04 11:12:53	misdreavus	that's Fn/FnMut/FnOnce
2017-01-04 11:13:29	voider1	Hmm.
2017-01-04 11:13:45	misdreavus	so copying from above, `impl<F> Plugin for F where F: Fn(Message) -> Output` would mean any closure that matched the Fn signature could be treated as a Plugin
2017-01-04 11:14:12	misdreavus	it's like impl'ing something `for T where T: SomeCondition` but that condition happens to be Fn
2017-01-04 11:14:46	misdreavus	so like ToString is given to anything that impls Display, Plugin would be given to anything that impls Fn(Message) -> Output
2017-01-04 11:14:52	@mbrubeck	voider1: Any type in Rust can implement a trait.  structs, enums, primitive types like u8, pointer types like &u8, ...
2017-01-04 11:14:59	misdreavus	and functions/closures that match that signature happen to impl that trait
2017-01-04 11:16:01	◥	maddie9 (maddie@moz-fpe67k.dyn.plus.net) has joined #rust-beginners
2017-01-04 11:16:42	Moonlightning	voider1: Fn* aren't specific to functions and closures. You can implement them for any type, and then use calling syntax on instances of that type
2017-01-04 11:16:57	Moonlightning	don't confuse the Fn* traits with the fn* types, though
2017-01-04 11:17:13	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-04 11:17:26	misdreavus	*with the right feature gate
2017-01-04 11:17:29	voider1	mbrubeck: Could you write a simple example?
2017-01-04 11:17:37	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 11:18:17	◣	solenodica (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 11:18:21	wyvern	What's the preferred library for setting terminal escapes to provide color text? https://github.com/mackwic/colored? https://github.com/ogham/rust-ansi-term?
2017-01-04 11:18:48	Moonlightning	voider1: you can literally just go `impl Trait for SomeStruct`
2017-01-04 11:18:53	Moonlightning	or `for SomeEnum`
2017-01-04 11:18:59	◣	cmyr (cmyr@moz-4vu.06r.98.75.IP) has quit (Client exited)
2017-01-04 11:19:02	◥	MarwenDo (MarwenDo@moz-622.3e6.15.197.IP) has joined #rust-beginners
2017-01-04 11:19:13	Moonlightning	or `for &Foo` or `for u8` or `for *const T`
2017-01-04 11:19:27	◣	cpup (cpup@moz-cjd.b21.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 11:19:46	◣	wallacoloo____ (colin@moz-3f4g94.dhcp4.washington.edu) has quit (Client exited)
2017-01-04 11:20:20	misdreavus	impl'ing a trait for a closure trait https://is.gd/25KyY3
2017-01-04 11:20:26	Moonlightning	trait method implementations for enums will often destructure the enum
2017-01-04 11:20:45	Moonlightning	(using `ref` to take references to any associated data instead of trying to move it)
2017-01-04 11:21:39	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 11:21:43	◥	cpup (cpup@moz-cjd.b21.218.32.IP) has joined #rust-beginners
2017-01-04 11:22:33	◥	urcra (urcra@moz-9lk9gn.cpe.webspeed.dk) has joined #rust-beginners
2017-01-04 11:22:54	voider1	misdreavus: Hmm, looks interesting.
2017-01-04 11:23:31	misdreavus	admittedly, i hesitated a little when i called `self()` but it totally works
2017-01-04 11:25:24	Moonlightning	And why not? The trait bound is on Fn, so you can call `self`
2017-01-04 11:25:26	◣	rkruppe_ (rkruppe@moz-c6skn4.unity-media.net) has quit (Quit: Bye)
2017-01-04 11:25:35	Moonlightning	same as you'd be able to index `self` if it had an Index trait bound
2017-01-04 11:25:41	Moonlightning	or add it if it was Add
2017-01-04 11:25:47	misdreavus	right
2017-01-04 11:25:53	misdreavus	i just haven't done it before
2017-01-04 11:25:53	◥	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has joined #rust-beginners
2017-01-04 11:26:22	misdreavus	it's exotic syntax that took me a second to recognize as correct
2017-01-04 11:26:42	◣	hackebeilchen (Peter@moz-ovp14u.ip-addr.inexio.net) has quit (Connection closed)
2017-01-04 11:27:58	◥	AlexW (awalcutt@moz-lpnnlu.wa.comcast.net) has joined #rust-beginners
2017-01-04 11:29:11	misdreavus	partly because actually impl'ing Fn and friends on arbitrary types is unstable so it's not an operator i expect to see on arbitrary things
2017-01-04 11:30:00	◣	awalcutt (awalcutt@moz-lpnnlu.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-04 11:31:06	◥	solenodica (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-04 11:32:04	◣	xpe (textual@moz-0ln4n1.ei8p.t9hi.0644.2601.IP) has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2017-01-04 11:33:26	voider1	Hmm
2017-01-04 11:33:51	voider1	So if I make this trait, what benefits will it have?
2017-01-04 11:36:50	Moonlightning	The `Plugin` trait?
2017-01-04 11:37:30	◣	rkruppe (chatzilla@moz-c6skn4.unity-media.net) has quit (Connection closed)
2017-01-04 11:38:12	voider1	Yes.
2017-01-04 11:38:37	voider1	Moonlightning: I'm struggling to see what value it will actually add.
2017-01-04 11:40:20	misdreavus	allows for more flexible command registration
2017-01-04 11:42:18	◥	xiinotulp (q@moz-aad980.dynamic.totbb.net) has joined #rust-beginners
2017-01-04 11:42:42	jannick	is there a way to index an iterator?
2017-01-04 11:43:00	~steveklabnik	jannick: nth, sorta
2017-01-04 11:43:19	voider1	misdreavus: How?
2017-01-04 11:43:27	◥	mib_215sws (Mibbit@moz-njbqn7.cable.virginm.net) has joined #rust-beginners
2017-01-04 11:43:28	◣	mib_215sws (Mibbit@moz-njbqn7.cable.virginm.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 11:44:24	jannick	steveklabnik: nth doesn't that give me the nth element?
2017-01-04 11:44:25	misdreavus	allowing a trait instead of forcing it to a closure type allows for more complex state to be held in the struct directly instead of having to deal with closure captures
2017-01-04 11:44:32	Moonlightning	jannick: note that calling nth() is like calling next() repeatedly, and discarding all but the nth element
2017-01-04 11:44:50	Moonlightning	except off by one
2017-01-04 11:44:56	Moonlightning	.nth(0) is the same as next()
2017-01-04 11:44:59	jannick	yes, I want [a,b,c] -> [(1,a),(2,b),(3,c)]
2017-01-04 11:45:05	misdreavus	enumerate()
2017-01-04 11:45:06	jannick	not nth
2017-01-04 11:45:16	Moonlightning	Oh, yeah, that's enumeration
2017-01-04 11:45:18	misdreavus	enumerate starts at 0 but that's what you want
2017-01-04 11:45:44	Moonlightning	If you need one-based, you could...enumerate() and then map() and add one, I guess?
2017-01-04 11:45:48	jannick	yes thats what I want ^^
2017-01-04 11:45:53	◣	plutoniix (q@moz-9dq8h4.dynamic.totbb.net) has quit (Ping timeout: 121 seconds)
2017-01-04 11:46:09	jannick	i needed it start with 0 :p
2017-01-04 11:46:10	Moonlightning	Oh, or zip()
2017-01-04 11:46:16	Moonlightning	Okay.
2017-01-04 11:46:22	misdreavus	oh, cool
2017-01-04 11:46:34	◥	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-04 11:47:36	voider1	misdreavus: So if I understand it correctly, you have this trait which has a function like, execute_command(update: Update), and then you can implement it for a function, closure, struct, enum, etc.
2017-01-04 11:48:11	karinqe	is it somehow possible to send a Sender trough a channel? It's not even between threads, I'm using an async channel to simplify communication between two things...
2017-01-04 11:48:42	◣	vmeson (rmacleod@moz-hs5cri.cable.teksavvy.com) has quit (Ping timeout: 121 seconds)
2017-01-04 11:49:04	◥	vmeson (rmacleod@moz-hs5cri.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 11:49:26	◥	Sergio_ (uid203766@moz-h8mp44.stonehaven.irccloud.com) has joined #rust-beginners
2017-01-04 11:49:39	◣	stelarcf (stelarcf@moz-jd7lsk.com) has quit (Client exited)
2017-01-04 11:49:44	karinqe	chan can do it, but I'm not sure if I want to become completely dependent on it with this...
2017-01-04 11:49:56	◥	stelarcf (stelarcf@moz-jd7lsk.com) has joined #rust-beginners
2017-01-04 11:50:08	jannick	can I return into_iter().enumerate().filter(..) as a slice in some way?
2017-01-04 11:50:23	misdreavus	voider1: yeah, so alongside defining the trait, you could impl it for the closure signature you want, and make the trait pub so people can impl it for their own plugins/commands
2017-01-04 11:50:39	~steveklabnik	jannick: not in the genreal case; as filter would only accept certain elements, and a slice requires that all of its elements are next to each other in memory
2017-01-04 11:50:48	◥	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has joined #rust-beginners
2017-01-04 11:50:51	misdreavus	karinqe: iirc, channels don't really care about the Send-ness of their messages, they just won't be Send if their message type isn't
2017-01-04 11:51:02	@mbrubeck	jannick: You can .collect() it into a Vec
2017-01-04 11:51:04	voider1	misdreavus: I'm losing you at closure signature, how do you impl for a closure signature?
2017-01-04 11:51:04	misdreavus	karinqe: since this isn't multithreaded it might not matter
2017-01-04 11:51:13	◣	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has quit (Quit: )
2017-01-04 11:51:15	misdreavus	voider1: that example i posted earlier
2017-01-04 11:51:21	karinqe	so it doesn't matter that it's !Sync?
2017-01-04 11:51:30	misdreavus	voider1: impl<T> Thing for T where T: Fn() -> String
2017-01-04 11:51:34	jannick	mbrubeck: is there anyway to avoid returning a full copy?
2017-01-04 11:51:58	voider1	Misdreavus: Oh, I get it.
2017-01-04 11:52:37	misdreavus	karinqe: it depends on your setup. if none of your commands used thread::spawn or anything that required Send, then it should be fine since it's not crossing thread boundaries
2017-01-04 11:53:24	karinqe	misdreavus: cool, thanks
2017-01-04 11:53:30	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 11:53:42	◣	breeden1 (breeden@moz-l0ff2r.wi.charter.com) has quit (Quit: WeeChat 1.6)
2017-01-04 11:53:59	◥	breeden1 (breeden@moz-l0ff2r.wi.charter.com) has joined #rust-beginners
2017-01-04 11:54:08	voider1	misdreavus: So you implement the trait for a generic which has the function signature Fn() -> String, and they now all have the same functionality. 
2017-01-04 11:54:18	misdreavus	voider1: yup!
2017-01-04 11:54:26	voider1	misdreavus: But each command has other functionality.
2017-01-04 11:54:28	@mbrubeck	jannick: If you own the original collection, then `collection.into_iter().enumerate().filter(...).collect()` will move things into the new collection without cloning them, so
2017-01-04 11:55:20	◣	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has quit (Connection closed)
2017-01-04 11:55:28	@mbrubeck	jannick: it'll allocate a new buffer and memcpy stuff into it from the old buffer, but it won't do "deep" copies of anything like Strings or Vecs inside the items
2017-01-04 11:55:33	◥	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has joined #rust-beginners
2017-01-04 11:55:37	misdreavus	voider1: exactly. so if you can make your Plugin trait's main method work in terms of some function signature, then you can impl it in terms of that function
2017-01-04 11:55:44	jannick	mbrubeck: how does that work, wouldn't that mean there is now two mutable reference?
2017-01-04 11:55:59	@mbrubeck	jannick: There's also https://doc.rust-lang.org/std/vec/struct.Vec.html#method.retain if you want to filter a vector without allocating a new one, but it doesn't use the Iterator API so you'll need to track the index yourself instead of using enumerate.
2017-01-04 11:56:16	misdreavus	voider1: but if you *also* open up the trait so others can impl it themselves, you allow for a much easier time for things that need complex state, since closure captures can be a huge headache at times
2017-01-04 11:56:18	karinqe	misdreavus: and if I wanted to send it trough a thread boundary, what would I do?
2017-01-04 11:56:25	@mbrubeck	jannick: No, after you call `vec.into_iter()`, vec is consumed and you can't access it anymore.
2017-01-04 11:57:29	misdreavus	karinqe: Sender only cares about the contents being Send - so the fact that it's !Sync doesn't matter as much, since the ownership is being transferred wholesale through the channel
2017-01-04 11:58:18	◣	nkr (nkr@moz-65q.mqv.99.179.IP) has quit (Connection closed)
2017-01-04 11:58:21	jannick	mbrubeck: ahh, then it won't work... I need to be able to loan out a struct do some calculations on it and then return it's calc
2017-01-04 11:58:45	◥	nkr (nkr@moz-65q.mqv.99.179.IP) has joined #rust-beginners
2017-01-04 11:58:49	@mbrubeck	jannick: In that case you could return a slice of references
2017-01-04 11:59:05	karinqe	misdreavus: ok, thanks
2017-01-04 11:59:13	jannick	mbrubeck: yes but some of them are faulty so i need to filter them :/
2017-01-04 11:59:19	@mbrubeck	or rather a Vec of references
2017-01-04 12:00:56	jannick	mbrubeck: ahhhh as_slice().into_iter()..... works
2017-01-04 12:01:11	@mbrubeck	jannick: `.iter()` is short for that
2017-01-04 12:01:57	jannick	mbrubeck: right.. why didn't you just say that to begin with >< :p
2017-01-04 12:02:49	◣	nkr (nkr@moz-65q.mqv.99.179.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 12:03:06	@mbrubeck	jannick: Sorry.  :P   Your initial example used .into_iter() so I thought it owned the thing it was iterating over.
2017-01-04 12:03:55	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 12:03:56	jannick	mbrubeck: hmm but if into_iter() consumes it wouldn't I have had to have been the owner?
2017-01-04 12:04:26	@mbrubeck	right
2017-01-04 12:04:44	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-04 12:04:54	@mbrubeck	actually, I guess it's complicated :P
2017-01-04 12:04:54	misdreavus	&T references are Copy so slices (&[T]) get "consumed" but really it just takes a copy of the reference to make the slice iterator
2017-01-04 12:05:09	@mbrubeck	yeah, that
2017-01-04 12:05:24	misdreavus	Copy does weird things to ownership rules :P
2017-01-04 12:05:36	jannick	mbrubeck: ^^
2017-01-04 12:07:12	◣	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 12:07:17	◣	shouya (shouya@moz-ptr.a30.245.114.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-04 12:07:21	◣	federico__ (federico@moz-6pq.5l8.108.201.IP) has quit (Quit: Leaving)
2017-01-04 12:07:30	◥	federico (federico@moz-6pq.5l8.108.201.IP) has joined #rust-beginners
2017-01-04 12:08:03	◥	srwalker101 (srwalker101@moz-i5q.7te.223.2.IP) has joined #rust-beginners
2017-01-04 12:09:01	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 12:11:50	◥	cubercaleb (Mibbit@moz-7suuq5.fios.verizon.net) has joined #rust-beginners
2017-01-04 12:12:08	cubercaleb	Q: does rust have something similar to c++'s decltype?
2017-01-04 12:13:28	cubercaleb	so that i can do something like: "fn foo(t: decltype(MyStruct::some_member_in_my_struct));"
2017-01-04 12:14:16	~steveklabnik	i am not a decltype expert, but i believe the closest thing is the nightly -> impl Trait syntax, at least for functions that return a decltype. 
2017-01-04 12:14:33	~steveklabnik	but not for doing something like that, there's nothing directly anagulous
2017-01-04 12:14:36	◣	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has quit (Ping timeout: 121 seconds)
2017-01-04 12:14:47	◣	maddie9 (maddie@moz-fpe67k.dyn.plus.net) has quit (Quit: Leaving)
2017-01-04 12:14:51	~steveklabnik	you'd write fn foo<T>(t: t), and bound T by a trait appropriately
2017-01-04 12:14:52	cubercaleb	well, i just need to get the type of some struct member
2017-01-04 12:14:57	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-04 12:15:05	cubercaleb	so that if i change the type, so does the type the function takes
2017-01-04 12:15:37	~steveklabnik	not directly, no
2017-01-04 12:15:41	@mbrubeck	cubercaleb: You could create a type alias and then then use it in both places.  But as steveklabnik said, there's nothing really similar to decltype.
2017-01-04 12:16:52	cubercaleb	that is a shame
2017-01-04 12:17:04	cubercaleb	but i guess the type alias works too
2017-01-04 12:18:42	◥	bjz (bjz@moz-puppgq.tpgi.com.au) has joined #rust-beginners
2017-01-04 12:18:48	◣	cubercaleb (Mibbit@moz-7suuq5.fios.verizon.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 12:19:03	◣	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has quit (Ping timeout: 121 seconds)
2017-01-04 12:19:10	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 12:21:44	◥	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has joined #rust-beginners
2017-01-04 12:22:46	◥	cjhowe (textual@moz-qpbq0h.va.comcast.net) has joined #rust-beginners
2017-01-04 12:24:36	◥	federico_ (federico@moz-j8v.n98.108.201.IP) has joined #rust-beginners
2017-01-04 12:24:55	◥	SilverKey (SilverKey@moz-pf5aar.biz.rr.com) has joined #rust-beginners
2017-01-04 12:25:17	◣	SilverKey (SilverKey@moz-pf5aar.biz.rr.com) has quit (Quit: Cheerio!)
2017-01-04 12:25:34	◥	SilverKey (SilverKey@moz-pf5aar.biz.rr.com) has joined #rust-beginners
2017-01-04 12:27:01	◥	kaljaman69 (kaljamies@moz-ramduc.60.citypartner.pl) has joined #rust-beginners
2017-01-04 12:27:16	kaljaman69	hey, how do you render crisp text?
2017-01-04 12:27:31	◣	federico (federico@moz-6pq.5l8.108.201.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 12:27:40	kaljaman69	this results in fuzzy text https://medium.com/@arpith/rendering-text-in-rust-with-piston-window-5811b63b1324#.ir6ajpbyj
2017-01-04 12:28:00	kaljaman69	I have a macbook retina display which I'm suspecting but can't figure out how to configure it more detailed
2017-01-04 12:28:23	kaljaman69	if I draw the text in double or triple and scale it down it still fuzzy
2017-01-04 12:29:18	kaljaman69	hmm, maybe wrong channel again, I'll try #rust-gamedev
2017-01-04 12:31:18	◥	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-04 12:31:26	◥	handyman (handyman@moz-pdknca.subp.5lka.0645.2601.IP) has joined #rust-beginners
2017-01-04 12:35:34	voider1	misdreavus: I don't see the thing with the Plugin trait oworking.
2017-01-04 12:35:48	misdreavus	how so?
2017-01-04 12:36:55	◣	vorner (vorner@moz-fjnbbo.cz) has left #rust-beginners
2017-01-04 12:37:23	voider1	misdreavus: Every function that I register as a command has the same signature.
2017-01-04 12:37:38	◥	NeverDie (NeverDie@moz-crtjcd.fios.verizon.net) has joined #rust-beginners
2017-01-04 12:38:04	voider1	misdreavus: The code you showed me makes every function with the signature have the same implementation.
2017-01-04 12:38:16	voider1	misdreavus: That's now what I want to achieve.
2017-01-04 12:38:20	voider1	not*
2017-01-04 12:38:51	◥	refold (refold@moz-lkj.2mj.172.188.IP) has joined #rust-beginners
2017-01-04 12:39:30	misdreavus	then what would you like? if you just want to hand closures off to something, allowing arbitrary signatures won't work even without the trait
2017-01-04 12:40:41	misdreavus	closures/functions with arbitrary signatures don't even have a trait in common, so you couldn't store them in the same HashMap, for example
2017-01-04 12:40:57	◥	pylbrecht (pylbrecht@moz-rhd91h.leu1.nofh.8109.2a02.IP) has joined #rust-beginners
2017-01-04 12:41:03	voider1	misdreavus: So every function has the same signature, but different functionality.
2017-01-04 12:41:16	misdreavus	yeah
2017-01-04 12:41:28	◣	futile (felix@moz-edjue4.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2017-01-04 12:42:35	misdreavus	just because i used one closure in my example doesn't mean that's the only thing it can do
2017-01-04 12:43:09	voider1	https://is.gd/tYJmB6 this was my initial idea.
2017-01-04 12:44:07	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-04 12:44:09	voider1	How would I do that with the traits?
2017-01-04 12:44:15	misdreavus	and that's totally doable, with or without the Plugin wrapper trait
2017-01-04 12:44:23	misdreavus	i'll fill it out a litt
2017-01-04 12:44:26	misdreavus	**little
2017-01-04 12:44:57	◥	hardenedapple (hardenedapp@moz-l8680p.dsl.pipex.com) has joined #rust-beginners
2017-01-04 12:45:50	◣	Aankhen`` (notasquid@moz-mst.0do.7.27.IP) has quit (Quit: Sorry, was AFK)
2017-01-04 12:45:57	◥	xpe (textual@moz-0ln4n1.ei8p.t9hi.0644.2601.IP) has joined #rust-beginners
2017-01-04 12:46:42	◣	NeverDie (NeverDie@moz-crtjcd.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 12:47:49	misdreavus	https://is.gd/pN61LY
2017-01-04 12:48:08	misdreavus	if you don't want the Plugin trait, make the HashMap's value be Fn(Update) instead and take out all the Plugin stuff
2017-01-04 12:49:19	misdreavus	FnMut(Update), rather - it allows commands to keep state
2017-01-04 12:49:23	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 12:49:23	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-04 12:49:24	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 12:50:44	◥	weirdo (Mibbit@moz-56r.ulq.207.104.IP) has joined #rust-beginners
2017-01-04 12:50:50	misdreavus	voider1: ^ i'm bad at highlighting people
2017-01-04 12:50:50	◣	cjhowe (textual@moz-qpbq0h.va.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 12:51:03	weirdo	hey all. Can Rust produce a static library that I can link against from a C++ project?
2017-01-04 12:51:15	sebk	weirdo: sure
2017-01-04 12:51:36	~steveklabnik	weirdo: sure
2017-01-04 12:51:41	◥	stjepang_ (stjepang@moz-ia8.g3l.39.5.IP) has joined #rust-beginners
2017-01-04 12:51:45	Xion	IIRC you can essentially extern "C" Rust code.
2017-01-04 12:51:58	weirdo	@sebk @steveklabnik do you have any good references for examples of that?
2017-01-04 12:52:01	~steveklabnik	http://doc.crates.io/manifest.html#building-dynamic-or-static-libraries
2017-01-04 12:52:16	~steveklabnik	you'll want the "staticlib" crate type
2017-01-04 12:52:25	~steveklabnik	and then yeah, as Xion says, use extern 
2017-01-04 12:52:35	~steveklabnik	https://doc.rust-lang.org/stable/book/ffi.html
2017-01-04 12:52:40	sebk	and the…
2017-01-04 12:52:45	sebk	… too late
2017-01-04 12:52:57	radix-M	Does anyone know of any crates that provide a non-empty vector? I implemented one myself because I couldn't find any, now I'm just wondering if I should publish it or if I just overlooked one that already exists
2017-01-04 12:53:12	~steveklabnik	non-empty vector?
2017-01-04 12:53:17	misdreavus	what do you mean by "non-empty vector"?
2017-01-04 12:53:25	breeden1	i only use empty vectors personally
2017-01-04 12:53:29	sebk	vec![1, 2, 3] ?
2017-01-04 12:53:38	radix-M	a vector that is guaranteed to be non-empty.
2017-01-04 12:53:45	voider1	misdreavus: Ah, so you just call self(update) inside of there.
2017-01-04 12:53:55	~steveklabnik	never heard of any packages for that
2017-01-04 12:53:58	radix-M	basically `struct NonEmpty<T> { head: T, rest: Vec<T> }`
2017-01-04 12:54:04	◣	srwalker101 (srwalker101@moz-i5q.7te.223.2.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-04 12:54:23	◥	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-04 12:54:28	◣	stjepang (stjepang@moz-h34.aah.252.151.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 12:54:28	misdreavus	voider1: yup! in that impl you can just defer the whole impl to the function/closure you're being handed
2017-01-04 12:54:29	sebk	or... make pop() panic if len() < 1 ?
2017-01-04 12:54:53	breeden1	non_empty[0] would never require a bounds check with that
2017-01-04 12:55:08	◥	socksy (Mibbit@moz-6hs.5ii.19.178.IP) has joined #rust-beginners
2017-01-04 12:55:08	voider1	misdreavus: So if I extern that trait, people could implement it on a struct and change the process_message method so it works with their structs, which would allow for more complex command handlers.
2017-01-04 12:55:12	sebk	radix-M: you could use (T, Vec<T>)
2017-01-04 12:55:15	voider1	Right?
2017-01-04 12:55:18	weirdo	@steveklabnik @sebk awesome, that's great! 
2017-01-04 12:55:19	breeden1	radix-M: did you implement IndexRange for it?  By just modifying the index bounds?
2017-01-04 12:55:19	misdreavus	voider1: exactly
2017-01-04 12:55:21	weirdo	thanks for the link
2017-01-04 12:55:25	◥	srwalker101 (srwalker101@moz-i5q.7te.223.2.IP) has joined #rust-beginners
2017-01-04 12:55:28	jannick	if I have Vec<&usize> and I want Vec<usize> is there an easier way than .map(|v| *v).collect()?
2017-01-04 12:55:31	voider1	misdreavus: At last, I get it, and I will implement this.
2017-01-04 12:55:36	misdreavus	:D
2017-01-04 12:55:42	breeden1	jannick: v.cloned()
2017-01-04 12:55:48	voider1	misdreavus: Thank you, some example code really helps me understand. 
2017-01-04 12:55:52	◣	gunibert (gunibert@moz-1v6nka.dynamic.kabel-deutschland.de) has quit (Client exited)
2017-01-04 12:55:55	◣	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 12:55:55	radix-M	breeden1: I'm not actually familiar with IndexRange (yet)
2017-01-04 12:55:59	weirdo	that was the last piece of the puzzle, now I'm convinced rust will be awesome for my needs
2017-01-04 12:56:14	breeden1	radix-M: did you implement Index for it?
2017-01-04 12:56:20	radix-M	sebk: that is essentially what it is, but with a bunch of methods so you can treat it like a normal vector for most operations.
2017-01-04 12:56:22	misdreavus	voider1: yeah, sometimes it's better to see the idea in action before it'll click
2017-01-04 12:56:23	jannick	breeden1: how is that an easier way?
2017-01-04 12:56:29	misdreavus	voider1: glad it worked out (^^)b
2017-01-04 12:56:40	breeden1	jannick: well, it's certianly not more difficult
2017-01-04 12:56:40	voider1	misdreavus: It also makes my library more extendable, I could add new methods to the trait without breaking backwards compatibility.
2017-01-04 12:56:40	radix-M	breeden1: nope, also haven't looked at that, though I'm willing to add a bunch more impls of these kinds of traits if nobody else has implemented it :)
2017-01-04 12:57:00	breeden1	jannick: but I don't believe there is an easier way
2017-01-04 12:57:03	sebk	radix-M: well.. slicing might/will fail
2017-01-04 12:57:19	radix-M	oh, yeah, it doesn't support slicing at all.
2017-01-04 12:57:23	jannick	breeden1: okay could be there was something simple I was missing
2017-01-04 12:57:36	sebk	radix-M: where is the advantage of size > 0 ?
2017-01-04 12:57:40	radix-M	afaict slicing is impossible to support without allowing panics
2017-01-04 12:57:43	◣	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 12:58:00	socksy	does anyone have any experience with using Rust on NixOS?
2017-01-04 12:58:05	sebk	(except for no index check for the zero-item)
2017-01-04 12:58:20	ubsan	radix-M: technically, you could statically prove stuff
2017-01-04 12:58:37	◥	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has joined #rust-beginners
2017-01-04 12:58:46	radix-M	ubsan: not sure what you mean.
2017-01-04 12:58:59	ubsan	radix-M: you can statically prove your stuff can't go out of bounds
2017-01-04 12:59:03	ubsan	instead of allowing panics
2017-01-04 12:59:07	radix-M	ubsan: I can? in Rust?
2017-01-04 12:59:18	ubsan	I guess no
2017-01-04 12:59:30	ubsan	but you could do it in a different language :P
2017-01-04 12:59:35	Xion	Rust doesn't even have static ints lol
2017-01-04 12:59:46	◥	davs (davs@moz-due.96s.131.95.IP) has joined #rust-beginners
2017-01-04 12:59:48	breeden1	the problem with slicing is that the things aren't contiguous
2017-01-04 13:00:00	Xion	ubsan just wants to tell us about her Lord and Savior Idris
2017-01-04 13:00:14	ubsan	playbot: static I: i32 = 0;
2017-01-04 13:00:17	⚡	Notice(playbot): ()
2017-01-04 13:00:17	ubsan	Xion: ^ ?
2017-01-04 13:00:22	radix-M	Oh, I already know about Idris :-)
2017-01-04 13:00:31	Xion	ubsan: Type-level
2017-01-04 13:00:43	ubsan	Xion: static != type level
2017-01-04 13:00:45	breeden1	idk, I thought someone did crazy things with lifetimes to prove that array access was inbounds
2017-01-04 13:01:03	◣	davs (davs@moz-due.96s.131.95.IP) has quit (Connection closed)
2017-01-04 13:01:23	◣	dm3 (dm3@moz-rj6.7o9.61.78.IP) has quit (Connection closed)
2017-01-04 13:01:24	Xion	ubsan: I'm not sure what static even means in Rust, given it doesn't have either classes or translation units.
2017-01-04 13:01:36	Xion	(i.e. the two sources of meaning for "static" in other langs)
2017-01-04 13:01:40	ubsan	Xion: in static memory
2017-01-04 13:01:47	ubsan	the other source of meaning for static
2017-01-04 13:01:55	◥	dm3 (dm3@moz-rj6.7o9.61.78.IP) has joined #rust-beginners
2017-01-04 13:01:57	Xion	Ah, so 'static
2017-01-04 13:01:59	radix-M	sebk: anyway, there are lots of reasons for wanting a NonEmpty; I'm not particularly interested in advocating it, but it's a structure that's been commonly used and implemented in a lot of languages.
2017-01-04 13:01:59	ubsan	the original, in fact
2017-01-04 13:02:07	ubsan	'static != in static memory
2017-01-04 13:02:18	ubsan	'static just means "exists for the life of the program"
2017-01-04 13:02:34	breeden1	not true either
2017-01-04 13:02:42	radix-M	sebk: Essentially it gives you a way to prove that you have a structure that has at least one element earlier on, so that later on you can always assume that it will be there without relying on panics or Option.
2017-01-04 13:02:45	breeden1	i don't believe
2017-01-04 13:02:51	ubsan	breeden1: what?
2017-01-04 13:03:09	breeden1	you can construct a static str (at least semantically) mid way
2017-01-04 13:03:37	Xion	I'm pretty sure borrowchk would barf at this
2017-01-04 13:03:48	radix-M	sebk: (T, Vec<T>) is exactly equivalent to it; the only reason to make it a struct is to add methods that make it more convenient, and provide trait implementations and so forth.
2017-01-04 13:03:57	misdreavus	'static also means "contains no references" or "owns all its data"
2017-01-04 13:04:51	voider1	misdreavus: Can I place the basic implement block inside my library?
2017-01-04 13:04:52	ubsan	playbot: let buffer = String::from("Hello, world!"); let s: &'static str = unsafe { &*(&buffer[..] as *const str) }; std::mem::forget(buffer); s
2017-01-04 13:04:54	⚡	Notice(playbot): "Hello, world!"
2017-01-04 13:04:59	ubsan	breeden1: ^
2017-01-04 13:05:09	sebk	radix-M: so it is a Vec minus the assumption of continuous memory ?
2017-01-04 13:05:17	ubsan	it's called "leaking memory"
2017-01-04 13:05:22	misdreavus	voider1: yup, you'll need to since that's where the trait is defined
2017-01-04 13:05:33	ubsan	technically you can create an &'static mut that way
2017-01-04 13:05:36	breeden1	heh
2017-01-04 13:05:57	◣	dm3 (dm3@moz-rj6.7o9.61.78.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:06:10	◣	MarwenDo (MarwenDo@moz-622.3e6.15.197.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:06:19	radix-M	sebk: I dunno, is (T, Vec<T>) non-continuous?
2017-01-04 13:06:24	ubsan	it was suggested that that should be done for Box
2017-01-04 13:06:27	voider1	misdreavus: So when people do something like use teleborg::Plugin; they automatically use the impl block, right?
2017-01-04 13:06:32	ubsan	i.e., Box::leak -> &'static mut T
2017-01-04 13:06:33	sebk	radix-M: at least between 0 and 1
2017-01-04 13:06:33	radix-M	sebk: because that's literally what it is (or, actually, `struct NonEmpty { head: T, rest: Vec<T> }`
2017-01-04 13:06:40	ubsan	but then there was a bug
2017-01-04 13:07:00	kimundi	that had been fixed fast though
2017-01-04 13:07:01	ubsan	playbot: fn foo(x: &'static mut i32) -> (&'static mut i32, &'static mut i32) { (x, x) }
2017-01-04 13:07:05	⚡	Notice(playbot): error[E0499]: cannot borrow `*x` as mutable more than once at a time
2017-01-04 13:07:05	⚡	Notice(playbot):   --> <anon>:10:83
2017-01-04 13:07:05	⚡	Notice(playbot):    |
2017-01-04 13:07:05	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2hS8tXJ)
2017-01-04 13:07:16	sebk	radix-M: it would look like { head: T, data: *T, size: usize, capacity: usize }
2017-01-04 13:07:16	ubsan	used to compile ^
2017-01-04 13:07:23	misdreavus	voider1: yeah, they'll have the impls available when they pull the trait in like that
2017-01-04 13:07:29	◥	mib_vgh513 (Mibbit@moz-ej6.fg1.58.172.IP) has joined #rust-beginners
2017-01-04 13:07:31	radix-M	sebk: what would look like that?
2017-01-04 13:07:32	◥	dinfuehr1 (dinfuehr1@moz-lbm873.highway.telekom.at) has joined #rust-beginners
2017-01-04 13:07:35	◥	shouya (shouya@moz-ptr.a30.245.114.IP) has joined #rust-beginners
2017-01-04 13:07:42	sebk	but then the first element is stored on the stack while all others are on the heap
2017-01-04 13:07:53	Xion	ubsan: Memory leak as a serv... ahem... feature? :)
2017-01-04 13:08:00	ubsan	yep
2017-01-04 13:08:03	Xion	WHY :D
2017-01-04 13:08:06	sebk	using a "real" Vec might be better
2017-01-04 13:08:12	◥	insaneinside (user@moz-ck7c5n.customer.broadstripe.net) has joined #rust-beginners
2017-01-04 13:08:15	ubsan	turns out, sometimes you actually do want memory leaks
2017-01-04 13:08:35	◥	cjhowe (textual@moz-qpbq0h.va.comcast.net) has joined #rust-beginners
2017-01-04 13:08:38	◣	cjhowe (textual@moz-qpbq0h.va.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 13:08:47	sebk	radix-M: the (T, Vec<T>)
2017-01-04 13:08:55	◣	benh (ben@moz-ie00gt.org) has left #rust-beginners
2017-01-04 13:09:16	radix-M	sebk: oh, I see, as an optimization? and then just implement my interface by ensuring that I never have fewer than 1 element in the vec?
2017-01-04 13:09:26	weirdo	@steveklabnik so a staticlib crate type will output a `.a` file, how does the C++ project know how to call into the static library? There's no header files produced by the rust build, for example
2017-01-04 13:09:39	stephaneyfx	ubsan, do you have an example?
2017-01-04 13:09:52	voider1	misdreavus: impl<T: Fn(update::Update)> for T {             is this possible too?
2017-01-04 13:10:09	sebk	radix-M: yes
2017-01-04 13:10:27	ubsan	stephaneyfx: lazy_static
2017-01-04 13:10:31	◥	makoLine (mako@moz-o2p8h1.flip.co.nz) has joined #rust-beginners
2017-01-04 13:10:49	◥	mib_mgh91x (Mibbit@moz-jtbggm.pobb.as13285.net) has joined #rust-beginners
2017-01-04 13:11:15	radix-M	sebk: I think that would actually make several of my methods easier to implement too (like the Iterator and Serialize/Deserialize impls)... I should try it out, thanks :)
2017-01-04 13:11:18	stephaneyfx	ubsan, well it leaks because of the implementation, but it's not really desired
2017-01-04 13:11:24	misdreavus	voider1: if you make your default impl for FnMut(update::Update), it'll pull in Fn(Update) as well
2017-01-04 13:11:29	misdreavus	voider1: otherwise, yup
2017-01-04 13:11:31	ubsan	stephaneyfx: it's totally desires
2017-01-04 13:11:33	ubsan	*desired
2017-01-04 13:11:34	stephaneyfx	ubsan, i mean it would be cleaner to release these resources
2017-01-04 13:11:42	ubsan	you want it to live for the life of the program
2017-01-04 13:11:45	breeden1	lazy_static leaks?
2017-01-04 13:11:54	voider1	misdreavus: What's FnMut?
2017-01-04 13:11:56	ubsan	it does release those resources... when the program dies
2017-01-04 13:12:08	stephaneyfx	ubsan, think of a dynamically loaded lib that may be unloaded too
2017-01-04 13:12:09	misdreavus	voider1: a closure that mutates its captures
2017-01-04 13:12:23	ubsan	stephaneyfx: well, you'd want something else for that, of course
2017-01-04 13:12:35	misdreavus	voider1: there's also FnOnce that consumes its captures, but that's probably not what you need in a chat plugin
2017-01-04 13:12:35	voider1	So FnMut also works with Fn?
2017-01-04 13:12:37	ubsan	but it is wanted for stuff like the main crate
2017-01-04 13:12:56	misdreavus	voider1: yeah, all Fn's are also FnMut's
2017-01-04 13:13:46	voider1	misdreavus: You used a where clause, but I can use it without where clause, right?
2017-01-04 13:13:46	voider1	Like I did before.
2017-01-04 13:13:46	◥	dm3 (dm3@moz-rj6.7o9.61.78.IP) has joined #rust-beginners
2017-01-04 13:13:46	stephaneyfx	ubsan, agreed for the main crate. but aren't most crates libraries that should not assume they will be loaded and kept for as long as the process lives?
2017-01-04 13:13:46	misdreavus	voider1: oh yeah, those two varieties are equivalent
2017-01-04 13:13:51	ubsan	stephaneyfx: generally, libraries are loaded for as long as the process lives
2017-01-04 13:13:54	jannick	how do I get the ordering of a f32?
2017-01-04 13:14:33	ubsan	jannick: what do you want?
2017-01-04 13:14:40	stephaneyfx	ubsan, i agree on that too. but by making this assumption, it means libs using lazy_static will leak memory if unloaded
2017-01-04 13:14:50	ubsan	stephaneyfx: this is true
2017-01-04 13:14:52	◣	rembo10 (rembo10@moz-9vjc0f.ab2q.2uic.04f8.2a01.IP) has quit (Quit: ZNC 1.6.3 - http://znc.in)
2017-01-04 13:15:00	ubsan	stephaneyfx: I didn't say it was what you wanted all the time
2017-01-04 13:15:04	ubsan	just a lot of the time
2017-01-04 13:15:10	jannick	I have a list of idx and I want to convert them using a HashMap and sort them by their value
2017-01-04 13:15:10	stephaneyfx	ubsan, i know and agree with you :)
2017-01-04 13:15:17	ubsan	s/a lot/some/
2017-01-04 13:15:31	▷	vandenoever wonders if it's possible to add documentation to classes generated from a macro
2017-01-04 13:15:40	◥	rembo10 (rembo10@moz-4sgf27.codeshy.com) has joined #rust-beginners
2017-01-04 13:15:45	ubsan	vandenoever: quite
2017-01-04 13:15:55	ubsan	vandenoever: although I don't think it's especially useful
2017-01-04 13:15:57	◣	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has quit (Client exited)
2017-01-04 13:15:59	◣	hardenedapple (hardenedapp@moz-l8680p.dsl.pipex.com) has quit (Ping timeout: 121 seconds)
2017-01-04 13:16:12	◥	ppillai (Mibbit@moz-irc.0ac.97.137.IP) has joined #rust-beginners
2017-01-04 13:16:20	mib_mgh91x	Hi there, I'm trying to compile my project and it's throwing up an error when it tries to compile serde (I don't use it directly, assuming a dependency must need it). It's saying "error: unresolved import `core::hash::BuildHasher`"
2017-01-04 13:16:31	ubsan	jannick: code?
2017-01-04 13:16:36	stephaneyfx	would generated classes even end up in the doc at all?
2017-01-04 13:16:40	◥	cjhowe (textual@moz-qpbq0h.va.comcast.net) has joined #rust-beginners
2017-01-04 13:16:49	jannick	ubsan: gns.sort_by(|a| self.scores[a]);
2017-01-04 13:16:53	ubsan	that's what I'd ask ^
2017-01-04 13:17:05	ubsan	jannick: what is the type of gns
2017-01-04 13:17:07	◥	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-04 13:17:14	jannick	ubsan: Vec<usize>
2017-01-04 13:17:23	◣	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has quit (Client exited)
2017-01-04 13:17:25	ubsan	jannick: ah, okay
2017-01-04 13:17:39	ubsan	so self.scores is a Vec<f32>?
2017-01-04 13:17:47	Redrield	Is there something that I can put in a struct if I'm not sure what type the value would be
2017-01-04 13:17:50	Redrield	Similar to Object in java
2017-01-04 13:17:51	ubsan	or a HashMap<usize, f32>
2017-01-04 13:17:58	ubsan	Redrield: Any
2017-01-04 13:18:00	◣	mib_vgh513 (Mibbit@moz-ej6.fg1.58.172.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 13:18:03	jannick	ubsan: it's HashMap<usize,f32>
2017-01-04 13:18:04	ubsan	Box<Any>, for owned fields
2017-01-04 13:18:09	ubsan	jannick: alright, one sec
2017-01-04 13:18:17	voider1	How can I make one field of a struct mutable?
2017-01-04 13:18:18	vandenoever	ubsan: i'm generating code from rdf ontologies, it's useful to copy the rdfs:comment field
2017-01-04 13:18:33	ubsan	voider1: one of the Cells
2017-01-04 13:18:41	voider1	Ah, yeah, I remember.
2017-01-04 13:19:28	ubsan	jannick: gns.sort_by(|fst, snd| self.scores[fst].partial_cmp(self.scores[snd]).unwrap())
2017-01-04 13:19:33	◥	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has joined #rust-beginners
2017-01-04 13:19:44	ubsan	jannick: and make sure to `use std::ord::PartialCmp;`
2017-01-04 13:19:54	ubsan	jannick: this will panic if you have any NaNs
2017-01-04 13:20:06	jannick	ubsan: ok
2017-01-04 13:20:12	◥	hardenedapple (hardenedapp@moz-l8680p.dsl.pipex.com) has joined #rust-beginners
2017-01-04 13:20:17	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-04 13:20:17	mib_mgh91x	has anyone got any idea why my cargo can't find libcore, I've never had to install it separately or anything before
2017-01-04 13:20:39	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 13:20:40	◥	obi_wan (Mibbit@moz-31g.rme.152.107.IP) has joined #rust-beginners
2017-01-04 13:20:40	~steveklabnik	mib_mgh91x: yeah that seems not usual
2017-01-04 13:20:45	◣	avocado (iasoon@moz-037gte.bsj8.an54.a03f.2a02.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:20:45	~steveklabnik	how did you install rust?
2017-01-04 13:20:54	◥	iiddnn__ (iacopodeeno@moz-fcea0a.retail.telecomitalia.it) has joined #rust-beginners
2017-01-04 13:20:54	mib_mgh91x	rustup 
2017-01-04 13:21:04	obi_wan	hello everyone, I have a quick question, can someone explain this compile error to me please? https://play.rust-lang.org/?gist=35ca8327a1682d7204a6947d82a6b2dd&version=stable&backtrace=0
2017-01-04 13:21:08	mib_mgh91x	and I've tried updating to the latest version
2017-01-04 13:22:05	◥	beedaddy (martin@moz-cijo51.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-04 13:22:14	◥	futile (felix@moz-edjue4.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-04 13:22:34	misdreavus	obi_wan: since Box<B> only has the stuff available to B, and the trait B doesn't require or impl Debug, it's not available for the derive(Debug) impl, which just prints out all its fields
2017-01-04 13:22:44	The_8472	obi_wan, Box<B + Debug> ?
2017-01-04 13:23:01	◣	weirdo (Mibbit@moz-56r.ulq.207.104.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 13:23:03	The_8472	or don't use derive(Debug) and write your own implementation instead for A
2017-01-04 13:23:06	misdreavus	obi_wan: it doesn't matter that all the structs there impl Debug, the struct A doesn't know that from the outset
2017-01-04 13:23:13	◥	avocado (iasoon@moz-037gte.bsj8.an54.a03f.2a02.IP) has joined #rust-beginners
2017-01-04 13:23:37	◣	shouya (shouya@moz-ptr.a30.245.114.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:23:50	misdreavus	obi_wan: making B require Debug makes it work too https://is.gd/hSIQmR
2017-01-04 13:23:50	obi_wan	oh ok thanks
2017-01-04 13:24:11	◣	ppillai (Mibbit@moz-irc.0ac.97.137.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 13:24:50	◥	Kreest__ (Kreest@moz-k9dper.pool.invitel.hu) has joined #rust-beginners
2017-01-04 13:26:01	obi_wan	thanks everyone! it works now! :)
2017-01-04 13:26:11	obi_wan	still learning... :P
2017-01-04 13:26:30	misdreavus	it's cool, we all start somewhere (^^)b
2017-01-04 13:27:25	◣	pylbrecht (pylbrecht@moz-rhd91h.leu1.nofh.8109.2a02.IP) has quit (Quit: Segmentation fault (core dumped))
2017-01-04 13:28:12	◥	impetus (impetus@moz-5ts3qt.fuse.net) has joined #rust-beginners
2017-01-04 13:28:38	◣	TheCycoONE (quassel@moz-d4s.1g6.223.162.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-04 13:29:22	mib_mgh91x	does anyone know where libcore is installed by default on windows?
2017-01-04 13:29:58	~steveklabnik	mib_mgh91x: that seems.... strange :(
2017-01-04 13:30:08	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 13:30:28	◣	bjz (bjz@moz-puppgq.tpgi.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 13:30:56	misdreavus	i would expect errors like that if you were cross-compiling, but it sounds like that's probably not the case
2017-01-04 13:31:15	◣	impetus (impetus@moz-5ts3qt.fuse.net) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-04 13:31:51	mib_mgh91x	nope, building on windows for windows unfortunately
2017-01-04 13:32:29	◣	socksy (Mibbit@moz-6hs.5ii.19.178.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 13:33:17	radix-M	mib_mgh91x: and you're using cargo to build?
2017-01-04 13:33:37	◣	junqed (junqed@moz-rlk.8dl.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-04 13:33:42	◥	Hoff (kvirc@moz-84jd08.dhcp.inet.fi) has joined #rust-beginners
2017-01-04 13:34:03	◥	junqed (junqed@moz-rlk.8dl.70.178.IP) has joined #rust-beginners
2017-01-04 13:34:05	◣	solenodica (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:34:10	mib_mgh91x	yep, just running cargo build in the directory root
2017-01-04 13:34:31	radix-M	mib_mgh91x: which project are you building? is it open source? 
2017-01-04 13:34:40	stephaneyfx	mib_mgh91x, what error message do you get exactly?
2017-01-04 13:35:00	◣	handyman (handyman@moz-pdknca.subp.5lka.0645.2601.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-04 13:35:06	mib_mgh91x	.cargo\registry\src\github.com-88ac128001ac3a9a\serde-0.8.21\src\ser\impls.rs:38:24: 38:35 error: unresolved import `core::hash::BuildHasher`. There is no `BuildHasher` in `std::hash` [E0432]
2017-01-04 13:35:17	radix-M	I also use Windows, just wondering if I could help reproduce it.
2017-01-04 13:35:30	mib_mgh91x	ooh hold on, it looks like I have a really old version of cargo
2017-01-04 13:35:45	mib_mgh91x	if I previously installed rust without rustup would that mess with things?
2017-01-04 13:35:49	◥	handyman (handyman@moz-lmhaus.ca.comcast.net) has joined #rust-beginners
2017-01-04 13:35:51	misdreavus	probably, yeah
2017-01-04 13:36:02	radix-M	mib_mgh91x: it might, if you didn't remove it or are otherwise somehow still using that old cargo
2017-01-04 13:36:02	mib_mgh91x	think I have version 1.1 kicking around somewhere, might trying nuking everything
2017-01-04 13:36:10	misdreavus	what does "where cargo" or "where rustc" say?
2017-01-04 13:36:26	~steveklabnik	that's not an issue of not finding core
2017-01-04 13:36:29	◣	pears (pear@moz-e7i.0bb.139.98.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-04 13:36:34	~steveklabnik	that's an issue of the code not matching what's actually in it
2017-01-04 13:36:40	◣	hardenedapple (hardenedapp@moz-l8680p.dsl.pipex.com) has quit (Quit: WeeChat 1.6)
2017-01-04 13:37:00	~steveklabnik	so yeah, i would think that it's finding some older version of libcore somehow
2017-01-04 13:37:06	◥	hansaplast (hansaplast@moz-2ar695.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2017-01-04 13:37:22	~steveklabnik	this makes a little more sense :)
2017-01-04 13:37:42	mib_mgh91x	ok thanks, for the diagnosis guys, I'll have a dig around :)
2017-01-04 13:38:01	◥	adeln (adeln@moz-km939r.dyn.telefonica.de) has joined #rust-beginners
2017-01-04 13:38:05	◣	junqed (junqed@moz-rlk.8dl.70.178.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:39:13	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-04 13:41:12	◣	tuna74 (tuna74@moz-5h9cl2.bredband.comhem.se) has quit (Client exited)
2017-01-04 13:41:17	◥	sneaker (thomas@moz-blt.n21.144.213.IP) has joined #rust-beginners
2017-01-04 13:42:45	◥	Kreest_ (Kreest@moz-k9dper.pool.invitel.hu) has joined #rust-beginners
2017-01-04 13:44:03	◣	nonelement (nonelement@moz-uouu4n.nonelement.com) has quit (Quit: Lost terminal)
2017-01-04 13:44:43	◥	shouya (shouya@moz-ptr.a30.245.114.IP) has joined #rust-beginners
2017-01-04 13:45:05	◣	adeln (adeln@moz-km939r.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2017-01-04 13:45:36	◣	Kreest__ (Kreest@moz-k9dper.pool.invitel.hu) has quit (Ping timeout: 121 seconds)
2017-01-04 13:45:37	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-04 13:45:44	Redrield	Is there a way that I can have common fields that can be inherited by different structs?
2017-01-04 13:45:54	Redrield	Or do I have to write them out for each struct individually
2017-01-04 13:46:00	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 13:46:33	misdreavus	iirc, struct composition is not a thing
2017-01-04 13:46:38	◥	nkr (nkr@moz-p2a.qp2.141.177.IP) has joined #rust-beginners
2017-01-04 13:46:43	◣	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-04 13:46:49	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 13:47:02	◣	mib_mgh91x (Mibbit@moz-jtbggm.pobb.as13285.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 13:47:13	voider1	Can I also implement a custom Error type for lib::Error:SpecificError?
2017-01-04 13:48:17	◣	karinqe (karinqe@moz-ptt.nvt.172.163.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:48:20	◥	solenodica (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-04 13:49:50	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-04 13:50:02	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:50:44	◣	nkr (nkr@moz-p2a.qp2.141.177.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:50:44	◣	cjhowe (textual@moz-qpbq0h.va.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 13:51:54	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 13:52:12	◥	bjz (bjz@moz-pvt9bh.optusnet.com.au) has joined #rust-beginners
2017-01-04 13:52:14	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 13:52:42	◣	shouya (shouya@moz-ptr.a30.245.114.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:53:10	◥	sscott (Thunderbird@moz-bg61s1.res.rr.com) has joined #rust-beginners
2017-01-04 13:53:13	◥	fqtw (me@moz-clnrnl.dynamic.qsc.de) has joined #rust-beginners
2017-01-04 13:53:19	eikke	is there any way to have benchmarks (and 'cargo bench') with the stable channel?
2017-01-04 13:53:45	◣	fqtw (me@moz-clnrnl.dynamic.qsc.de) has quit (Quit: Leaving)
2017-01-04 13:54:39	◣	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 13:55:19	◣	stelarcf (stelarcf@moz-jd7lsk.com) has quit (Client exited)
2017-01-04 13:55:37	◣	dm3 (dm3@moz-rj6.7o9.61.78.IP) has quit (Connection closed)
2017-01-04 13:56:09	◥	dm3 (dm3@moz-rj6.7o9.61.78.IP) has joined #rust-beginners
2017-01-04 13:56:19	◣	zach (zach@moz-cbdjgs.raasta.org) has quit (Quit: leaving)
2017-01-04 13:56:23	wyvern	You can try using https://github.com/japaric/criterion.rs, a third-party crate, though I'm not sure whether it or `bench` does a better job in terms of accuracy, etc
2017-01-04 13:56:45	wyvern	fortunately with no JIT to appease, benchmarking rust is quite straightforward in comparison to, say, Java
2017-01-04 13:56:50	◣	Hoff (kvirc@moz-84jd08.dhcp.inet.fi) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2017-01-04 13:57:04	eikke	I know about criterion-rs (Criterion is my go-to tool in Hs ;)), but I fail to integrate it with 'cargo bench'
2017-01-04 13:57:26	◥	zach (zach@moz-cbdjgs.raasta.org) has joined #rust-beginners
2017-01-04 13:58:08	◥	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-04 13:58:15	eikke	Basically I put some file in my 'benches' directory, it gets compiled, but no 'bench' is discovered. For tthat I guess I need to tag it with #[bench], but that requires a specific function signature using test::Bencher which is in the test crate which is behind a feature flag which is not allowed on the stable channel :(
2017-01-04 13:58:44	wyvern	I just run benches with `rustup run nightly cargo bench`...
2017-01-04 13:58:52	◥	space-wi_ (space-wizar@moz-2vatbh.res.rr.com) has joined #rust-beginners
2017-01-04 13:59:02	◥	blashyrk (Mibbit@moz-4hp94c.dynamic.sbb.rs) has joined #rust-beginners
2017-01-04 14:00:04	◣	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-04 14:00:05	stephaneyfx	voider1, are you thinking of an enum with a variant wrapping lib::Error::SpecificError? if yes, that's doable
2017-01-04 14:00:11	◣	dm3 (dm3@moz-rj6.7o9.61.78.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:00:16	◣	sadboy13 (dbishop@moz-ok6.k7o.229.192.IP) has quit (Quit: WeeChat 1.6)
2017-01-04 14:00:21	blashyrk	hello! can I use numbers in rust source files? I'm having trouble importing modules that way. the reason why I'm doing this is I'm making a NES emulator (I know, I know) and mapper types are distinguished by number codes so I want to make it easy to see which mapper is which number at a glance
2017-01-04 14:00:28	blashyrk	rust source file names*
2017-01-04 14:01:12	misdreavus	yes, but probably not entirely as numbers
2017-01-04 14:01:20	misdreavus	(and probably not starting with numbers)
2017-01-04 14:01:33	voider1	stephaneyfx: Yes, exactly.
2017-01-04 14:02:01	blashyrk	misdreavus: I tried starting with numbers, but it won't work :)
2017-01-04 14:02:13	voider1	stephaneyfx: I get an error while doing that: expected type, found variant.
2017-01-04 14:02:13	◣	Guest27 (textual@moz-0pmpp1.rev.dnainternet.fi) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-04 14:02:34	◣	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has quit (Ping timeout: 121 seconds)
2017-01-04 14:02:37	stephaneyfx	voider1, may you paste some code on the playground?
2017-01-04 14:02:39	Redrield	hm...
2017-01-04 14:02:40	◣	xpe (textual@moz-0ln4n1.ei8p.t9hi.0644.2601.IP) has quit (Quit: My iMac has gone to sleep. ZZZzzz…)
2017-01-04 14:02:50	Redrield	Is there any way to get a u16 from a [u8; 2] other than using unsafe methods
2017-01-04 14:03:01	stephaneyfx	blashyrk, just like variables, you may need to start with at least one letter
2017-01-04 14:03:10	Redrield	Cause it looks like I'm doing something wrong. A value that should be 25565 is coming out 56675
2017-01-04 14:03:11	misdreavus	blashyrk: yeah, so you'll have to do something like "mapper_[num].rs" and "apu_2a03.rs" or something
2017-01-04 14:03:32	◥	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has joined #rust-beginners
2017-01-04 14:03:32	blashyrk	misdreavus, stephaneyfx: thanks!
2017-01-04 14:03:59	muskox	Redrield: there's no safe bitshift?
2017-01-04 14:04:05	stephaneyfx	Redrield, there is but you need to know the endianness
2017-01-04 14:04:30	◣	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:04:35	Redrield	muskox: The only method I found online is mem::transmute
2017-01-04 14:04:38	voider1	https://is.gd/mcvemT I was modifying it.
2017-01-04 14:04:42	eikke	Redrield: depends on byte-order I guess ;) Something like https://docs.rs/byteorder/1.0.0/byteorder/trait.ByteOrder.html#tymethod.read_u16 may be of help
2017-01-04 14:04:42	voider1	stephaneyfx: ^
2017-01-04 14:04:42	Redrield	Might be that I didn't dig far enough though
2017-01-04 14:04:55	ubsan	muskox: Redrield: wtf are you all talking about
2017-01-04 14:04:57	jannick	how do I remove the bottom half from a vector in a nice way?
2017-01-04 14:04:58	ubsan	<< >>
2017-01-04 14:05:04	ubsan	playbot: 1 << 2
2017-01-04 14:05:07	⚡	Notice(playbot): 4
2017-01-04 14:05:12	muskox	^
2017-01-04 14:05:23	ubsan	Redrield: of course mem::transmute is not the only method...
2017-01-04 14:06:05	eikke	playbot: ((0xff: u8) as u16 << 8)
2017-01-04 14:06:07	⚡	Notice(playbot): error: expected type, found `8`
2017-01-04 14:06:07	⚡	Notice(playbot):   --> <anon>:10:31
2017-01-04 14:06:07	⚡	Notice(playbot):    |
2017-01-04 14:06:07	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2hSbO9p)
2017-01-04 14:06:16	stephaneyfx	voider1, could you paste the error message after the code?
2017-01-04 14:06:39	◣	bjz (bjz@moz-pvt9bh.optusnet.com.au) has quit (Connection closed)
2017-01-04 14:07:42	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-04 14:07:49	ubsan	playbot: (0xffu8 as u16) << 8
2017-01-04 14:07:51	⚡	Notice(playbot): 65280
2017-01-04 14:08:05	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 14:08:27	◥	mib_lqf5ss (Mibbit@moz-c16ck8.rev.vodafone.pt) has joined #rust-beginners
2017-01-04 14:08:32	voider1	stephaneyfx: expected type, found variant `reqwest::Error::Serialize`
2017-01-04 14:09:08	◣	kmein (kmein@moz-q09pe6.dyn.telefonica.de) has quit (Quit: Konversation terminated!)
2017-01-04 14:09:34	◥	shouya (shouya@moz-ptr.a30.245.114.IP) has joined #rust-beginners
2017-01-04 14:09:47	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 14:10:00	misdreavus	voider1: ah, you can't treat an enum variant as its own type
2017-01-04 14:11:18	◣	Sergio_ (uid203766@moz-h8mp44.stonehaven.irccloud.com) has quit (Quit: Connection closed for inactivity)
2017-01-04 14:11:30	misdreavus	voider1: if you want that variant to be treated specially, you'll have to destructure the enum in the From<reqwest::Error> impl and make the proper variant as necessary
2017-01-04 14:11:52	◥	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-04 14:11:58	misdreavus	s/destructure/match on
2017-01-04 14:11:59	voider1	Alright.
2017-01-04 14:12:07	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:13:40	◣	shouya (shouya@moz-ptr.a30.245.114.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:15:16	voider1	http://prntscr.com/drl149 this doesn't work 
2017-01-04 14:15:41	misdreavus	Serialize(..)
2017-01-04 14:16:25	voider1	(..)?
2017-01-04 14:16:32	misdreavus	"ignore the stuff inside the struct"
2017-01-04 14:16:43	misdreavus	er, enum variant, but yeah
2017-01-04 14:16:53	voider1	Oh, that works.
2017-01-04 14:16:57	voider1	I didn't know about (..)
2017-01-04 14:17:21	◣	iiddnn__ (iacopodeeno@moz-fcea0a.retail.telecomitalia.it) has quit (Client exited)
2017-01-04 14:17:21	misdreavus	yeah, it's like _ but for any number of fields
2017-01-04 14:19:38	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 14:21:18	◣	solenodica (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:21:31	◥	undeadleech (undeadleech@moz-jf98c5.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-04 14:23:04	◥	Zane (Mibbit@moz-1jrf9a.dyn.optonline.net) has joined #rust-beginners
2017-01-04 14:23:09	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 14:23:25	Zane	Can i have a trait require a variable?
2017-01-04 14:24:02	misdreavus	unfortunately no, "associated fields" are not a thing
2017-01-04 14:24:05	◥	onix (Mibbit@moz-jtbggm.pobb.as13285.net) has joined #rust-beginners
2017-01-04 14:24:09	jannick	is racer really the best there is, it seems even given all the type information you provide it's rarely able to give suggestions
2017-01-04 14:24:27	◣	Zane (Mibbit@moz-1jrf9a.dyn.optonline.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 14:24:47	Trangar	Hopefully soon
2017-01-04 14:26:49	◣	the_2nd (the_2nd@moz-v87043.sijg.c1oi.8070.2a02.IP) has quit (Quit: Leaving)
2017-01-04 14:26:59	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 14:27:34	◥	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has joined #rust-beginners
2017-01-04 14:29:29	eikke	wyvern: fwiw: criterion.rs doesn't work with stable channel either because its dep, criterion-stats, requires feature flags...
2017-01-04 14:29:35	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-04 14:29:56	fwiw	:)
2017-01-04 14:30:07	◥	kulshrax (kulshrax@moz-1aa3mr.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-04 14:30:37	◥	hackebeilchen (Peter@moz-ovp14u.ip-addr.inexio.net) has joined #rust-beginners
2017-01-04 14:31:29	◥	junqed (junqed@moz-rlk.8dl.70.178.IP) has joined #rust-beginners
2017-01-04 14:31:52	◣	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:32:03	◣	sscott (Thunderbird@moz-bg61s1.res.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-04 14:32:33	◣	handyman (handyman@moz-lmhaus.ca.comcast.net) has quit (A TLS packet with unexpected length was received.)
2017-01-04 14:32:34	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-04 14:33:07	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-04 14:33:26	◥	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has joined #rust-beginners
2017-01-04 14:33:34	LambdaComplex	I can't seem to get this to work http://docs.piston.rs/conrod/conrod/backend/piston/window/index.html#swap-to-another-window-back-end
2017-01-04 14:33:48	LambdaComplex	The error I'm getting is the trait `conrod::backend::piston::window::OpenGLWindow` is not implemented for `sdl2_window::Sdl2Window`
2017-01-04 14:33:53	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2017-01-04 14:34:07	LambdaComplex	Actually, getting an error like that for a few traits
2017-01-04 14:34:31	◣	junqed (junqed@moz-rlk.8dl.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-04 14:34:33	LambdaComplex	Maybe I need to bring the traits into scope?
2017-01-04 14:35:15	◣	avocado (iasoon@moz-037gte.bsj8.an54.a03f.2a02.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:35:47	panicbit	Probably not, no
2017-01-04 14:36:38	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:37:56	panicbit	LambdaComplex: You are probably using a different window crate than sdl2_window
2017-01-04 14:37:56	◣	sqwishy (sqwishy@moz-ifh.q9a.172.69.IP) has quit (Connection closed)
2017-01-04 14:38:05	◣	moriarty (moriarty@moz-q4vb8g.eu) has quit (Ping timeout: 121 seconds)
2017-01-04 14:38:26	◥	sqwishy (sqwishy@moz-ifh.q9a.172.69.IP) has joined #rust-beginners
2017-01-04 14:38:41	◥	moriarty (moriarty@moz-0do.8ua.47.78.IP) has joined #rust-beginners
2017-01-04 14:38:47	panicbit	i.e. that some crates are compiled twice
2017-01-04 14:38:52	◣	m94asr (sck@moz-fiq6cs.swsch.de) has quit (Ping timeout: 121 seconds)
2017-01-04 14:39:01	panicbit	with different versions
2017-01-04 14:39:08	◣	beedaddy (martin@moz-cijo51.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-04 14:39:16	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 14:39:17	LambdaComplex	panicbit: I think you just lost me
2017-01-04 14:39:26	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 14:39:44	◣	sebk (sebk@moz-05nbdi.pools.vodafone-ip.de) has quit (Quit: Konversation terminated!)
2017-01-04 14:39:51	panicbit	LambdaComplex: do a `cargo clean` and rebuilt your project and look at the `Compiling crate_xyz` output
2017-01-04 14:40:00	◣	blashyrk (Mibbit@moz-4hp94c.dynamic.sbb.rs) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 14:40:11	panicbit	If I am correct there should be dublicate lines
2017-01-04 14:40:17	panicbit	duplicate*
2017-01-04 14:40:23	◣	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-04 14:40:23	panicbit	(they only differ in the version number)
2017-01-04 14:40:53	◥	m94asr (sck@moz-fiq6cs.swsch.de) has joined #rust-beginners
2017-01-04 14:40:59	◣	bkn (bkn@moz-rdn.5rl.148.204.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:42:39	LambdaComplex	panicbit: Yeah, there are a few
2017-01-04 14:42:47	panicbit	which ones?
2017-01-04 14:45:05	LambdaComplex	panicbit: pistoncore-input pistoncore-window pistoncore-event_loop pistoncore-glutin_window
2017-01-04 14:45:07	panicbit	Anyways, you'll have to somehow make sure that the involved crates only exist once. Some crates export their dependencies to achieve that.
2017-01-04 14:45:15	◣	daschl (daschl@moz-kvc.ipu.178.62.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 14:45:24	panicbit	Sometimes a simple `cargo update` can do the job
2017-01-04 14:45:42	panicbit	if not then you have to adapt your version numbers in the Cargo.toml 
2017-01-04 14:46:01	panicbit	Or I think use the [replace] section to fix shit
2017-01-04 14:46:24	LambdaComplex	Honestly, it's quite possible I have extraneous dependencies in my Cargo.toml due to not knowing what re-exports what
2017-01-04 14:46:29	◣	hansaplast (hansaplast@moz-2ar695.ve71.89v9.120b.2a02.IP) has quit (Connection closed)
2017-01-04 14:46:49	panicbit	I don't know about tha specifics for piston either
2017-01-04 14:47:06	▷	LambdaComplex comments some stuff out
2017-01-04 14:47:25	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-04 14:47:31	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 14:47:41	panicbit	LambdaComplex: Take note of the duplicate versions and try to match them somehow
2017-01-04 14:48:00	panicbit	Is the best tip I'm able to give ATM :(
2017-01-04 14:48:30	◥	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has joined #rust-beginners
2017-01-04 14:48:40	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 14:50:02	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 14:50:28	◣	Akien (akien@moz-3ub1lc.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2017-01-04 14:50:37	LambdaComplex	panicbit: here's the full error btw http://sprunge.us/WeUV
2017-01-04 14:50:48	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 14:51:32	LambdaComplex	I still don't get why it's saying those traits aren't implemented...I'm pretty sure they are
2017-01-04 14:51:35	LambdaComplex	https://github.com/PistonDevelopers/sdl2_window/blob/master/src/lib.rs#L416
2017-01-04 14:51:42	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:51:57	◥	avocado (iasoon@moz-8i7.eqq.131.109.IP) has joined #rust-beginners
2017-01-04 14:52:07	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 14:52:36	◣	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:53:58	◥	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has joined #rust-beginners
2017-01-04 14:54:04	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 14:54:41	◥	rkruppe (chatzilla@moz-c6skn4.unity-media.net) has joined #rust-beginners
2017-01-04 14:57:39	◣	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has quit (Quit: Leaving)
2017-01-04 14:58:20	@mbrubeck	LambdaComplex: Do you have multiple versions of `pistoncore-window` in your dependency graph?  (Search for it in Cargo.lock.)
2017-01-04 14:58:28	@mbrubeck	LambdaComplex: Looks like conrod hasn't been updated to the latest version yet
2017-01-04 14:59:14	◥	blashyrk (Mibbit@moz-4hp94c.dynamic.sbb.rs) has joined #rust-beginners
2017-01-04 14:59:15	LambdaComplex	mbrubeck: Yes, I'm finding mentions of both 0.23.0 and 0.24.0
2017-01-04 14:59:30	◣	onix (Mibbit@moz-jtbggm.pobb.as13285.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 15:00:06	◥	sscott (Thunderbird@moz-bg61s1.res.rr.com) has joined #rust-beginners
2017-01-04 15:00:13	panicbit	LambdaComplex: The problem is that the crate implements it for a different version of the type
2017-01-04 15:00:21	◥	trkl (trklr@moz-jqd.kuh.172.128.IP) has joined #rust-beginners
2017-01-04 15:00:36	LambdaComplex	And what's the solution?
2017-01-04 15:00:40	panicbit	Trait A from v0.0.1 is different from Trait A from v0.0.2
2017-01-04 15:00:47	panicbit	Matching up the versions...
2017-01-04 15:00:55	panicbit	It's a pain
2017-01-04 15:03:22	@mbrubeck	LambdaComplex: Perhaps go back to sdl2_window 0.36.0, which uses pistoncore-window 0.23.0 (same as the latest conrod)
2017-01-04 15:03:37	@mbrubeck	LambdaComplex: Alternately, patch conrod to use pistoncore-window 0.24.0
2017-01-04 15:03:46	◣	ghosss (textual@moz-rr8npu.fios.verizon.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-04 15:04:07	LambdaComplex	mbrubeck: Dare I ask what that would involve?
2017-01-04 15:04:32	blashyrk	I'm getting a `non-exhaustive patterns: `_` not covered` even though I've covered all ranges 0...FFFF in a u16 :( is there a way for this not to happen? I find it ugly to put match against a dummy "rest" of the possible ranges 
2017-01-04 15:05:15	LambdaComplex	mbrubeck: Hm http://sprunge.us/Ddbh
2017-01-04 15:05:31	panicbit	mbrubeck: Couldn't you use [replace] in the Cargo.toml to do that?
2017-01-04 15:05:44	LambdaComplex	mbrubeck: Rolled sdl2_window back to 0.36.0 and that's what I'm getting now
2017-01-04 15:05:54	@mbrubeck	LambdaComplex: Patching conrod? It might be as simple as bumping the number in its Cargo.toml file.  It depends on whether the new pistoncore-window has any breaking changes that affect Conrod's code...
2017-01-04 15:06:30	SIGILL	Is there a way to read from a `r: Read` without actually consuming it? I need to peek inside the first 10 bytes of `r` and then hand it over to another function. I know of `std::io::Seek`, but maybe there's a simple way without requiring `Seek`
2017-01-04 15:06:32	@mbrubeck	LambdaComplex: Does your Cargo.lock still have multiple versions of any crate?
2017-01-04 15:06:54	@mbrubeck	SIGILL: https://doc.rust-lang.org/std/io/trait.Read.html#method.by_ref
2017-01-04 15:07:44	◥	sebasmagri (user@moz-5t1.qu8.124.201.IP) has joined #rust-beginners
2017-01-04 15:07:56	@mbrubeck	SIGILL: I think you'll still need to use Seek to rewind the reader to its original position, though.
2017-01-04 15:09:06	SIGILL	mbrubeck: I see, good to know - thanks!
2017-01-04 15:09:21	◥	machuga (machuga@moz-kuh.odq.223.162.IP) has joined #rust-beginners
2017-01-04 15:09:29	◥	TechnoCrunch (TechnoCrunc@moz-ant.ip3.100.101.IP) has joined #rust-beginners
2017-01-04 15:09:35	◥	CoderPuppy (cpup@moz-m24.69g.218.32.IP) has joined #rust-beginners
2017-01-04 15:09:57	LambdaComplex	mbrubeck: For piston stuff, I don't think so
2017-01-04 15:09:57	◥	davs (davs@moz-due.96s.131.95.IP) has joined #rust-beginners
2017-01-04 15:10:52	◥	shouya (shouya@moz-ptr.a30.245.114.IP) has joined #rust-beginners
2017-01-04 15:11:22	◣	mib_lqf5ss (Mibbit@moz-c16ck8.rev.vodafone.pt) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 15:13:16	◣	cpup (cpup@moz-cjd.b21.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:13:38	@mbrubeck	LambdaComplex: Hmm, as far as I can tell conrod only implements that trait for conrod::backend::piston::Window<GlutinWindow>: https://github.com/PistonDevelopers/conrod/blob/master/src/backend/piston/window.rs#L221-L228
2017-01-04 15:15:18	◣	davs (davs@moz-due.96s.131.95.IP) has quit (Connection closed)
2017-01-04 15:15:45	@mbrubeck	LambdaComplex: Changing that impl to be generic like this one would let it work with Sdl2Window, I think? https://github.com/PistonDevelopers/conrod/blob/master/src/backend/piston/window.rs#L116-L117
2017-01-04 15:16:06	◣	jannick (jannick@moz-eu0lcm.siteimprove.com) has quit (Ping timeout: 121 seconds)
2017-01-04 15:16:18	LambdaComplex	mbrubeck: I'm not seeing any mention of GlutinWindow in that first thing you linked though
2017-01-04 15:16:43	◥	jannick (jannick@moz-eu0lcm.siteimprove.com) has joined #rust-beginners
2017-01-04 15:16:51	◥	davs (davs@moz-due.96s.131.95.IP) has joined #rust-beginners
2017-01-04 15:16:54	◣	shouya (shouya@moz-ptr.a30.245.114.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:16:54	◣	davs (davs@moz-due.96s.131.95.IP) has quit (Connection closed)
2017-01-04 15:16:54	LambdaComplex	Or is Window with no type automatically a GlutinWindow?
2017-01-04 15:17:15	@mbrubeck	LambdaComplex: It just says `Window`, and `Window` has a default parameter: `pub struct Window<W: BasicWindow = GlutinWindow>`
2017-01-04 15:18:51	LambdaComplex	mbrubeck: hm, i might be able to get the event loop a different way
2017-01-04 15:18:54	LambdaComplex	(i think)
2017-01-04 15:18:57	◣	sebasmagri (user@moz-5t1.qu8.124.201.IP) has quit (Quit: ERC (IRC client for Emacs 25.1.1))
2017-01-04 15:20:24	◣	burntsushi (burntsushi@moz-rhb6m6.fios.verizon.net) has quit (Ping timeout: 121 seconds)
2017-01-04 15:20:39	radix-M	so I've got a library which I want to optionally depend on Serde to derive Serialize and Deserialize for my data structures... I can't figure out how to do that, since there's no top-level item for me to put a #[cfg()] on
2017-01-04 15:20:47	◥	sebasmagri (user@moz-5t1.qu8.124.201.IP) has joined #rust-beginners
2017-01-04 15:21:03	◣	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has quit (Quit: Leaving)
2017-01-04 15:21:54	LambdaComplex	mbrubeck: Okay, I can still get the event loop by using event_loop::Events
2017-01-04 15:22:16	◥	davs (davs@moz-due.96s.131.95.IP) has joined #rust-beginners
2017-01-04 15:22:23	@mbrubeck	radix-M: #[cfg_attr] might help, e.g. #[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
2017-01-04 15:22:23	LambdaComplex	mbrubeck: http://sprunge.us/EeGI?rust
2017-01-04 15:22:26	◣	davs (davs@moz-due.96s.131.95.IP) has quit (Connection closed)
2017-01-04 15:22:44	◣	jbradberry (jrb@moz-kpp3mi.biz.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-04 15:23:00	radix-M	mbrubeck: oh rad, that looks like exactly what I want... 
2017-01-04 15:24:02	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 15:24:12	◣	poolish (bread@moz-75o.mno.16.70.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:24:14	◥	bread|laptop (bread@moz-vi643c.east.myfairpoint.net) has joined #rust-beginners
2017-01-04 15:24:18	◣	sscott (Thunderbird@moz-bg61s1.res.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-04 15:25:46	◣	manuel_ (manuel@moz-44m.14s.6.209.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:26:22	◥	fqtw (me@moz-clnrnl.dynamic.qsc.de) has joined #rust-beginners
2017-01-04 15:26:33	◣	futile (felix@moz-edjue4.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2017-01-04 15:27:33	◥	poolish (bread@moz-mgr.uql.222.64.IP) has joined #rust-beginners
2017-01-04 15:27:33	◥	davs (davs@moz-due.96s.131.95.IP) has joined #rust-beginners
2017-01-04 15:27:45	◣	davs (davs@moz-due.96s.131.95.IP) has quit (Connection closed)
2017-01-04 15:28:42	◣	bread|laptop (bread@moz-vi643c.east.myfairpoint.net) has quit (Ping timeout: 121 seconds)
2017-01-04 15:29:32	◥	bushidoboy (dbishop@moz-kefqnd.bish0p.org) has joined #rust-beginners
2017-01-04 15:29:41	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 15:30:47	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 15:31:57	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 15:32:02	◣	sneaker (thomas@moz-blt.n21.144.213.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:32:29	◥	montanonic (nicholas@moz-4ed.os7.216.209.IP) has joined #rust-beginners
2017-01-04 15:32:34	◥	davs (davs@moz-due.96s.131.95.IP) has joined #rust-beginners
2017-01-04 15:33:10	◥	handyman (handyman@moz-r22a5e.subp.5lka.0645.2601.IP) has joined #rust-beginners
2017-01-04 15:33:40	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-04 15:34:09	◥	burntsushi (burntsushi@moz-rhb6m6.fios.verizon.net) has joined #rust-beginners
2017-01-04 15:34:10	⚡	Mode #rust-beginners [+o burntsushi] by ChanServ
2017-01-04 15:35:24	◥	makoLume (mako@moz-rmueac.flip.co.nz) has joined #rust-beginners
2017-01-04 15:35:45	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2017-01-04 15:36:42	◣	montanonic (nicholas@moz-4ed.os7.216.209.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:37:36	◥	fl3 (fl3__@moz-d45.soe.108.185.IP) has joined #rust-beginners
2017-01-04 15:37:39	◣	handyman (handyman@moz-r22a5e.subp.5lka.0645.2601.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:37:44	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:37:48	◣	SilverKey (SilverKey@moz-pf5aar.biz.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-04 15:38:07	◣	makoLine (mako@moz-o2p8h1.flip.co.nz) has quit (Ping timeout: 121 seconds)
2017-01-04 15:38:14	◣	fl3 (fl3__@moz-d45.soe.108.185.IP) has quit (Quit: Leaving)
2017-01-04 15:38:26	◣	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:38:34	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 15:38:41	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Connection closed)
2017-01-04 15:38:58	◥	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has joined #rust-beginners
2017-01-04 15:39:06	◥	makoLime (mako@moz-rmueac.flip.co.nz) has joined #rust-beginners
2017-01-04 15:40:08	◣	makoLume (mako@moz-rmueac.flip.co.nz) has quit (Ping timeout: 121 seconds)
2017-01-04 15:40:12	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 15:41:08	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 15:41:26	◣	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has quit (Client exited)
2017-01-04 15:42:14	◥	manuel_ (manuel@moz-5eskqg.ma.comcast.net) has joined #rust-beginners
2017-01-04 15:43:08	◥	cjhowe (textual@moz-qpbq0h.va.comcast.net) has joined #rust-beginners
2017-01-04 15:43:18	◥	afshinmeh (textual@moz-ge016q.hgkk.s1m0.8084.2a02.IP) has joined #rust-beginners
2017-01-04 15:43:31	◣	Durz0 (Durzo@moz-n40fdt.dynamic.kabel-deutschland.de) has quit (Ping timeout: 121 seconds)
2017-01-04 15:44:02	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 15:44:14	afshinmeh	hey guys, I just started using Rust a few days ago. what I want to do is building a simple HTTP server using 1.x (just to send a string to the client, that's it)
2017-01-04 15:44:25	◣	cjhowe (textual@moz-qpbq0h.va.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 15:44:50	afshinmeh	I tried to search on Github / Gists / Stackoverflow a little bit but some of responses are old and can't be used for the latest version of Rust.
2017-01-04 15:45:07	afshinmeh	Is there any tutorial to use tcp server in Rust? Thanks.
2017-01-04 15:45:38	◣	oln (smuxi@moz-h6kap0.customer.cdi.no) has quit (Connection closed)
2017-01-04 15:46:43	◥	jinshil (jinshl@moz-76n.0jp.94.115.IP) has joined #rust-beginners
2017-01-04 15:47:08	◣	vandenoever (oever@moz-8onu2e.adsl-surfen.hetnet.nl) has quit (Ping timeout: 121 seconds)
2017-01-04 15:47:21	insaneinside	afshinmeh: https://doc.rust-lang.org/std/net/struct.TcpListener.html might help (I've yet to do any network programming with Rust, so can't really help much with it)
2017-01-04 15:48:04	◥	Durz0 (Durzo@moz-n40fdt.dynamic.kabel-deutschland.de) has joined #rust-beginners
2017-01-04 15:48:05	~steveklabnik	afshinmeh: you should also know that the standard library is currently synchronous
2017-01-04 15:48:25	~steveklabnik	but the "tokio" group of crates is providing async versions, and is _just about_ to have an initial release with nice docs, etc
2017-01-04 15:48:47	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-04 15:48:52	◣	jannick (jannick@moz-eu0lcm.siteimprove.com) has quit (Ping timeout: 121 seconds)
2017-01-04 15:49:20	◥	robertbalicki (robertbalic@moz-6mr26d.res.rr.com) has joined #rust-beginners
2017-01-04 15:49:53	@mbrubeck	afshinmeh: https://www.reddit.com/r/rust/comments/3id4c0/making_a_dictionary_server_with_rust/ shows how to write a really simple TCP server using the Rust standard library
2017-01-04 15:50:19	@mbrubeck	afshinmeh: and https://pyfisch.org/blog/tokio-echo-server/ shows how to do an async one with Tokio
2017-01-04 15:51:46	◥	cjhowe (textual@moz-qpbq0h.va.comcast.net) has joined #rust-beginners
2017-01-04 15:51:54	afshinmeh	YOU GUYS ARE AWESOME!
2017-01-04 15:52:17	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-04 15:52:18	afshinmeh	I've heard that Rust community is cool! thank you so much.
2017-01-04 15:52:29	~steveklabnik	:)
2017-01-04 15:52:31	~steveklabnik	we try
2017-01-04 15:53:04	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 15:53:11	◣	robertbalicki (robertbalic@moz-6mr26d.res.rr.com) has quit (Connection closed)
2017-01-04 15:53:15	afshinmeh	I'm the developer of Intro.js and some other JS / Node.js libs but I joined the community last week and I want to create the lodash + momentjs for Rust. 
2017-01-04 15:53:21	⚡	jntrnr_vacation is now known as jntrnr
2017-01-04 15:53:49	afshinmeh	I will definitely try that tomorrow. thank you guys. 
2017-01-04 15:53:55	Hail_Spacecake	afshinmeh: what would the lodash for rust look like to you?
2017-01-04 15:54:00	Hail_Spacecake	I'm not familiar with momentjs
2017-01-04 15:54:13	june	lodash is unnecessary, Rust has a real stdlib :)
2017-01-04 15:54:21	~steveklabnik	ironically
2017-01-04 15:54:23	~steveklabnik	!crate lodash
2017-01-04 15:54:24	rustbot	lodash (0.1.0) - Simple debugging tool -> https://crates.io/crates/lodash <https://docs.rs/crate/lodash>
2017-01-04 15:54:27	~steveklabnik	.... is not lodash
2017-01-04 15:55:01	june	!crate moment
2017-01-04 15:55:01	rustbot	Crate 'moment' does not exist.
2017-01-04 15:55:02	afshinmeh	well, what I had in mind was creating a simple debug / logging tool like debug in npm. 
2017-01-04 15:55:16	◣	srwalker101 (srwalker101@moz-i5q.7te.223.2.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-04 15:55:23	~steveklabnik	afshinmeh: neat! well, we're here to help :)
2017-01-04 15:55:32	◣	rkruppe (chatzilla@moz-c6skn4.unity-media.net) has quit (Quit: ChatZilla 0.9.93 [Firefox 50.1.0/20161213225203])
2017-01-04 15:55:43	afshinmeh	say lodash!("hello world")
2017-01-04 15:55:58	afshinmeh	and get > 1ms "hello world" 
2017-01-04 15:56:16	afshinmeh	this is debug in npm: https://www.npmjs.com/package/debug
2017-01-04 15:56:22	◣	Durz0 (Durzo@moz-n40fdt.dynamic.kabel-deutschland.de) has quit (Ping timeout: 121 seconds)
2017-01-04 15:56:25	◥	moisture (moisturest@moz-ssjjch.co.comcast.net) has joined #rust-beginners
2017-01-04 15:56:29	◣	kulshrax (kulshrax@moz-1aa3mr.8r4b.grs8.010d.2620.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-04 15:56:40	◣	lakin (lakin@moz-37rktg.abhsia.telus.net) has quit (Quit: leaving)
2017-01-04 15:57:21	afshinmeh	sorry if the idea is terrible or not useful. I'm still learning. 
2017-01-04 15:57:54	◥	jannick (jannick@moz-eu0lcm.siteimprove.com) has joined #rust-beginners
2017-01-04 15:58:48	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-04 16:00:01	june	Why is it called lodash though
2017-01-04 16:01:09	The_8472	afshinmeh, write a test, have your ide recompile and test as you type.
2017-01-04 16:01:21	The_8472	that's about the quickest iteration you can get atm. there's no repl
2017-01-04 16:01:52	◥	shouya (shouya@moz-ptr.a30.245.114.IP) has joined #rust-beginners
2017-01-04 16:01:52	The_8472	https://github.com/murarth/rusti
2017-01-04 16:01:55	The_8472	maybe there is
2017-01-04 16:03:26	◣	machuga (machuga@moz-kuh.odq.223.162.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 16:03:27	◣	eibwen (eibwen@moz-tfu661.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-04 16:05:09	◥	sethlopez (sethlopez@moz-69u7c3.res.rr.com) has joined #rust-beginners
2017-01-04 16:06:46	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Quit: Leaving...)
2017-01-04 16:07:05	◥	kulshrax (kulshrax@moz-1aa3mr.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-04 16:08:01	◣	voider1 (voider1@moz-cnrpdc.dynamic.ziggo.nl) has quit (A TLS packet with unexpected length was received.)
2017-01-04 16:09:51	◣	shouya (shouya@moz-ptr.a30.245.114.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 16:10:07	◥	voider1 (voider1@moz-cnrpdc.dynamic.ziggo.nl) has joined #rust-beginners
2017-01-04 16:10:24	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 16:13:22	◥	mindCrime (prhodes@moz-gsh24b.dyn6.twc.com) has joined #rust-beginners
2017-01-04 16:13:46	voider1	How can I make a Cell<T> threadsafe?
2017-01-04 16:14:39	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-04 16:15:25	◣	martianwars (uid124042@moz-1flne0.brockwell.irccloud.com) has quit (Quit: Connection closed for inactivity)
2017-01-04 16:15:27	ehd	in this declaration: `pub struct Border<'a>(&'a Region<'a>, &'a Region<'a>, Terrain);` am I saying that the 'a lifetime in Region must be valid for exactly the same lifetime as the borrow?
2017-01-04 16:15:35	ehd	or am I setting a lower bound on the lifetime?
2017-01-04 16:16:04	muskox	The latter
2017-01-04 16:16:26	muskox	You're saying that the Regions must live at least as long as the Border
2017-01-04 16:16:33	◥	roblqblq (Mibbit@moz-7ldhlg.lv.cox.net) has joined #rust-beginners
2017-01-04 16:16:38	⚡	roblqblq is now known as roblabla
2017-01-04 16:17:07	@mbrubeck	voider1: If the content of the Cell is a single bool or pointer or usize, then use an atomic type, e.g. AtomicUsize instead of Cell<usize>: https://doc.rust-lang.org/std/sync/atomic/
2017-01-04 16:17:13	ehd	muskox am I saying they both are *required* to live the same amount of time?
2017-01-04 16:17:20	@mbrubeck	voider1: If not, then replace Cell<T> with Mutex<T> or RwLock<T>
2017-01-04 16:18:01	voider1	mbrubeck: I was using the Cell because I can emulate mutability in a struct.
2017-01-04 16:18:30	mada	is rust defined by some "standard" or something of the sort?
2017-01-04 16:18:40	roblabla	hello, I have a small problem. I would like to clone a Filter iterator. I see that std::iter::Filter implements Clone only when I and P (the predicate function) implements clone. Thing is, how can I make my closure implement Clone ?
2017-01-04 16:18:46	◣	fuine (fuine@moz-ad6rhl.dynamic-ww-09.vectranet.pl) has quit (Quit: Wychodzi)
2017-01-04 16:18:55	voider1	mbrubeck: Are the contents of a Mutex mutable?
2017-01-04 16:19:03	mada	like.. what's in std::, and that kind of stuff
2017-01-04 16:19:04	@mbrubeck	mada: Not really, though new features are specified at https://github.com/rust-lang/rfcs/
2017-01-04 16:19:25	ehd	specifically, I'm wondering if I need to declare separate lifetimes for the borrow and for the Region type itself
2017-01-04 16:19:32	mada	mbrubeck: thanks. Just a doubt I had while reading a book :)
2017-01-04 16:19:35	@mbrubeck	mada: https://doc.rust-lang.org/reference.html used to be a sort of spec for the language but it was never complete, and has fallen behind. There's an effort being started to bring it back up to date.
2017-01-04 16:19:35	Aaronepower	mada Currently no, there is no rust standard document. There is a language reference, but that is what the rustc team says it is.
2017-01-04 16:20:07	mada	The language seems to evolve pretty fast at this point though, isn't that a bit risky?
2017-01-04 16:20:32	@mbrubeck	mada: There are also some academic researches working on formal semantics for Rust, and some Rust developers working on a formal memory model
2017-01-04 16:20:40	@mbrubeck	*researchers
2017-01-04 16:20:44	roblabla	Most changes are carefully designed through an RFC first, so it's not that risky
2017-01-04 16:21:08	◥	snowe__ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-04 16:21:08	◥	khuey (khuey@moz-pd2jti.ca.comcast.net) has joined #rust-beginners
2017-01-04 16:21:13	mada	ah, I hadn't even tought of those. I was mostly thinking of the stuff in the std lib of a language
2017-01-04 16:21:23	◥	xpe (textual@moz-0ln4n1.ei8p.t9hi.0644.2601.IP) has joined #rust-beginners
2017-01-04 16:21:25	Aaronepower	mada What is the risk? The language is still new and there isn't multiple competing compilers.
2017-01-04 16:21:31	@mbrubeck	mada: There's definitely some risk, epsecially once we have more than one implementation of the language.
2017-01-04 16:21:34	◣	cjhowe (textual@moz-qpbq0h.va.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 16:22:05	mada	Aaronepower: for example, I start coding my big app that depends on certain functionality provided by the std lib. But then X thing is moved to a crate so that it can evolve on its own
2017-01-04 16:22:23	◣	afshinmeh (textual@moz-ge016q.hgkk.s1m0.8084.2a02.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-04 16:22:25	roblabla	mada: nothing will be removed from stdlib without a major bump in rust version
2017-01-04 16:22:35	roblabla	and a major bump in rust version won't happen in the forseeable future
2017-01-04 16:22:43	@mbrubeck	mada: Rust won't make breaking changes in the language or standard library; https://github.com/rust-lang/rfcs/blob/master/text/1105-api-evolution.md specifies the exact forward-compatibility guarantees
2017-01-04 16:22:45	guzzlefry	Is there a channel for the Intellij Rust plugin?
2017-01-04 16:23:16	mada	right, that happened with 1.0 correct?
2017-01-04 16:23:32	mada	(no changes to the stdlib without major-version bump)
2017-01-04 16:23:55	Aaronepower	mada That would be a breaking change. And there is also nothing preventing your app from only using rust 1.14 for example to maintain it.
2017-01-04 16:24:15	mada	Aaronepower: right. I understand.
2017-01-04 16:24:17	mada	Thanks :)
2017-01-04 16:24:46	◣	snowe_ (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 16:25:10	◣	snowe__ (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 16:25:40	roblabla	Anyone know how to make an FnMut that also implements Clone ? This is required for a Filter iterator to be cloneable, but AFAIK closures don't implement Clone...
2017-01-04 16:26:24	bluss	roblabla: oh that place is not fun
2017-01-04 16:26:54	bluss	eventually custom types can implement the closure traits (but that's an unstable feature..)
2017-01-04 16:27:30	◣	blashyrk (Mibbit@moz-4hp94c.dynamic.sbb.rs) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-04 16:27:56	bluss	and function pointers have their own trouble with Clone impls due to how not all possible function pointer types can be named to make a Clone impl for them
2017-01-04 16:28:05	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 16:28:13	◣	ufobat (Martin@moz-ulid2h.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2017-01-04 16:28:23	◥	nonelement (nonelement@moz-021kv8.pa.comcast.net) has joined #rust-beginners
2017-01-04 16:28:50	◣	nonelement (nonelement@moz-021kv8.pa.comcast.net) has quit (Quit: brb)
2017-01-04 16:29:35	◣	manuel_ (manuel@moz-5eskqg.ma.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-04 16:30:08	bluss	all avenues for clonable Filter are closed
2017-01-04 16:30:56	◣	jannick (jannick@moz-eu0lcm.siteimprove.com) has quit (Ping timeout: 121 seconds)
2017-01-04 16:31:26	roblabla	bluss: :( that makes me sad.
2017-01-04 16:31:51	roblabla	owell. thx for the help :D
2017-01-04 16:32:16	◣	niklasad1 (niklasad1@moz-1l8g7e.cust.bredbandsbolaget.se) has quit (Connection closed)
2017-01-04 16:33:02	◥	niklasad1 (niklasad1@moz-1l8g7e.cust.bredbandsbolaget.se) has joined #rust-beginners
2017-01-04 16:33:34	LambdaComplex	mbrubeck: So do you actually know stuff about conrod/piston or are you just good at being helpful?
2017-01-04 16:33:56	@mbrubeck	LambdaComplex: I've never used it myself, everything I know is just from idling and answering questions here. :P
2017-01-04 16:34:05	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2017-01-04 16:34:30	LambdaComplex	mbrubeck: Guess that's kinda in-between then :P
2017-01-04 16:34:31	@mbrubeck	well, I have used and contributed to PistonDevelopers/image, but not any of the other piston crates
2017-01-04 16:34:41	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-04 16:35:14	LambdaComplex	mbrubeck: Do you by any chance know how getting events via event_loop compares to...whatever you'd call the other method? 
2017-01-04 16:35:24	◥	junqed (junqed@moz-rlk.8dl.70.178.IP) has joined #rust-beginners
2017-01-04 16:35:36	LambdaComplex	Are they equivalent? Or do they allow different things?
2017-01-04 16:35:43	◥	cytren (Mibbit@moz-fkrdm8.il.comcast.net) has joined #rust-beginners
2017-01-04 16:35:49	◣	davs (davs@moz-due.96s.131.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 16:36:03	voider1	mbrubeck: I can't use AtomicI32?
2017-01-04 16:36:24	◥	jannick (jannick@moz-eu0lcm.siteimprove.com) has joined #rust-beginners
2017-01-04 16:37:34	@mbrubeck	LambdaComplex: Using the EventWindow trait is just shorthand for calling `events.next()` and `window.handle_event()` in a loop: https://github.com/PistonDevelopers/conrod/blob/master/src/backend/piston/window.rs#L221-L228
2017-01-04 16:37:40	@mbrubeck	where `handle_event` does this: https://github.com/PistonDevelopers/conrod/blob/master/src/backend/piston/window.rs#L152-L157
2017-01-04 16:37:49	◣	cynicaldevil (uid126068@moz-3m708d.brockwell.irccloud.com) has quit (Quit: Connection closed for inactivity)
2017-01-04 16:38:05	@mbrubeck	LambdaComplex: so I think you can do the same just by adding a `handle_event` call to your code
2017-01-04 16:38:45	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 16:39:10	◥	manuel_ (manuel@moz-ns5u6k.ma.comcast.net) has joined #rust-beginners
2017-01-04 16:39:26	◣	junqed (junqed@moz-rlk.8dl.70.178.IP) has quit (Ping timeout: 121 seconds)
2017-01-04 16:39:58	@mbrubeck	I've never quite been clear why piston-window exposes so many ways of getting the next event, e.g. why do we need both of these? http://docs.piston.rs/piston_window/src/piston_window/lib.rs.html#241-276
2017-01-05 10:52:22	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-05 10:52:22	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-05 10:52:22	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-05 10:52:22	⚡	Channel #rust-beginners: 637 nicks (3 ops, 0 halfops, 0 voices, 634 normals)
2017-01-05 10:52:24	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-05 10:52:58	voider1	breeden1: Thanks, works like a charm. =)
2017-01-05 10:53:03	onelson	ok, an ultra basic Q - I'm calling a method that returns `Option<&str>` and I'm trying to use the return from this in `format!()` and it's telling me "needs &str, not std::string::String" -- what's the path to &str from here?
2017-01-05 10:53:27	◥	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has joined #rust-beginners
2017-01-05 10:53:38	breeden1	voider1: keep in mind that it doesn't call thread::sleep(pool_interval) in the case where Vec<T> is empty, or you really have a None
2017-01-05 10:53:42	breeden1	incase you want to change that
2017-01-05 10:53:44	onelson	err, I'm calling unwrap() on the Option, fwiw
2017-01-05 10:53:47	durka42	onelson: if s is a string, then &s will coerce to &str
2017-01-05 10:54:05	◣	ubsandroid_ (ubsan@moz-tmbdhp.gq2a.uohq.fb90.2607.IP) has quit (Quit: <3)
2017-01-05 10:54:10	onelson	so I need to bind it to a name first?
2017-01-05 10:54:12	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-05 10:54:26	misdreavus	onelson: do you have an Option<String>?
2017-01-05 10:54:33	voider1	breeden1: I think it's not that bad.
2017-01-05 10:54:43	◥	cynicaldevil (uid126068@moz-3m708d.brockwell.irccloud.com) has joined #rust-beginners
2017-01-05 10:54:46	durka42	onelson: your question is a bit confusing. format!() creates a String, and you are trying to put that somewhere that expects an Option<&str>?
2017-01-05 10:54:53	◣	bereddy (bereddy@moz-2e6qc0.fios.verizon.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2017-01-05 10:54:53	voider1	breeden1: Maybe I'll call it a couple times, we'll see.
2017-01-05 10:54:55	onelson	nah, misdreavus signature is Option<&str>
2017-01-05 10:55:08	durka42	onelson: it might help if you show the code
2017-01-05 10:55:16	jannick	hmm :/ I can't write let in a lambda function? is that not allowed? :(
2017-01-05 10:55:37	◥	dm3 (dm3@moz-urssv3.static.zebra.lt) has joined #rust-beginners
2017-01-05 10:55:50	ubsandroid	jannick: let requires you to make it a block
2017-01-05 10:55:58	ubsandroid	|| { let x = 0; }
2017-01-05 10:56:06	onelson	some code: format!("{:?}", maybe_str().unwrap())
2017-01-05 10:56:07	fwiw	playbot: format!("{}", Some("str").unwrap())
2017-01-05 10:56:09	ehd	Arnavion, ~steveklabnik - I just realized what I think the difference is between &Option<...> and Option<&...>; in my head the former makes sense for a getter of a property that is itself an option, while the latter makes sense for a function that actually does something which can return a pointer or not
2017-01-05 10:56:10	jannick	ubsandroid: ofc >< ty :)
2017-01-05 10:56:13	⚡	Notice(playbot): "str"
2017-01-05 10:56:15	ubsandroid	yep!
2017-01-05 10:56:26	durka42	onelson: that should work fine, so the error must be elsewhere
2017-01-05 10:56:30	◣	nZac (nZac@moz-0knq4t.midco.net) has quit (A TLS packet with unexpected length was received.)
2017-01-05 10:56:35	◥	nZac (nZac@moz-0knq4t.midco.net) has joined #rust-beginners
2017-01-05 10:57:03	fwiw	playbot: format!("{:?}", Some("str").unwrap())
2017-01-05 10:57:04	⚡	Notice(playbot): "\"str\""
2017-01-05 10:57:07	durka42	onelson: maybe you can make a self-contained example in the playground play.rust-lang.org
2017-01-05 10:57:16	durka42	or if not at least paste the surrounding code and the error message
2017-01-05 10:58:11	onelson	sure
2017-01-05 10:58:31	onelson	https://github.com/aatxe/irc/blob/master/src/client/data/message.rs#L37 is what I'm calling, and here's what rustc says about it https://gist.github.com/onelson/31a191cb31afa7178726cd325e4412b7
2017-01-05 10:58:58	◥	feliciat (feliciat@moz-rboc3f.cust.tzulo.com) has joined #rust-beginners
2017-01-05 10:59:15	onelson	and I realize the debug in the format should not be needed, but I just wanted to see anything
2017-01-05 10:59:53	misdreavus	ah, it's complaining about what you're sending to send_privmsg
2017-01-05 10:59:53	onelson	Ooooohhh
2017-01-05 10:59:57	onelson	yes
2017-01-05 11:00:01	onelson	I just got that misdreavus lol
2017-01-05 11:00:08	misdreavus	:P
2017-01-05 11:00:32	onelson	I hope this is the sole dunce cap I get for the day
2017-01-05 11:00:48	misdreavus	no question is too noob for this channel
2017-01-05 11:01:34	misdreavus	instead, you get a thumbs-up and some encouragement to continue (^^)b
2017-01-05 11:01:42	◣	CoderPuppy (cpup@moz-m24.69g.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 11:02:32	◥	cpup (cpup@moz-m24.69g.218.32.IP) has joined #rust-beginners
2017-01-05 11:04:02	onelson	I am in business again, thanks all
2017-01-05 11:06:33	jannick	can anyone explain to me how mem::swap works, because it seems to be able to change position of memory between my stack and a struct I own by reference
2017-01-05 11:06:50	◣	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 11:07:00	◥	yulia (uid205511@moz-2oj2kd.ealing.irccloud.com) has joined #rust-beginners
2017-01-05 11:07:11	◣	poolish (bread@moz-fnm.4h1.16.70.IP) has quit (Client exited)
2017-01-05 11:07:38	misdreavus	aiui it memcpy's the data between the two references
2017-01-05 11:07:59	~steveklabnik	it's a very small function
2017-01-05 11:08:04	rkruppe	through a temporary but yes, it's a plain old move
2017-01-05 11:08:08	~steveklabnik	https://doc.rust-lang.org/stable/src/core/up/src/libcore/mem.rs.html#445-460
2017-01-05 11:08:30	misdreavus	well yes, but i wanted to get across that it just copies it across
2017-01-05 11:08:31	~steveklabnik	it does the classic thing; make a temporary, copy a to the temporary, copy b to a, copy the temporary to b
2017-01-05 11:08:38	jannick	wait.. so it does a clone?
2017-01-05 11:08:45	rkruppe	no, a move
2017-01-05 11:08:56	misdreavus	shallow copy
2017-01-05 11:09:05	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-05 11:09:31	feliciat	a
2017-01-05 11:09:59	jannick	right.. but if my shallow level has a lot of data it would be expensive right?
2017-01-05 11:10:17	rkruppe	yes but the same is true for all moves, of which you'll generally have a lot anyway
2017-01-05 11:10:41	rkruppe	e.g. mem::swap'ing two [u8; 4069] will copy 4 KB thrice
2017-01-05 11:10:51	◣	Durz0 (Durzo@moz-n40fdt.dynamic.kabel-deutschland.de) has quit (Ping timeout: 121 seconds)
2017-01-05 11:11:59	◣	feliciat (feliciat@moz-rboc3f.cust.tzulo.com) has quit (Quit: leaving)
2017-01-05 11:12:16	◥	feliciat (feliciat@moz-rboc3f.cust.tzulo.com) has joined #rust-beginners
2017-01-05 11:12:35	⚡	agibson is now known as agibson|afk
2017-01-05 11:12:39	◥	bread|laptop (bread@moz-fnm.4h1.16.70.IP) has joined #rust-beginners
2017-01-05 11:12:41	◣	djump (djump@moz-dkcp2c.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-05 11:12:52	◥	zako (zako@moz-ormegi.dynamicip.rima-tde.net) has joined #rust-beginners
2017-01-05 11:12:57	◣	bread|laptop (bread@moz-fnm.4h1.16.70.IP) has quit (Client exited)
2017-01-05 11:13:09	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 11:13:36	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-05 11:13:53	◥	nkr (nkr@moz-65q.mqv.99.179.IP) has joined #rust-beginners
2017-01-05 11:13:59	jannick	rkruppe: fair enough, is mem::swap also what I should do when I have a vec on a struct I want to filter
2017-01-05 11:14:08	◥	MikeMountain (eispin@moz-a9lavo.pools.vodafone-ip.de) has joined #rust-beginners
2017-01-05 11:14:16	fqtw_	where should the .env file be?
2017-01-05 11:14:19	⚡	fqtw_ is now known as fqtw
2017-01-05 11:14:22	fqtw	for dotenv!
2017-01-05 11:14:22	◣	feliciat (feliciat@moz-rboc3f.cust.tzulo.com) has quit (Quit: leaving)
2017-01-05 11:14:30	rkruppe	jannick: I don't see what swapping has to do with filtering
2017-01-05 11:14:36	~steveklabnik	jannick: you'd use filter for that, probably, not swap
2017-01-05 11:14:39	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-05 11:14:55	◣	nkr (nkr@moz-65q.mqv.99.179.IP) has quit (Connection closed)
2017-01-05 11:15:08	jannick	steveklabnik: no the vec is from a struct if I call into_iter on it, then I get can't move out of borrowed content
2017-01-05 11:15:39	◥	kulshrax (kulshrax@moz-q61.9o0.201.199.IP) has joined #rust-beginners
2017-01-05 11:15:41	rkruppe	jannick: Vec::retain can filter a Vec in-place
2017-01-05 11:16:34	◥	nkr (nkr@moz-65q.mqv.99.179.IP) has joined #rust-beginners
2017-01-05 11:17:23	◣	kulshrax (kulshrax@moz-q61.9o0.201.199.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-05 11:17:25	breeden1	jannick: Vec::retain sounds like what you wanted, but just also wanted to note that mem::swap'ing two Vec<T>s is very cheap.  A Vec<T> is just 3 pointers in size on the stack
2017-01-05 11:17:36	jannick	rkruppe: right, but that's pretty specific to that problem..
2017-01-05 11:18:01	breeden1	solutions specific to problem is often what you want ;)
2017-01-05 11:18:15	rkruppe	jannick: you can indeed swap out a Vec for an empty Vec if you absolutely do need ownership
2017-01-05 11:18:35	rkruppe	jannick: however, also note that you can iterate over a Vec by-value without owning the Vec, with .drain(..)
2017-01-05 11:19:23	breeden1	hmm, a `mem::take` method might be useful
2017-01-05 11:19:55	rkruppe	breeden1: using Default::default? has been proposed before
2017-01-05 11:20:09	◥	djump (djump@moz-dkcp2c.wa.comcast.net) has joined #rust-beginners
2017-01-05 11:20:32	breeden1	yeah? i guess it's not a big deal, but the Option::take method is useful and mem::swap'ing with Default::default is quite common
2017-01-05 11:21:04	MikeMountain	I'm amazed that rustc is able to deduce that 'hello' can't be mutated while 'foo' is still alive, and would like to learn *how*:
2017-01-05 11:21:05	MikeMountain	let mut hello = "hello".to_string(); let foo: &str = &hello;
2017-01-05 11:21:05	MikeMountain	Assuming this has to do with the elided reference lifetime of the coercion function, is there any resource beyond the Book (chapter "Lifetimes") that I can read on this?
2017-01-05 11:21:31	breeden1	yyesss, and no
2017-01-05 11:21:34	MikeMountain	Also, sorry for flooding, but I really wanted to ask atomically :P
2017-01-05 11:21:47	breeden1	https://doc.rust-lang.org/nomicon/lifetimes.html
2017-01-05 11:22:20	breeden1	oh maybe better is https://doc.rust-lang.org/nomicon/references.html
2017-01-05 11:22:25	~steveklabnik	MikeMountain: there's no 'coercion function' here
2017-01-05 11:22:28	breeden1	where it defines Aliasing
2017-01-05 11:22:29	jannick	rkruppe: hmm drain seems to require a range
2017-01-05 11:22:29	MikeMountain	:D I like the humor of the name
2017-01-05 11:22:43	◥	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has joined #rust-beginners
2017-01-05 11:22:45	~steveklabnik	though, in this case
2017-01-05 11:22:51	~steveklabnik	you _are_ using Deref, i guess
2017-01-05 11:22:56	~steveklabnik	i missed that you left off the [..]
2017-01-05 11:23:16	~steveklabnik	so, scratch that, ignore me :)
2017-01-05 11:23:44	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-05 11:23:46	MikeMountain	breeden: Thanks for the pointers!
2017-01-05 11:24:06	breeden1	yup!  That was probably my favorite two sections in that book tbqh
2017-01-05 11:25:25	MikeMountain	steveklabnik: Whelp, looks like "difference between coercion function and coercion after a Deref" is up next on my topic list :)
2017-01-05 11:25:37	~steveklabnik	hehe
2017-01-05 11:25:51	~steveklabnik	in general rust does very little automatic coercion
2017-01-05 11:26:16	~steveklabnik	you have 'as', and deref coercions, and that's pretty much it. feel like i'm missing something...
2017-01-05 11:26:20	MikeMountain	Or is it just naming?  After all, the coercion needs to be done by *something*, and I just called that something "function".
2017-01-05 11:26:42	MikeMountain	Ah, then I meant "deref coercion" in the very beginning.
2017-01-05 11:26:51	~steveklabnik	yeah, i guess i mean there's a difference between wehn the _language_ does it and when you write a function yourself
2017-01-05 11:26:57	~steveklabnik	this is the language doing it
2017-01-05 11:27:06	◥	gunibert (gunibert@moz-1v6nka.dynamic.kabel-deutschland.de) has joined #rust-beginners
2017-01-05 11:27:08	~steveklabnik	though through a hook that you can change
2017-01-05 11:27:14	MikeMountain	That makes sense
2017-01-05 11:27:21	~steveklabnik	anyway, i don't want to distract you, check those chapters out and we'll be here to answer questions :)
2017-01-05 11:27:34	rkruppe	jannick: yes, just pass .. to get the whole Vec
2017-01-05 11:27:47	jannick	how do i make .map(..) strict without .collect() and creating a list
2017-01-05 11:28:04	jannick	rkruppe: yeah read the guide on drain ;) but ty ^^
2017-01-05 11:28:08	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 11:28:52	◣	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has quit (Client exited)
2017-01-05 11:29:02	◥	bread|laptop (bread@moz-fnm.4h1.16.70.IP) has joined #rust-beginners
2017-01-05 11:29:24	rkruppe	re: map, ideally don't use map. usually you just use an explicit loop if you want to do something with side-effects for each element of an iterator
2017-01-05 11:30:03	◥	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-05 11:31:35	breeden1	rkruppe: I'm sure there are a few who would rather not here that ;)
2017-01-05 11:31:42	breeden1	hear*
2017-01-05 11:31:48	rkruppe	I am aware but those people are wrong
2017-01-05 11:31:55	rkruppe	:P
2017-01-05 11:32:52	jannick	rkruppe: I am here for the speed ups, mutating inline is like the dream of rust :p
2017-01-05 11:33:15	◣	FrenchToast (FrenchToast@moz-s44on6.co.comcast.net) has quit (Quit: This computer has gone to sleep)
2017-01-05 11:34:05	rkruppe	map isn't any faster than a loop
2017-01-05 11:34:39	jannick	rkruppe: no but carrying my data through a map pipeline is
2017-01-05 11:34:56	◥	bbsome (Mibbit@moz-l9u.btc.157.37.IP) has joined #rust-beginners
2017-01-05 11:34:57	jannick	is slower*
2017-01-05 11:35:09	bbsome	guys how to unpack a struct simulatenously taking all of its members?
2017-01-05 11:35:10	◥	SilverKey (SilverKey@moz-pf5aar.biz.rr.com) has joined #rust-beginners
2017-01-05 11:35:49	◣	segfault (Mibbit@moz-svg.van.123.129.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 11:35:53	misdreavus	let MyStruct { one, two, three } = my_value;
2017-01-05 11:36:15	◥	snowe (snowe@moz-jvoosu.co.comcast.net) has joined #rust-beginners
2017-01-05 11:36:30	breeden1	playbot: struct S { a: String, b: String } let s = S { a: "Hello".into(), b: "World".into() }; let { a: c, b: d } = s;
2017-01-05 11:36:35	⚡	Notice(playbot): error: expected pattern, found `{`
2017-01-05 11:36:35	⚡	Notice(playbot):   --> <anon>:10:99
2017-01-05 11:36:35	⚡	Notice(playbot):    |
2017-01-05 11:36:35	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2j8SnW6)
2017-01-05 11:36:44	breeden1	bah, rust is broken
2017-01-05 11:37:04	misdreavus	`let S {a: c, b: d} = s;`
2017-01-05 11:37:08	misdreavus	you missed the struct name
2017-01-05 11:37:23	breeden1	shh ;P (rust is broken)
2017-01-05 11:37:25	bbsome	so would this make `c` and `d` the struct fields
2017-01-05 11:37:29	bbsome	values
2017-01-05 11:37:37	breeden1	bbsome: yes
2017-01-05 11:37:45	misdreavus	yeah, that would create `c` and `d` with the values
2017-01-05 11:37:52	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-05 11:37:52	breeden1	playbot: struct S { a: String, b: String } let s = S { a: "Hello".into(), b: "World".into() }; let S { a: c, b: d } = s; format!("c: {}, d: {}", c, d)
2017-01-05 11:37:57	⚡	Notice(playbot): "c: Hello, d: World"
2017-01-05 11:39:38	◣	badon (badon@moz-c5r.91b.195.199.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 11:39:40	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-05 11:39:44	bbsome	let UserLogin{email: email, password: password} = *user;    |                          -----            --------    ^^^^^ cannot move out of borrowed content    |                          |                |    |                          |                ...and here (use `ref password` or `ref mut password`)    |                          hint: to prevent move,
2017-01-05 11:39:50	breeden1	heh
2017-01-05 11:39:56	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2017-01-05 11:39:56	breeden1	bbsome: do you own user?
2017-01-05 11:40:02	breeden1	because if not, that's stealing :P
2017-01-05 11:40:16	◥	badon (badon@moz-c5r.91b.195.199.IP) has joined #rust-beginners
2017-01-05 11:40:17	◣	snowe (snowe@moz-jvoosu.co.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-05 11:40:20	bbsome	:D
2017-01-05 11:40:30	bbsome	i think i have mut ref to it
2017-01-05 11:40:34	breeden1	bbsome: but you can do `Let UserLogin { ref email, ref password } = *user`
2017-01-05 11:40:44	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-05 11:41:29	◥	afshinmeh (textual@moz-fjp2af.hgkk.s1m0.8084.2a02.IP) has joined #rust-beginners
2017-01-05 11:42:28	bbsome	cool I think i managed to get ownership of it
2017-01-05 11:42:39	bbsome	cause I need to pass the values in a function
2017-01-05 11:42:56	breeden1	that's fine if the functions only need a reference, or a mutable reference
2017-01-05 11:43:03	◥	Elwyn (elwyn@moz-rv4.iql.209.186.IP) has joined #rust-beginners
2017-01-05 11:43:04	◥	ggrochow (ggrochow@moz-9as.smm.64.50.IP) has joined #rust-beginners
2017-01-05 11:43:44	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 11:44:13	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-05 11:44:43	◥	snowe (snowe@moz-jvoosu.co.comcast.net) has joined #rust-beginners
2017-01-05 11:44:51	stephaneyfx	assuming i have installed the toolchain `stable-x86_64-pc-windows-gnu`, what is the difference between `rustup target add x86_64-pc-windows-msvc` and `rustup install stable-x86_64-pc-windows-msvc`?
2017-01-05 11:45:49	jannick	is there a combined function of drain().into_iter()?
2017-01-05 11:46:06	jannick	wait nvm
2017-01-05 11:46:11	stephaneyfx	jannick, drain() already returns an Iterator
2017-01-05 11:46:14	jannick	just need drain :p
2017-01-05 11:46:21	◥	Powersource (Powersource@moz-u199ao.cust.bredband2.com) has joined #rust-beginners
2017-01-05 11:46:38	jannick	stephaneyfx: it wouldn't compile :P but turned out there was something else wrong ^^
2017-01-05 11:47:49	misdreavus	stephaneyfx: adding a target lets you cross-compile *to* that triple, installing the triple like that gives you the compiler to build *from* that triple
2017-01-05 11:48:10	◥	tel (tel@moz-rdn.5rl.148.204.IP) has joined #rust-beginners
2017-01-05 11:48:30	◥	Aaronepower (Aaronepower@moz-jqc.96c.97.79.IP) has joined #rust-beginners
2017-01-05 11:48:40	misdreavus	i.e. adding the target doesn't give you rustc/cargo for that host
2017-01-05 11:48:57	◥	blinky (Mibbit@moz-akf720.hsi3.kabel-badenwuerttemberg.de) has joined #rust-beginners
2017-01-05 11:49:14	stephaneyfx	misdreavus, thank you. let me try to summarize to check if i understood your answer :p
2017-01-05 11:49:25	misdreavus	:)
2017-01-05 11:50:55	◣	snowe (snowe@moz-jvoosu.co.comcast.net) has quit (Connection closed)
2017-01-05 11:51:11	stephaneyfx	does adding the msvc target means i will still be using a rustc/cargo/... built with the gnu version to compile, but the binaries built by them will link against the msvc libs?
2017-01-05 11:51:18	stephaneyfx	mean*
2017-01-05 11:51:32	misdreavus	if you set that target, yes
2017-01-05 11:52:03	misdreavus	(iirc by default you have to add --target yadda-yadda-msvc unless you can set a default target)
2017-01-05 11:52:14	◣	djump (djump@moz-dkcp2c.wa.comcast.net) has quit (Connection closed)
2017-01-05 11:52:18	stephaneyfx	whereas installing the msvc toolchain means i will be using a rustc/cargo/... build with the msvc tools?
2017-01-05 11:52:26	◥	djump (djump@moz-dkcp2c.wa.comcast.net) has joined #rust-beginners
2017-01-05 11:52:27	misdreavus	yup
2017-01-05 11:52:29	◥	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has joined #rust-beginners
2017-01-05 11:53:27	stephaneyfx	so as far as my built binaries are concerned, it does not make a difference whether i add and set the msvc target or i install and use the msvc toolchain?
2017-01-05 11:53:40	MikeMountain	I really love the style of the Rust Nomicon
2017-01-05 11:53:40	MikeMountain	> The compiler rightfully blows up in our face.
2017-01-05 11:53:45	misdreavus	correct
2017-01-05 11:54:03	stephaneyfx	misdreavus, thank you very much for your help (again)!
2017-01-05 11:54:05	~steveklabnik	:)
2017-01-05 11:54:07	◥	NeverDie (NeverDie@moz-crtjcd.fios.verizon.net) has joined #rust-beginners
2017-01-05 11:54:08	misdreavus	(^^)b
2017-01-05 11:54:15	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-05 11:54:37	◥	machuga (machuga@moz-kuh.odq.223.162.IP) has joined #rust-beginners
2017-01-05 11:54:40	misdreavus	iirc much of the nomicon is still gankro's text? i love his writing style
2017-01-05 11:54:42	~steveklabnik	yes
2017-01-05 11:54:45	~steveklabnik	it basically all is
2017-01-05 11:55:44	breeden1	too bad mozilla couldn't keep Granko around :P
2017-01-05 11:56:03	◣	khuey (khuey@moz-pd2jti.ca.comcast.net) has quit (A TLS packet with unexpected length was received.)
2017-01-05 11:56:23	◥	kulshrax (kulshrax@moz-en3jf3.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-05 11:56:23	breeden1	one a SwiftNomicon is out, it's over
2017-01-05 11:56:26	breeden1	once*
2017-01-05 11:57:19	stephaneyfx	breeden1, are you referring to swift the language?
2017-01-05 11:57:25	◥	Binero (Binero@moz-tqrl52.sji7.g8ie.a03f.2a02.IP) has joined #rust-beginners
2017-01-05 11:57:30	◣	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has quit (Client exited)
2017-01-05 11:57:38	breeden1	yeah, that's where Granko works now
2017-01-05 11:57:42	voider1	https://github.com/bytesnake/telebot someone beat me to it, damn.
2017-01-05 11:58:28	breeden1	voider1: are telegrams those things you use morse code with?
2017-01-05 11:58:39	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 11:58:39	voider1	Telegram is a messenger.
2017-01-05 11:59:03	voider1	It's x-platform.
2017-01-05 11:59:06	voider1	And safe.
2017-01-05 11:59:19	voider1	It's like Whatsapp, but better.
2017-01-05 11:59:33	◣	cpup (cpup@moz-m24.69g.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 11:59:37	misdreavus	hey man, don't let that stop you! i published a twitter library when two already existed, and managed to make it differently and learned a lot from it
2017-01-05 11:59:53	◣	Binero (Binero@moz-tqrl52.sji7.g8ie.a03f.2a02.IP) has quit (Client exited)
2017-01-05 11:59:54	breeden1	voider1: if you're looking for another poject, a pdf writting lib is desired by both me an servo :)
2017-01-05 11:59:55	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 12:00:06	breeden1	also, i'd really like to have a command-line playbot
2017-01-05 12:00:12	◥	Binero (Binero@moz-tqrl52.sji7.g8ie.a03f.2a02.IP) has joined #rust-beginners
2017-01-05 12:00:29	◥	angus_i (angusai@moz-v8q.do5.71.82.IP) has joined #rust-beginners
2017-01-05 12:00:32	◥	cpup (cpup@moz-m24.69g.218.32.IP) has joined #rust-beginners
2017-01-05 12:00:33	◣	ggrochow (ggrochow@moz-9as.smm.64.50.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:00:40	voider1	breeden1: I'm too far down the rabbit hole to stop now. xD
2017-01-05 12:00:52	◣	nkr (nkr@moz-65q.mqv.99.179.IP) has quit (Connection closed)
2017-01-05 12:00:56	voider1	breeden1: I want to make a Telegram library which is *better* than his.
2017-01-05 12:01:06	breeden1	heck ya
2017-01-05 12:01:14	MikeMountain	voider1: heck ya, too!
2017-01-05 12:01:15	breeden1	i love encrypted morse code
2017-01-05 12:01:50	MikeMountain	Will that be only for Bot API, or could I potentially use this as a replacement for the highly-broken "libtgl" by vysheng? (Written in C)
2017-01-05 12:01:58	◣	Elwyn (elwyn@moz-rv4.iql.209.186.IP) has quit (Quit: Leaving)
2017-01-05 12:02:03	◣	brson (brson@moz-cfhap5.mtv2.mozilla.com) has quit (Ping timeout: 121 seconds)
2017-01-05 12:02:17	voider1	MikeMountain: It's just a library to write Telegram bots in.
2017-01-05 12:02:19	◣	angusi (angusai@moz-bbsk8m.g3dg.soik.0104.2620.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:02:24	MikeMountain	D'aww
2017-01-05 12:02:30	MikeMountain	That would have been too nice.
2017-01-05 12:03:00	misdreavus	i should hurry up and get streams for my twitter library so i can make a twitter bot crate :P
2017-01-05 12:03:00	voider1	What's libtgl anyways?
2017-01-05 12:03:12	MikeMountain	Add a README to your teleborg, otherwise one doesn't see that immediately :P
2017-01-05 12:03:29	◣	niklasad1 (niklasad1@moz-1l8g7e.cust.bredbandsbolaget.se) has quit (Connection closed)
2017-01-05 12:03:30	MikeMountain	libtgl is a C library to communicate as a "normal" client with the Telegram servers.
2017-01-05 12:03:37	voider1	Ahhh I see.
2017-01-05 12:03:40	◥	ggrochow (ggrochow@moz-9as.smm.64.50.IP) has joined #rust-beginners
2017-01-05 12:03:43	◥	niklasad1 (niklasad1@moz-1l8g7e.cust.bredbandsbolaget.se) has joined #rust-beginners
2017-01-05 12:03:55	voider1	You run your own client?
2017-01-05 12:04:32	◥	snowe (snowe@moz-jvoosu.co.comcast.net) has joined #rust-beginners
2017-01-05 12:04:33	◣	snowe (snowe@moz-jvoosu.co.comcast.net) has quit (Connection closed)
2017-01-05 12:04:34	◥	snowe (snowe@moz-jvoosu.co.comcast.net) has joined #rust-beginners
2017-01-05 12:04:41	MikeMountain	However, there's a lot of un-nice things, like a selfbrew tree-implementation, lots and lots of static arrays ("no one will ever join a supergroup with more than 1000 users"), which causes *A LOT* of problems.
2017-01-05 12:04:51	MikeMountain	Not really, I use telegram-purple.
2017-01-05 12:05:25	MikeMountain	I'm a pidgin fan, kinda, at least the idea behind it (multi-protocol client ftw!)
2017-01-05 12:05:32	voider1	I see.
2017-01-05 12:05:47	◣	snowe (snowe@moz-jvoosu.co.comcast.net) has quit (Connection closed)
2017-01-05 12:05:48	voider1	Maybe I'll write something for it someday.
2017-01-05 12:05:56	MikeMountain	Good luck
2017-01-05 12:05:58	voider1	For now I want to make my Telegram Bot API the best one.
2017-01-05 12:06:01	voider1	xD
2017-01-05 12:06:09	MikeMountain	That would be a promising start.
2017-01-05 12:06:20	voider1	Certainly, I need to step up my game.
2017-01-05 12:06:20	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-05 12:07:40	◥	hansaplast (hansaplast@moz-te77l9.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2017-01-05 12:07:40	voider1	https://github.com/bytesnake/telebot what do you guys think of his example code?
2017-01-05 12:08:07	MikeMountain	The Telegram client API is scarcely documented if at all, the API description language is full of features that are never actually used in the API description (WTF), and the API is just *huge*.  I tried to just enumerate all the functions and data types there are, and eventually gave up after 761.
2017-01-05 12:08:40	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 12:08:46	MikeMountain	For reference: libtgl auto-generates 10 MiB of C code just for the (de)serialization
2017-01-05 12:08:59	voider1	That's awful.
2017-01-05 12:09:14	breeden1	or amazing
2017-01-05 12:09:33	MikeMountain	But necessary.  The official desktop client by Telegram does something very similar.
2017-01-05 12:09:48	~steveklabnik	okay everyone, this is getting away from rust :)
2017-01-05 12:09:52	MikeMountain	Nah, let's stick with awful, due to the bloaty-feeling API.
2017-01-05 12:09:55	MikeMountain	Yup, sorry.
2017-01-05 12:10:11	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-05 12:10:12	~steveklabnik	it's all good
2017-01-05 12:10:27	voider1	But, what do you guys think of the API this guy wrote on Telebot?
2017-01-05 12:10:34	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-05 12:11:29	◣	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-05 12:11:39	voider1	The example code in the README?
2017-01-05 12:11:47	◣	jcreekmore (jcreekmore@moz-c6a2tl.compute-1.amazonaws.com) has left #rust-beginners ("Textual IRC Client: www.textualapp.com")
2017-01-05 12:12:39	◥	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has joined #rust-beginners
2017-01-05 12:12:58	voider1	It'd would be kind of the same as I would do, but instead of closures I have functions, and a trait which you could implement for anything so you could get advanced functionality.
2017-01-05 12:14:12	◣	bread|laptop (bread@moz-fnm.4h1.16.70.IP) has quit (Client exited)
2017-01-05 12:14:15	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:14:35	◣	mxmz (herb@moz-oph.qbr.88.219.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:15:10	breeden1	i like advanced functionality
2017-01-05 12:15:14	◣	Binero (Binero@moz-tqrl52.sji7.g8ie.a03f.2a02.IP) has quit (Client exited)
2017-01-05 12:16:09	voider1	breeden1: Me too. =)
2017-01-05 12:16:12	◣	NeverDie (NeverDie@moz-crtjcd.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 12:16:21	voider1	breeden1: I mean, you could implement the trait for a struct and keep states.
2017-01-05 12:16:23	◥	montanonic (nicholas@moz-u3evs7.or.comcast.net) has joined #rust-beginners
2017-01-05 12:16:28	voider1	You couldn't do that with just functions/closures.
2017-01-05 12:16:45	◥	Binero (Binero@moz-2gc2ul.isp.belgacom.be) has joined #rust-beginners
2017-01-05 12:16:53	voider1	Or you could, but it would be harder. 
2017-01-05 12:17:27	◣	mada (mariano@moz-m9o.u4d.191.190.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:18:15	◥	pylbrecht (pylbrecht@moz-rhd91h.leu1.nofh.8109.2a02.IP) has joined #rust-beginners
2017-01-05 12:18:33	◥	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has joined #rust-beginners
2017-01-05 12:19:00	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-05 12:20:42	◣	Binero (Binero@moz-2gc2ul.isp.belgacom.be) has quit (Client exited)
2017-01-05 12:21:29	hexagoxel	does Option incur indirection?
2017-01-05 12:22:51	◣	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:22:51	~steveklabnik	in what sense
2017-01-05 12:23:11	hexagoxel	steveklabnik: the pointer-indirection sense
2017-01-05 12:23:22	~steveklabnik	no, an option doesn't put something behind a pointer
2017-01-05 12:23:33	hexagoxel	good, thanks.
2017-01-05 12:24:17	◥	FrenchToast (FrenchToast@moz-2pf.nji.21.147.IP) has joined #rust-beginners
2017-01-05 12:24:47	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-05 12:24:59	darnir	Hi. I am looking for a way to implement a global monotonic counter variable in my program. But it seems I can't create a mutable static variable, so what is a good way to implement it?
2017-01-05 12:25:06	◣	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has quit (Connection closed)
2017-01-05 12:25:22	misdreavus	check out AtomicUsize
2017-01-05 12:25:24	simulacrum	darnir: You can create a global mutable static, with static mut
2017-01-05 12:25:33	◣	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has quit (Ping timeout: 121 seconds)
2017-01-05 12:25:44	darnir	simulacrum: I thought it can't be done without an unsafe{} block
2017-01-05 12:25:52	◥	ubsandroid_ (ubsan@moz-2an7t4.pi10.ubiv.fb90.2607.IP) has joined #rust-beginners
2017-01-05 12:25:54	◥	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has joined #rust-beginners
2017-01-05 12:26:10	simulacrum	playbot: static mut COUNTER: ::std::atomic::AtomicUsize = ::std::atomic::AtomicUsize::new(10);
2017-01-05 12:26:12	⚡	Notice(playbot): error[E0433]: failed to resolve. Could not find `atomic` in `std`
2017-01-05 12:26:12	⚡	Notice(playbot):   --> <anon>:10:29
2017-01-05 12:26:12	⚡	Notice(playbot):    |
2017-01-05 12:26:12	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2hXfSnb)
2017-01-05 12:26:14	◣	ggrochow (ggrochow@moz-9as.smm.64.50.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:26:22	simulacrum	darnir: You can't access it without unsafe, but you can create it
2017-01-05 12:26:24	misdreavus	std::sync::atomic
2017-01-05 12:26:32	simulacrum	playbot: static mut COUNTER: ::std::sync::atomic::AtomicUsize = ::std::sync::atomic::AtomicUsize::new(10);
2017-01-05 12:26:36	⚡	Notice(playbot): error: const fns are an unstable feature
2017-01-05 12:26:36	⚡	Notice(playbot):   --> <anon>:10:64
2017-01-05 12:26:36	⚡	Notice(playbot):    |
2017-01-05 12:26:36	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2j99irv)
2017-01-05 12:26:46	simulacrum	Well, const fn, but that should work
2017-01-05 12:27:40	◥	sneaker (thomas@moz-blt.n21.144.213.IP) has joined #rust-beginners
2017-01-05 12:28:14	darnir	simulacrum: I would prefer to avoid the unsafe{} block in my code for now. I'm still trying to understand rust completely and I don't think I am comfortable certifying something as safe yet when the compiler disagrees
2017-01-05 12:28:34	◥	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has joined #rust-beginners
2017-01-05 12:28:34	◣	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-05 12:29:11	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:29:13	simulacrum	darnir: You can assert it is safe in a wrapper function (something I would provide anyway) since it's an AtomicUsize
2017-01-05 12:29:49	darnir	Hmm.. Maybe I could do that..
2017-01-05 12:29:49	voider1	What are futures?
2017-01-05 12:29:52	darnir	Thanks!
2017-01-05 12:30:06	~steveklabnik	!crate futures-rs
2017-01-05 12:30:06	rustbot	Crate 'futures-rs' does not exist.
2017-01-05 12:30:09	~steveklabnik	!crate futures
2017-01-05 12:30:09	rustbot	futures (0.1.7) - An implementation of futures and streams featuring zero allocations, composability, and iterator-like interfaces.  -> https://crates.io/crates/futures <https://docs.rs/crate/futures>
2017-01-05 12:30:14	~steveklabnik	voider1: ^
2017-01-05 12:30:46	misdreavus	an abstract concept that allows for asynchronous design
2017-01-05 12:31:34	voider1	!crate tokio
2017-01-05 12:31:34	rustbot	tokio (0.0.0) - A fast, async, IO framework -> https://crates.io/crates/tokio <https://docs.rs/crate/tokio>
2017-01-05 12:32:11	MikeMountain	Okay, I conclude that I don't grok lifetimes:
2017-01-05 12:32:25	◥	Binero (Binero@moz-2gc2ul.isp.belgacom.be) has joined #rust-beginners
2017-01-05 12:32:45	MikeMountain	- on the one hand, it's used to check validity of references, and there are examples where the lifetime is actually a *smaller* scope than the validity "zone".
2017-01-05 12:32:57	◣	Guest13999 (oneeyed@moz-nothgt.iqk8.ruh3.0e35.2a01.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:33:28	~steveklabnik	and on the other?
2017-01-05 12:33:31	◥	futile (felix@moz-ct43fm.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-05 12:33:40	MikeMountain	- on the other hand, it's used to keep track of "is the resource free" as in "is it the case that there is no reference to it anymore", so lifetimes must not be smaller than the scope of the reference
2017-01-05 12:34:08	MikeMountain	I conclude that at least one part of my understanding is wrong, but I can't figure out which one.
2017-01-05 12:34:36	~steveklabnik	hm, i am not seeing the conflict in the way you've presented it, but i might be mis-understanding you :)
2017-01-05 12:35:01	~steveklabnik	the lifetime of a reference must be less than the scope of what it's referring to
2017-01-05 12:35:13	~steveklabnik	otheriwse, it would be dangling, and therefore, invalid
2017-01-05 12:35:24	hexagoxel	what is an example where the lifetime is smaller than the "validity zone" ?
2017-01-05 12:35:24	~steveklabnik	(which is your first part, in my understanding)
2017-01-05 12:36:09	misdreavus	the reference and the value it's referring to can have different "lifetimes", depending on how long each are in-scope and named
2017-01-05 12:36:14	~steveklabnik	and the second part says "the lifetime is as long as the reference itself", which is sort of reformulating what you said in the first place
2017-01-05 12:37:47	misdreavus	there's subtlety in your explanation that reminds me of what it took to get me to understand pointers in c
2017-01-05 12:38:27	misdreavus	`let x = 5;` introduces an owned value, named `x`
2017-01-05 12:38:45	misdreavus	`let y = &x;` introduces a reference, named `y`, that points to `x`
2017-01-05 12:39:07	misdreavus	if `y` is in a subscope of `x`, its "lifetime" is smaller than `x`s
2017-01-05 12:39:26	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2017-01-05 12:39:32	voider1	What would you use Tokio for?
2017-01-05 12:39:34	misdreavus	but for our purposes, `y` is a distinct *value* that happens to be treated as a borrow of x
2017-01-05 12:40:03	~steveklabnik	voider1: anything you need asynchronous IO for. like say, a network server
2017-01-05 12:40:51	~steveklabnik	voider1: most people will probably not need to use tokio directly
2017-01-05 12:40:51	~steveklabnik	they'll use some library that uses tokio
2017-01-05 12:40:51	voider1	tokio-core?
2017-01-05 12:40:51	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-05 12:40:56	~steveklabnik	what about it?
2017-01-05 12:41:10	voider1	Would someone use that instead of tokio?
2017-01-05 12:41:11	◥	snowe (snowe@moz-jvoosu.co.comcast.net) has joined #rust-beginners
2017-01-05 12:41:13	~steveklabnik	oh, no
2017-01-05 12:41:23	~steveklabnik	that _is_ tokio, just the most basic part of it
2017-01-05 12:41:29	~steveklabnik	so tokio-service and tokio-proto build on top of core
2017-01-05 12:41:40	~steveklabnik	then, something like hyper would use tokio service and tokio proto
2017-01-05 12:41:41	~steveklabnik	and you'd use hyper
2017-01-05 12:41:49	~steveklabnik	bam! http.
2017-01-05 12:41:52	~steveklabnik	(brb)
2017-01-05 12:42:06	voider1	Hmm.
2017-01-05 12:42:15	MikeMountain	voider1: Because I fell over it earlier today, here's someone who's about to use tokio: https://onesignal.com/blog/rust-at-onesignal/
2017-01-05 12:43:18	MikeMountain	And yup, it was my first "assumption", which contained the assumption "references can live beyond their lifetime" which is obviously wrong (at least, should be impossible by design)
2017-01-05 12:44:45	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:45:13	◣	snowe (snowe@moz-jvoosu.co.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-05 12:45:25	voider1	This Tokio stuff is very much to take in.
2017-01-05 12:45:26	◣	Hoff (kvirc@moz-84jd08.dhcp.inet.fi) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2017-01-05 12:46:15	jannick	is there a map inplace for vec?
2017-01-05 12:46:36	misdreavus	for it in &mut vec
2017-01-05 12:46:55	jannick	misdreavus: no functional way?
2017-01-05 12:46:58	misdreavus	unless you want to change the type, then no
2017-01-05 12:47:22	misdreavus	define "functional", if you want to run a map for its side-effects without creating a new collection, it's a for loop
2017-01-05 12:47:33	◥	bread|laptop (bread@moz-fnm.4h1.16.70.IP) has joined #rust-beginners
2017-01-05 12:48:12	simulacrum	Technically, vec.iter_mut().inspect(|x| *x += 1 /* or whatever */).count()
2017-01-05 12:48:21	rkruppe	Rust is not a functional language, it just uses functional-ish APIs when they have benefit (e.g. iterator combinators make iteration patterns more composable)
2017-01-05 12:48:22	jannick	misdreavus: i want v = v.drain(..).map(f).collect()
2017-01-05 12:48:22	simulacrum	But that's ugly
2017-01-05 12:48:49	jannick	rkruppe: true but apparently it has a filter in place so why not a map in place?
2017-01-05 12:48:50	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 12:48:54	◥	nkr (nkr@moz-65q.mqv.99.179.IP) has joined #rust-beginners
2017-01-05 12:49:04	rkruppe	because an in-place filter is difficult to implement efficiently
2017-01-05 12:49:13	misdreavus	filter-in-place is a way to get around lifetimes
2017-01-05 12:49:18	◥	bjz_ (bjz@moz-puppgq.tpgi.com.au) has joined #rust-beginners
2017-01-05 12:50:23	WindowsBunny	jannick: if map is allowed to change the type, then that means it would have to allocate a new vec
2017-01-05 12:50:34	WindowsBunny	jannick: therefore it wouldn't make sense as an in-place map if it has to allocate a new vec
2017-01-05 12:50:51	WindowsBunny	and Rust in general follows the design principle of not hiding such allocations
2017-01-05 12:51:27	◣	ubsandroid_ (ubsan@moz-2an7t4.pi10.ubiv.fb90.2607.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:52:24	◥	ubsandroid (ubsan@moz-2an7t4.pi10.ubiv.fb90.2607.IP) has joined #rust-beginners
2017-01-05 12:53:39	◣	junqed (junqed@moz-n8f.kgr.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-05 12:54:06	◥	junqed (junqed@moz-n8f.kgr.70.178.IP) has joined #rust-beginners
2017-01-05 12:55:04	~steveklabnik	voider1: there will be good docs for tokio soon, and that will make it easier
2017-01-05 12:55:09	~steveklabnik	MikeMountain: ah yeah, that would be it :)
2017-01-05 12:55:16	◥	bereddy (bereddy@moz-2e6qc0.fios.verizon.net) has joined #rust-beginners
2017-01-05 12:55:18	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-05 12:55:34	voider1	steveklabnik: I think async IO would be nice for my Telegram bot lib, right?
2017-01-05 12:55:43	~steveklabnik	quite possibly, yes
2017-01-05 12:55:51	◥	mib_7lgq04 (Mibbit@moz-p16.005.136.209.IP) has joined #rust-beginners
2017-01-05 12:56:09	voider1	So then I should make the POST and GET requests async?
2017-01-05 12:56:37	◣	nkr (nkr@moz-65q.mqv.99.179.IP) has quit (Connection closed)
2017-01-05 12:56:50	panicbit	LambdaComplex: Hey, did you get your version conflict solved yesterday? If so, how did you solve it?
2017-01-05 12:56:51	◣	mib_7lgq04 (Mibbit@moz-p16.005.136.209.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 12:56:55	voider1	Btw, I'm wondering.
2017-01-05 12:57:09	voider1	So you make your IO async, but then you still have to wait on the value.
2017-01-05 12:57:12	voider1	What's the point?
2017-01-05 12:57:48	@mbrubeck	voider1: The program can handle other requests or events in the meantime.
2017-01-05 12:57:54	◥	snowe (snowe@moz-jvoosu.co.comcast.net) has joined #rust-beginners
2017-01-05 12:58:07	LambdaComplex	panicbit: I ended up downgrading two or three crates by a version
2017-01-05 12:58:07	@mbrubeck	voider1: If you're not doing anything concurrently, there may be no advantage.
2017-01-05 12:58:08	◣	junqed (junqed@moz-n8f.kgr.70.178.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:58:08	~steveklabnik	yup
2017-01-05 12:58:18	panicbit	LambdaComplex: :/
2017-01-05 12:58:23	voider1	Hmm.
2017-01-05 12:58:39	voider1	I was looking at tokio-curl.
2017-01-05 12:58:41	LambdaComplex	panicbit: Although right now I'm just saying "screw conrod" because the tutorial for it doesn't even exist and I'm pretty sure piston will get the job done
2017-01-05 12:58:49	LambdaComplex	(And I actually kinda know how to use piston)
2017-01-05 12:59:08	panicbit	I see
2017-01-05 12:59:17	voider1	https://github.com/tokio-rs/tokio-curl/blob/master/examples/two.rs does this provide an advantage?
2017-01-05 12:59:23	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-05 12:59:24	chaot4	Hey everyone! Can anyone point me to some github project which has particularly nicely written rust code. I'm sure there are a lot, and I don't want to start a lengthy discussion which is the nicest. I just would like to read some high-quality rust code to improve my rust skills. :)
2017-01-05 12:59:42	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 12:59:45	Xion	voider1: "async" has multiple meanings, but in Rust version as implemented in mio/tokio, it's essentially utilizing some OS-level capabilities to wait on multiple I/O channels (sockets, etc.) without using threads.
2017-01-05 12:59:54	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-05 12:59:54	◥	alx741 (alx741@moz-ohv.crf.152.190.IP) has joined #rust-beginners
2017-01-05 13:00:10	voider1	Xion: I'd like to implement it into my library, but I have no clue how I would do tat.
2017-01-05 13:00:12	voider1	that*
2017-01-05 13:00:40	◣	kulshrax (kulshrax@moz-en3jf3.8r4b.grs8.010d.2620.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-05 13:00:59	@mbrubeck	chaot4: https://github.com/BurntSushi/byteorder is a nice small one that is pretty readable
2017-01-05 13:01:25	~steveklabnik	voider1: yeah, i mean, until the big release happens, it's gonna be a bit tough
2017-01-05 13:01:32	◥	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined #rust-beginners
2017-01-05 13:01:43	~steveklabnik	you'd have to read the source of all the crates, figure out how to put it together, etc
2017-01-05 13:01:49	voider1	Pff
2017-01-05 13:01:53	~steveklabnik	once the release happens there will be examples for you to follow
2017-01-05 13:02:06	◣	alx741_ (alx741@moz-k6o.639.152.190.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:02:07	◥	dionysus70 (Thunderbird@moz-f3r.u5k.134.178.IP) has joined #rust-beginners
2017-01-05 13:02:20	voider1	I'm going to try it anyways, I guess.
2017-01-05 13:02:22	◣	dionysus69 (Thunderbird@moz-f3r.u5k.134.178.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:02:22	⚡	dionysus70 is now known as dionysus69
2017-01-05 13:02:33	◥	mudpit (Mibbit@moz-1ke.ppa.196.168.IP) has joined #rust-beginners
2017-01-05 13:02:37	◣	tel (tel@moz-rdn.5rl.148.204.IP) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-05 13:02:39	mudpit	Hi
2017-01-05 13:02:42	chaot4	mbrubeck: Great, that looks perfect. Thank you. :)
2017-01-05 13:02:50	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 13:02:50	◣	refold (refold@moz-lkj.2mj.172.188.IP) has quit (Quit: leaving)
2017-01-05 13:02:50	~steveklabnik	voider1: i would suggest starting with tokio-proto then, and tokio-service
2017-01-05 13:03:26	@burntsushi	Jackneill: RE worker in ripgrep: why would it be more efficient?
2017-01-05 13:03:27	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-05 13:03:43	~steveklabnik	hi mudpit 
2017-01-05 13:04:33	◣	Binero (Binero@moz-2gc2ul.isp.belgacom.be) has quit (Client exited)
2017-01-05 13:04:43	mudpit	I just started learning rust and would like to use it for kernel programming instead of C. I'm not totally clear about which parts I can use though ... I'd have to do #![no_std] but still would like to use Heap allocation (Box, Vectors, etc.)
2017-01-05 13:05:08	◣	afshinmeh (textual@moz-fjp2af.hgkk.s1m0.8084.2a02.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 13:05:09	~steveklabnik	as in making your own kernel?
2017-01-05 13:05:12	~steveklabnik	or working on another one
2017-01-05 13:05:12	mudpit	Can I get rust to use the kernel functions for memory allocation?
2017-01-05 13:05:18	mudpit	Working on another one
2017-01-05 13:05:44	voider1	steveklabnik: Both or one of the two?
2017-01-05 13:05:44	mudpit	Writing a kernel module basically
2017-01-05 13:05:44	~steveklabnik	then yes, you'd have to write an allocator crate that wraps their allocator
2017-01-05 13:05:52	~steveklabnik	and that would let you bring up liballoc, which lets you get Box and friends, and libcollections, which gets you Vec, etc
2017-01-05 13:05:57	~steveklabnik	voider1: both, they work together
2017-01-05 13:06:32	◥	afshinmeh (textual@moz-5tcce4.hgkk.s1m0.8084.2a02.IP) has joined #rust-beginners
2017-01-05 13:06:41	~steveklabnik	voider1: you'd write a -proto for the protocol you're using, and then implement a -service for that protocol
2017-01-05 13:06:41	mudpit	steveklabnik: Are there more requirements to get these types? I'm not clear on what I need to provide, could you point me to some docs?
2017-01-05 13:06:45	◣	bschaefer (bschaefer@moz-6rr.8im.18.24.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:06:54	~steveklabnik	mudpit: all of this is very poorly documented at the moment, basically
2017-01-05 13:06:55	voider1	steveklabnik: Alright, sounds hard, I'll give it a go.
2017-01-05 13:07:17	~steveklabnik	mudpit: but you wanna start here https://doc.rust-lang.org/stable/book/custom-allocators.html
2017-01-05 13:07:24	~steveklabnik	voider1: the tokio gittr is very helpful
2017-01-05 13:08:15	◣	mandeep (mandeep@moz-g8d.s9e.95.209.IP) has quit (Quit: Leaving)
2017-01-05 13:08:19	◥	kulshrax (kulshrax@moz-uq1iib.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-05 13:09:28	mudpit	steveklabnik: thanks for the hints, I'll come back with more concrete questions when the problems occur :)
2017-01-05 13:10:39	voider1	steveklabnik: What's gittr?
2017-01-05 13:11:13	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-05 13:11:38	~steveklabnik	mudpit: :)
2017-01-05 13:12:00	~steveklabnik	https://gitter.im/tokio-rs/tokio
2017-01-05 13:12:02	~steveklabnik	voider1: ^
2017-01-05 13:12:23	◣	mudpit (Mibbit@moz-1ke.ppa.196.168.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 13:12:33	◣	hackebeilchen (Peter@moz-ovp14u.ip-addr.inexio.net) has quit (Connection closed)
2017-01-05 13:12:43	◣	snowe (snowe@moz-jvoosu.co.comcast.net) has quit (Connection closed)
2017-01-05 13:14:17	panicbit	voider1: In a nutshell: A service that provides chatrooms that are associated with github repos or users
2017-01-05 13:14:19	◣	bkn (bkn@moz-rdn.5rl.148.204.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:14:48	xliiv	i'm using redis rust and got this..
2017-01-05 13:14:48	xliiv	con.set(key, post_data).unwrap(); ^^^ cannot infer type for `RV`
2017-01-05 13:15:12	panicbit	(though, I think they recently added a "group" / "community" feature or something like that, which allows you to have a room without an associated guthub user or repo)
2017-01-05 13:15:22	◥	ggrochow (ggrochow@moz-9as.smm.64.50.IP) has joined #rust-beginners
2017-01-05 13:15:46	voider1	panicbit steveklabnik: Thanks!
2017-01-05 13:15:48	◥	iiddnn__ (iacopodeeno@moz-fcea0a.retail.telecomitalia.it) has joined #rust-beginners
2017-01-05 13:16:05	◣	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-05 13:16:22	panicbit	https://mitsuhiko.github.io/redis-rs/redis/trait.Commands.html#method.set
2017-01-05 13:16:52	panicbit	xliiv: Looks like you have to tell rust what you expect as the return type of set
2017-01-05 13:16:56	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:17:05	panicbit	`-> RedisResult<RV>`
2017-01-05 13:17:44	panicbit	I suppose that will be the previous value at that key?
2017-01-05 13:18:18	panicbit	hm no, that's what getset is for
2017-01-05 13:18:36	xliiv	panicbit, this works.. let _: () = con.set(key, post_data).unwrap();
2017-01-05 13:18:39	xliiv	"let _: () = con.set(key, post_data).unwrap();"
2017-01-05 13:18:55	xliiv	but i don't understand it.. 
2017-01-05 13:19:07	panicbit	xliiv: You can also do: `con.set::<_,_,()>(key, post_data).unwrap();`
2017-01-05 13:19:43	panicbit	xliiv: The return value of the method is `RedisResult<RV>` but rust does not know yet what RV is
2017-01-05 13:19:49	panicbit	RV is a type parameter
2017-01-05 13:19:55	panicbit	the third one to be precise
2017-01-05 13:20:28	panicbit	In the simplest case it get's inferred (like the key and value were, i.e. the first and second type parameter)
2017-01-05 13:20:57	panicbit	By writing the let as you did, it can infer that RV = ()
2017-01-05 13:21:15	panicbit	because Result<RV>.unwrap() returns RV
2017-01-05 13:21:50	panicbit	so `let _: () = something_that_returns_RV;` must mean that RV = ()
2017-01-05 13:22:11	panicbit	In my code I expicitly filled in the type parameter
2017-01-05 13:22:28	panicbit	(while leaving the 1. and 2. blank for rust to infer it for me)
2017-01-05 13:24:18	◥	snowe (snowe@moz-jvoosu.co.comcast.net) has joined #rust-beginners
2017-01-05 13:24:40	xliiv	panicbit, great explanation, now i understand thanks..
2017-01-05 13:25:05	panicbit	Cool thanks :)
2017-01-05 13:25:05	xliiv	one thing left.. by saying "type param" you mean this "fn set<K: ToRedisArgs, V: ToRedisArgs, RV: FromRedisValue>"
2017-01-05 13:25:26	panicbit	yeah, the things between the angle brackets
2017-01-05 13:25:51	xliiv	perfect :) thanks again
2017-01-05 13:25:51	panicbit	in this case K, V and RV
2017-01-05 13:26:24	darnir	is std::fs::rename atomic? Linux says rename should be an atomic operation, can I rely on rust's rename to be so?
2017-01-05 13:26:27	◥	niconii (nicole@moz-6cgac3.midco.net) has joined #rust-beginners
2017-01-05 13:26:27	⚡	Mode #rust-beginners [+o niconii] by ChanServ
2017-01-05 13:27:19	◥	TechnoCrunch (TechnoCrunc@moz-ant.ip3.100.101.IP) has joined #rust-beginners
2017-01-05 13:27:38	◥	nkr (nkr@moz-p2a.qp2.141.177.IP) has joined #rust-beginners
2017-01-05 13:28:54	◣	bjz_ (bjz@moz-puppgq.tpgi.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 13:29:43	◣	sneaker (thomas@moz-blt.n21.144.213.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:30:13	◣	snowe (snowe@moz-jvoosu.co.comcast.net) has quit (Connection closed)
2017-01-05 13:30:35	◥	dm3_ (dm3@moz-urssv3.static.zebra.lt) has joined #rust-beginners
2017-01-05 13:30:38	◣	TheCycoONE (quassel@moz-d4s.1g6.223.162.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-05 13:31:34	◥	wallacoloo____ (colin@moz-actvqc.dhcp4.washington.edu) has joined #rust-beginners
2017-01-05 13:31:42	◣	nkr (nkr@moz-p2a.qp2.141.177.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:32:09	jannick	is there an inplace sort_by that just take a function that returns a value you want to sort by?
2017-01-05 13:32:17	jannick	for vec
2017-01-05 13:32:40	◣	dm3 (dm3@moz-urssv3.static.zebra.lt) has quit (Ping timeout: 121 seconds)
2017-01-05 13:32:47	rkruppe	jannick: sort_by_key
2017-01-05 13:33:18	jannick	rkruppe: ty :)
2017-01-05 13:35:01	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-05 13:35:16	◥	mxmz (herb@moz-tpr.qbr.88.219.IP) has joined #rust-beginners
2017-01-05 13:36:39	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-05 13:37:37	◣	dm3_ (dm3@moz-urssv3.static.zebra.lt) has quit (Ping timeout: 121 seconds)
2017-01-05 13:38:26	MikeMountain	What's with all the "TLS packet with unexpected length" quits?  I've never seen that in other IRC rooms before.
2017-01-05 13:38:44	jannick	rkruppe: hmm my key is a float is there anyway I can avoid the partial_cmp crazyness?
2017-01-05 13:39:15	rkruppe	!crate ordered-float
2017-01-05 13:39:15	rustbot	ordered-float (0.3.0) - Wrappers for total ordering on floats. -> https://crates.io/crates/ordered-float <https://docs.rs/crate/ordered-float>
2017-01-05 13:39:18	rkruppe	^ maybe
2017-01-05 13:39:19	◣	vorner (vorner@moz-fjnbbo.cz) has quit (Quit: Error from remote client)
2017-01-05 13:39:41	◣	ubsandroid (ubsan@moz-2an7t4.pi10.ubiv.fb90.2607.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:39:59	jannick	rkruppe: hmm do you know why it's not core?
2017-01-05 13:40:12	rkruppe	very little is in std in general
2017-01-05 13:40:42	rkruppe	mostly unsafe-heavy stuff like data structures, things that need compiler integration, and traits that the entire ecosystem needs to agree on to avoid interop nightmares
2017-01-05 13:41:17	◥	himi (sjjf@moz-r3ta53.internode.on.net) has joined #rust-beginners
2017-01-05 13:42:01	◣	ggrochow (ggrochow@moz-9as.smm.64.50.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:42:59	◣	playbot (playbot@moz-t76o6j.compute.amazonaws.com) has quit (Connection closed)
2017-01-05 13:43:15	panicbit	MikeMountain: I assume they are simply lost connections
2017-01-05 13:43:16	◥	alx741_ (alx741@moz-8e1.qnp.152.190.IP) has joined #rust-beginners
2017-01-05 13:43:19	◥	dm3 (dm3@moz-urssv3.static.zebra.lt) has joined #rust-beginners
2017-01-05 13:43:26	◥	playbot (playbot@moz-t76o6j.compute.amazonaws.com) has joined #rust-beginners
2017-01-05 13:43:26	◥	playbot-mini (playbot-min@moz-t76o6j.compute.amazonaws.com) has joined #rust-beginners
2017-01-05 13:44:13	~steveklabnik	jannick: i think part of it, in this specific case, is that ther'es multiple ways of doing this
2017-01-05 13:44:20	~steveklabnik	which doesn't mean something will never get in
2017-01-05 13:44:24	rkruppe	that too
2017-01-05 13:44:28	jannick	steveklabnik: ordering floats?
2017-01-05 13:44:33	~steveklabnik	yeah
2017-01-05 13:44:49	◥	ggrochow (ggrochow@moz-9as.smm.64.50.IP) has joined #rust-beginners
2017-01-05 13:45:32	◣	canaltinova (uid191250@moz-l3qbqh.tooting.irccloud.com) has quit (Quit: )
2017-01-05 13:45:52	◣	alx741 (alx741@moz-ohv.crf.152.190.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 13:46:37	◣	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has quit (Quit: Leaving)
2017-01-05 13:49:23	jannick	rkruppe: how do you use the ordered_float? I have set both an extern crate ordered_float; and use ordered_float::*; but it can't find my ordered_float :/
2017-01-05 13:49:43	rkruppe	jannick: what code does it complain about?
2017-01-05 13:49:48	◥	ubsandroid (ubsan@moz-2an7t4.pi10.ubiv.fb90.2607.IP) has joined #rust-beginners
2017-01-05 13:50:04	jannick	rkruppe: unresolved import `ordered_float::*`
2017-01-05 13:50:17	rkruppe	jannick: did you put ordered_float in Cargo.toml?
2017-01-05 13:50:21	jannick	rkruppe: yes
2017-01-05 13:51:05	durka42	you must not be in main.rs/lib.rs then
2017-01-05 13:51:09	jannick	rkruppe: or i put orderd-float in cargo.toml
2017-01-05 13:51:14	◣	ggrochow (ggrochow@moz-9as.smm.64.50.IP) has quit (Quit: Lost terminal)
2017-01-05 13:51:31	jannick	durka42: no I am on a sperate file from those
2017-01-05 13:51:42	durka42	usually `extern crate` imports go at the crate root
2017-01-05 13:51:50	durka42	otherwise you have to write `use self::ordered_float::*;`
2017-01-05 13:52:03	◥	tyoc213 (tyoc@moz-geq.1mu.58.209.IP) has joined #rust-beginners
2017-01-05 13:52:17	◥	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-05 13:53:06	◥	sprog (Mibbit@moz-ld1n7m.dynamic.surfer.at) has joined #rust-beginners
2017-01-05 13:53:15	jannick	durka42: should I put my extern crate in main?
2017-01-05 13:53:33	durka42	that's the convention, but I gave you the other solution as well
2017-01-05 13:54:26	jannick	durka42: isn't self::.. for if you have modules inside a file?
2017-01-05 13:54:36	durka42	that too
2017-01-05 13:54:46	jannick	durka42: I don't I just have two files one with another name than main and main itself
2017-01-05 13:55:00	◥	tel (tel@moz-0jh5f2.ma.comcast.net) has joined #rust-beginners
2017-01-05 13:55:37	durka42	the thing is that `use` assumes the path starts at the crate root (main.rs or lib.rs) unless you specify otherwise by starting with self:: or super::
2017-01-05 13:55:50	durka42	this is different from paths in other places because of (imo) a design mistake
2017-01-05 13:55:54	◣	IslandUsurper (lyle@moz-jqaedc.rnfo.mfth.0306.2602.IP) has left #rust-beginners
2017-01-05 13:55:54	◥	p0x (ggrochow@moz-9as.smm.64.50.IP) has joined #rust-beginners
2017-01-05 13:56:09	◣	p0x (ggrochow@moz-9as.smm.64.50.IP) has quit (Quit: leaving)
2017-01-05 13:56:11	◣	lostInTheDataJungle (oli@moz-8c2877.pools.vodafone-ip.de) has quit (Client exited)
2017-01-05 13:56:40	durka42	the point is that self:: means to start the path at the current file
2017-01-05 13:56:44	durka42	which is where you put the `extern crate`
2017-01-05 13:56:45	durka42	so it makes sense
2017-01-05 13:57:14	◥	mib_x3lm1w (Mibbit@moz-3nm.f4r.202.88.IP) has joined #rust-beginners
2017-01-05 13:57:15	◣	djump (djump@moz-dkcp2c.wa.comcast.net) has quit (Connection closed)
2017-01-05 13:57:27	◥	djump (djump@moz-dkcp2c.wa.comcast.net) has joined #rust-beginners
2017-01-05 13:57:39	jannick	durka42: ahhh right
2017-01-05 13:58:08	jannick	durka42: that worked however it didn't get the impl std::cmp::Ord for f32
2017-01-05 13:58:46	durka42	well ordered-float does not contain any such thing, where did you get that idea? :)
2017-01-05 13:58:49	rkruppe	ordered_float doesn't add that impl. it can't.
2017-01-05 13:58:52	sprog	erm... do bad things happen if you run code with file io in the Playground? It's just the site stopped responding to me as soon as I did
2017-01-05 13:58:52	durka42	!crate ordered-float
2017-01-05 13:58:52	rustbot	ordered-float (0.3.0) - Wrappers for total ordering on floats. -> https://crates.io/crates/ordered-float <https://docs.rs/crate/ordered-float>
2017-01-05 13:58:55	◣	futile (felix@moz-ct43fm.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2017-01-05 13:58:57	durka42	_wrappers_
2017-01-05 13:59:30	durka42	sprog: just try again, the server craps out sometimes
2017-01-05 13:59:35	jannick	rkruppe: then how do I turn my f32 into a key for sort_by_key
2017-01-05 14:00:02	rkruppe	jannick: well, just wrap the float in one of the wrappers
2017-01-05 14:00:17	◥	p0x (ggrochow@moz-9as.smm.64.50.IP) has joined #rust-beginners
2017-01-05 14:01:13	jannick	rkruppe: right.. that worked
2017-01-05 14:01:38	Freyskeyd	hi
2017-01-05 14:01:39	Freyskeyd	i would like to do a tcp ping/pong, but i can't make the "pong" work.. https://is.gd/fZkGdt  can someone help me with that plz?
2017-01-05 14:03:00	◥	futile (felix@moz-ct43fm.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-05 14:03:16	@mbrubeck	Freyskeyd: https://is.gd/OcsusO
2017-01-05 14:04:10	@mbrubeck	Freyskeyd: The main change I had to make is not using `read_to_end` on the server.  The client doesn't close the connection after sending the ping, so the server can't wait for the "end" of the stream.
2017-01-05 14:04:18	◥	rkruppe_ (rkruppe@moz-c6skn4.unity-media.net) has joined #rust-beginners
2017-01-05 14:04:34	◣	ghosss (textual@moz-rr8npu.fios.verizon.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-05 14:04:46	◣	rkruppe (chatzilla@moz-c6skn4.unity-media.net) has quit (NickServ (RECOVER command used by rkruppe_))
2017-01-05 14:04:46	⚡	rkruppe_ is now known as rkruppe
2017-01-05 14:05:06	@mbrubeck	Freyskeyd: By the way, my logging messages might appear out of order but this is just because the threads are racing to get the lock on stdout
2017-01-05 14:05:25	Freyskeyd	mbrubeck: oh ok! thank's i will check it
2017-01-05 14:05:46	◥	NeverDie (NeverDie@moz-crtjcd.fios.verizon.net) has joined #rust-beginners
2017-01-05 14:06:06	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-05 14:06:51	◣	karinqe (karinqe@moz-ptt.nvt.172.163.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 14:07:36	@mbrubeck	Freyskeyd: Instead of `read_to_end` I had the server read exactly 4 bytes.  You could also have it read until a newline or something like that.  (You'd have to change the client's message to end with a newline.)
2017-01-05 14:08:46	voider1	https://github.com/voider1/teleborg what parts of the library should be async?
2017-01-05 14:09:37	◥	kermi (Mibbit@moz-tiqeb1.lv.cox.net) has joined #rust-beginners
2017-01-05 14:10:01	◣	hansaplast (hansaplast@moz-te77l9.ve71.89v9.120b.2a02.IP) has quit (Connection closed)
2017-01-05 14:10:16	kermi	hi, i'm trying to use rustup to target windows xp (making an app for a very legacy setup) at work
2017-01-05 14:10:28	◥	hansaplast (hansaplast@moz-te77l9.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2017-01-05 14:10:46	kermi	rustup target add i686-pc-windows-msvc; cargo build --target i686-pc-windows-msvc 
2017-01-05 14:11:02	◣	p0x (ggrochow@moz-9as.smm.64.50.IP) has quit (Quit: Lost terminal)
2017-01-05 14:11:09	Vtec234	Is there something like c++ std::bind in Rust?
2017-01-05 14:11:20	◥	p0x (ggrochow@moz-9as.smm.64.50.IP) has joined #rust-beginners
2017-01-05 14:11:38	◣	gunibert (gunibert@moz-1v6nka.dynamic.kabel-deutschland.de) has quit (Client exited)
2017-01-05 14:11:45	Vtec234	or maybe like haskell's partial application
2017-01-05 14:12:09	@mbrubeck	Vtec234: Not in the standard library, though I think there are some on crates.io
2017-01-05 14:14:11	@mbrubeck	hard to search for, though...
2017-01-05 14:14:31	◣	hansaplast (hansaplast@moz-te77l9.ve71.89v9.120b.2a02.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 14:14:46	Vtec234	yeah, i tried 'partial', and 'curry'
2017-01-05 14:15:02	Vtec234	well, it's not that important
2017-01-05 14:15:40	kermi	seems to build fine but running on xp gives a "X is not a valid Win32 application"
2017-01-05 14:16:18	◣	sebasmagri (user@moz-l4s.upu.146.189.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 14:16:22	kermi	also trying to run it in compatibility mode for xp service pack 3, gives no console output.
2017-01-05 14:16:26	misdreavus	winxp is a low-tier-support platform, iirc, i don't remember what bits are needed
2017-01-05 14:16:32	kermi	not sure where to go from here
2017-01-05 14:16:46	kermi	yeah misdreavus i know its tier3, but no further info
2017-01-05 14:17:10	misdreavus	WindowsBunny: around? someone's trying to build something for XP ^
2017-01-05 14:18:37	◥	bkn (bkn@moz-dbkqi7.fios.verizon.net) has joined #rust-beginners
2017-01-05 14:18:47	◣	kulshrax (kulshrax@moz-uq1iib.8r4b.grs8.010d.2620.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 14:19:06	misdreavus	i wonder what linker flags you could tweak around
2017-01-05 14:19:20	◥	bjz (bjz@moz-puppgq.tpgi.com.au) has joined #rust-beginners
2017-01-05 14:19:38	◥	bschaefer (bschaefer@moz-6rr.8im.18.24.IP) has joined #rust-beginners
2017-01-05 14:20:23	◣	bjz (bjz@moz-puppgq.tpgi.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 14:20:33	◣	iiddnn__ (iacopodeeno@moz-fcea0a.retail.telecomitalia.it) has quit (Client exited)
2017-01-05 14:20:54	misdreavus	can you get a basic "hello world" thing built that'll run on the system?
2017-01-05 14:21:28	◣	Sanqui (SanquiG@moz-33aens.net) has quit (Ping timeout: 121 seconds)
2017-01-05 14:21:37	◣	obi_wan (Mibbit@moz-31g.rme.152.107.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 14:21:43	misdreavus	that it's not recognizing it as a valid executable in the first place makes me wonder
2017-01-05 14:22:06	misdreavus	you might need to build against a different vc++ runtime lib
2017-01-05 14:22:18	◣	wallacoloo____ (colin@moz-actvqc.dhcp4.washington.edu) has quit (Client exited)
2017-01-05 14:22:59	misdreavus	unfortunately i haven't ever messed with link.exe so i dunno what flags to use :/
2017-01-05 14:23:19	kermi	i literally did println("hello"); in main misdreavus 
2017-01-05 14:23:29	misdreavus	cool, just making sure
2017-01-05 14:23:39	kermi	yeah, no crates 
2017-01-05 14:23:43	misdreavus	didn't know if you had a bigger bin that you were trying to run
2017-01-05 14:24:00	kermi	90KB exe
2017-01-05 14:24:55	kermi	no, trying to find a way to deal with the system... was considering just doing in older version of c# but seems like a good chance to use rust and be lower overhead
2017-01-05 14:26:30	misdreavus	yeah, doing something in .net 3.5 would be a safe bet if this doesn't work out
2017-01-05 14:26:38	misdreavus	i'm betting it's the vc runtime tho
2017-01-05 14:26:48	misdreavus	what version of visual studio/the build tools are you using?
2017-01-05 14:28:51	◣	montanonic (nicholas@moz-u3evs7.or.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-05 14:31:28	◣	Freyskeyd (Freyskeyd@moz-9m9m23.dsl.ovh.fr) has quit (A TLS packet with unexpected length was received.)
2017-01-05 14:31:44	◣	Aaronepower (Aaronepower@moz-jqc.96c.97.79.IP) has quit (Connection closed)
2017-01-05 14:32:02	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-05 14:32:41	◣	mib_x3lm1w (Mibbit@moz-3nm.f4r.202.88.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 14:32:44	◥	Aaronepower (Aaronepower@moz-jqc.96c.97.79.IP) has joined #rust-beginners
2017-01-05 14:33:49	◥	mib_fnuzy9 (Mibbit@moz-jb22lg.access.telenet.be) has joined #rust-beginners
2017-01-05 14:34:28	◣	mib_fnuzy9 (Mibbit@moz-jb22lg.access.telenet.be) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 14:34:44	misdreavus	also run a "cargo clean; cargo build --verbose" to see what it's handing the linker
2017-01-05 14:34:52	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Ping timeout: 121 seconds)
2017-01-05 14:36:05	◥	nkr (nkr@moz-p2a.qp2.141.177.IP) has joined #rust-beginners
2017-01-05 14:37:11	◣	beedaddy (martin@moz-dmecon.dip0.t-ipconnect.de) has quit (Quit: Konversation terminated!)
2017-01-05 14:37:25	◣	sprog (Mibbit@moz-ld1n7m.dynamic.surfer.at) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 14:38:14	◣	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has quit (Ping timeout: 121 seconds)
2017-01-05 14:38:41	◣	afshinmeh (textual@moz-5tcce4.hgkk.s1m0.8084.2a02.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 14:39:24	◣	Akien (akien@moz-ailo79.dyn.telefonica.de) has quit (A TLS packet with unexpected length was received.)
2017-01-05 14:40:00	◣	p0x (ggrochow@moz-9as.smm.64.50.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 14:40:08	◣	nkr (nkr@moz-p2a.qp2.141.177.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 14:40:14	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 14:40:38	◥	Sanqui (SanquiG@moz-33aens.net) has joined #rust-beginners
2017-01-05 14:40:51	kermi	misdreavus:  i'm using vs2015 community
2017-01-05 14:41:16	⚡	FrenchToast is now known as frenchtoast
2017-01-05 14:41:26	misdreavus	yeah, i bet it's linking against a runtime that's not installed on the xp machine
2017-01-05 14:41:38	⚡	frenchtoast is now known as FrenchToast
2017-01-05 14:42:06	misdreavus	you can either figure out how to install the vs2015 c++ runtime on the xp machine, or figure out how to build your rust program against an older vc++ runtime that's more likely to be there already
2017-01-05 14:42:21	◣	Kreest (Kreest@moz-aj2s0f.pool.invitel.hu) has quit (Connection closed)
2017-01-05 14:42:51	◥	junqed (junqed@moz-n8f.kgr.70.178.IP) has joined #rust-beginners
2017-01-05 14:42:57	kermi	hmm, was able to just try on a 'windows embedded standard from 2010'... it gave a new error
2017-01-05 14:43:08	kermi	VCRUNTIME140.dll is missing from your computer
2017-01-05 14:43:12	misdreavus	aha!
2017-01-05 14:43:31	misdreavus	that seals it for me
2017-01-05 14:43:31	◥	montanonic (nicholas@moz-u3evs7.or.comcast.net) has joined #rust-beginners
2017-01-05 14:44:04	kermi	so you need the latest runtimes on xp... sigh that's probably a no go given ms position on xp
2017-01-05 14:44:47	misdreavus	yeah, i dunno there
2017-01-05 14:44:57	◣	futile (felix@moz-ct43fm.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2017-01-05 14:45:55	misdreavus	although i think i heard WindowsBunny mention that newer rust versions can embed the c runtime? it might be a nightly thing right now
2017-01-05 14:46:01	◥	p0x (ggrochow@moz-9as.smm.64.50.IP) has joined #rust-beginners
2017-01-05 14:46:22	kermi	zomg WindowsBunny where art thou?
2017-01-05 14:46:26	◣	niklasad1 (niklasad1@moz-1l8g7e.cust.bredbandsbolaget.se) has quit (Ping timeout: 121 seconds)
2017-01-05 14:46:59	◥	afshinmeh (textual@moz-a7ol0j.hgkk.s1m0.8084.2a02.IP) has joined #rust-beginners
2017-01-05 14:47:19	misdreavus	i dunno his schedule, or he just might not be around at the moment
2017-01-05 14:47:39	misdreavus	(he's the maintainer of the winapi crate and general guru of windows stuff here)
2017-01-05 14:47:57	kermi	thanks misdreavus, legacy sucks
2017-01-05 14:48:03	misdreavus	it happens
2017-01-05 14:48:53	misdreavus	i remember handmade hero set some linker args that disabled linking the c runtime, i bet there's something related that can set an earlier version if you have it available on your system to link
2017-01-05 14:50:10	kermi	yeah i was hoping for at least more detail to give on why its not valid
2017-01-05 14:50:13	◣	dm3 (dm3@moz-urssv3.static.zebra.lt) has quit (Connection closed)
2017-01-05 14:50:13	◣	stelarcf (stelarcf@moz-jd7lsk.com) has quit (Client exited)
2017-01-05 14:50:29	◥	stelarcf (stelarcf@moz-jd7lsk.com) has joined #rust-beginners
2017-01-05 14:50:29	kermi	but the vcruntime140.dll is a hint i guess
2017-01-05 14:50:33	misdreavus	i think that's the xp-era message when it doesn't have the right stuff to run something
2017-01-05 14:50:46	◥	dm3 (dm3@moz-urssv3.static.zebra.lt) has joined #rust-beginners
2017-01-05 14:50:52	misdreavus	i hit something similar on a windows server 2003 system when trying to run some .net 4.5 stuff
2017-01-05 14:50:57	◣	blinky (Mibbit@moz-akf720.hsi3.kabel-badenwuerttemberg.de) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 14:51:22	◥	lilybet (Mibbit@moz-akf720.hsi3.kabel-badenwuerttemberg.de) has joined #rust-beginners
2017-01-05 14:51:22	misdreavus	the exe says to load this runtime, but it doesn't have it, so it just chokes
2017-01-05 14:51:59	kermi	its not the kind of thing where i can just drop that dll in with the exe and be happy right?
2017-01-05 14:52:12	kermi	i thought rust made a static binary with no deps
2017-01-05 14:52:18	misdreavus	probably not
2017-01-05 14:52:26	misdreavus	it still needs some stuff from libc
2017-01-05 14:52:31	~steveklabnik	rust will do that for all rust code; but it won't for libc
2017-01-05 14:52:34	~steveklabnik	unless you use musl
2017-01-05 14:52:43	~steveklabnik	but iirc on windows, you're not supposed to statically link this stuff?
2017-01-05 14:52:47	~steveklabnik	i always forget
2017-01-05 14:52:48	◣	lilybet (Mibbit@moz-akf720.hsi3.kabel-badenwuerttemberg.de) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 14:52:52	▷	steveklabnik is the worst windows user ever
2017-01-05 14:53:07	◥	mib_numysj (Mibbit@moz-akf720.hsi3.kabel-badenwuerttemberg.de) has joined #rust-beginners
2017-01-05 14:53:20	kermi	windows you can static link all day long, at least in c++
2017-01-05 14:53:37	kermi	but usually faster not to
2017-01-05 14:53:50	◣	afshinmeh (textual@moz-a7ol0j.hgkk.s1m0.8084.2a02.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 14:53:59	~steveklabnik	i mean you can, but then you're not portable across windows versions?
2017-01-05 14:54:03	~steveklabnik	or something
2017-01-05 14:54:05	kermi	well yeah
2017-01-05 14:54:21	Redrield	Is there a way I can break down a u32 to a [u8;4] that I can write to a Vec<u8>?
2017-01-05 14:54:30	~steveklabnik	!crate byteorder
2017-01-05 14:54:30	rustbot	byteorder (1.0.0) - Library for reading/writing numbers in big-endian and little-endian. -> https://crates.io/crates/byteorder <https://docs.rs/crate/byteorder>
2017-01-05 14:54:33	misdreavus	pointer casts, or the byteorder crate
2017-01-05 14:54:35	~steveklabnik	Redrield: ^
2017-01-05 14:54:40	Redrield	Thanks
2017-01-05 14:54:48	◣	dm3 (dm3@moz-urssv3.static.zebra.lt) has quit (Ping timeout: 121 seconds)
2017-01-05 14:54:48	kermi	unfortunately this is for business line point of sales stuff and updates are a no go right now
2017-01-05 14:55:05	~steveklabnik	i hear you
2017-01-05 14:55:08	kermi	sad that the best option might be c# :|
2017-01-05 14:55:11	~steveklabnik	anyway, so it should be possible
2017-01-05 14:55:19	~steveklabnik	it's just not the default because of that reason
2017-01-05 14:55:37	◥	afshinmeh (textual@moz-v7pv40.hgkk.s1m0.8084.2a02.IP) has joined #rust-beginners
2017-01-05 14:55:51	kermi	yeah i know xp is tier 3 but no extra info on how tier3 it is
2017-01-05 14:56:30	~steveklabnik	https://github.com/rust-lang/rust/issues/37406#issuecomment-270456213
2017-01-05 14:56:31	~steveklabnik	oh
2017-01-05 14:56:44	~steveklabnik	well, basically, what the deal is that, XP doesn't have some primitives taht we rely on
2017-01-05 14:56:48	~steveklabnik	like, mutexes? or something?
2017-01-05 14:56:54	~steveklabnik	so some stuff just won't work
2017-01-05 14:57:14	~steveklabnik	the stuff that works should be just as supported as other windows versions
2017-01-05 14:57:48	misdreavus	i knew i saw that issue! i couldn't find it, thanks steveklabnik!
2017-01-05 14:57:54	◣	mib_numysj (Mibbit@moz-akf720.hsi3.kabel-badenwuerttemberg.de) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 14:58:03	~steveklabnik	np :)
2017-01-05 15:00:00	◣	bkn (bkn@moz-dbkqi7.fios.verizon.net) has quit (Client exited)
2017-01-05 15:00:33	◣	junqed (junqed@moz-n8f.kgr.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-05 15:01:32	misdreavus	so, we're looking at "RUSTFLAGS='-C target-feature=+crt-static' cargo build"? is that stable? (is that what you just asked in the issue? :P)
2017-01-05 15:01:46	~steveklabnik	so
2017-01-05 15:01:49	~steveklabnik	the reason i found this
2017-01-05 15:01:58	~steveklabnik	is that it's in the 1.14 release annoucement........
2017-01-05 15:02:36	~steveklabnik	and so yeah
2017-01-05 15:02:38	kermi	sorry i'm a little lost, are these flags related to my issue?
2017-01-05 15:02:51	~steveklabnik	kermi: yes, this is about statically linking in that windows runtime
2017-01-05 15:02:55	~steveklabnik	so you get a 100% static binary
2017-01-05 15:03:03	◣	Powersource (Powersource@moz-u199ao.cust.bredband2.com) has quit (Quit: Leaving)
2017-01-05 15:03:34	kermi	so i add those options to cargo build?
2017-01-05 15:03:49	~steveklabnik	try doing the RUSTFLAGS bit that misdreavus suggested
2017-01-05 15:03:55	kermi	oh, looks like an env variable
2017-01-05 15:03:58	misdreavus	yeah
2017-01-05 15:03:58	~steveklabnik	yeah
2017-01-05 15:04:05	◥	eibwen (eibwen@moz-tfu661.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-05 15:04:43	misdreavus	i don't remember if the env-variable-for-a-single-command thing works like that in windows too, but that's the basic idea, have that variable set like that for a "cargo build"
2017-01-05 15:05:27	◣	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has quit (Quit: Connection closed for inactivity)
2017-01-05 15:05:47	◣	pylbrecht (pylbrecht@moz-rhd91h.leu1.nofh.8109.2a02.IP) has quit (Quit: Segmentation fault (core dumped))
2017-01-05 15:06:03	voider1	https://github.com/voider1/teleborg could someone give some feedback on my library?
2017-01-05 15:06:09	kermi	cargo build --target i686-pc-windows-msvc;  Compiling backup_client v0.1.0 (file:///C:/Users/X/Desktop/aloha_stuff/backup_client) '+crt-static' is not a recognized feature for this target (ignoring feature)
2017-01-05 15:06:28	◣	rotty (rotty@moz-07gt5n.chaostreff.at) has quit (Quit: WeeChat 1.5)
2017-01-05 15:06:41	misdreavus	what version of rust are you using? "rustc -vV"
2017-01-05 15:07:09	kermi	rustc 1.14.0 (e8a012324 2016-12-16) binary: rustc commit-hash: e8a0123241f0d397d39cd18fcc4e5e7edde22730 commit-date: 2016-12-16 host: x86_64-pc-windows-msvc release: 1.14.0 LLVM version: 3.9
2017-01-05 15:07:22	misdreavus	welp
2017-01-05 15:07:25	~steveklabnik	hrm
2017-01-05 15:07:30	~steveklabnik	too bad WindowsBunny isn't around
2017-01-05 15:07:36	~steveklabnik	since they'd know exactly what was up
2017-01-05 15:08:00	kermi	is there a certain time they are around?
2017-01-05 15:10:10	~steveklabnik	not sure
2017-01-05 15:10:16	~steveklabnik	i forget where in the world they are
2017-01-05 15:11:34	voider1	Can serde detect another object in a struct and then deserialize that too?
2017-01-05 15:11:52	~steveklabnik	voider1: i don't have the chance to give feedback right this second, sorry :(
2017-01-05 15:12:12	radix-M	voider1: as long as that other type has Deserialize implemented for it, yes
2017-01-05 15:12:19	◥	mchang (mchang@moz-cfsj56.fruv.144q.e000.2605.IP) has joined #rust-beginners
2017-01-05 15:12:25	voider1	steveklabnik: Do you have time for it anytime soon?
2017-01-05 15:12:37	voider1	radix-M: Can it also do Vecs?
2017-01-05 15:12:38	mchang	Can anyone explain why this doesn't work? - https://is.gd/eOaedq - If i use a primitive type instead of a struct, it seems to work
2017-01-05 15:12:45	radix-M	voider1: yep.
2017-01-05 15:12:55	voider1	radix-M: That's quiet amazing.
2017-01-05 15:13:02	◣	tel (tel@moz-0jh5f2.ma.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-05 15:13:47	radix-M	mchang: looking... the first thing I notice is you have an extraneous `;` at the end of your unsafe block that's messing things up
2017-01-05 15:13:47	misdreavus	mchang: the semicolon in the unsafe block makes that expression return () instead of whatever the function returns
2017-01-05 15:13:55	solenodic	mchang: extra semicolon
2017-01-05 15:14:23	~steveklabnik	voider1: maybe, tomorrow at the latest
2017-01-05 15:14:37	mchang	lol thaks! 
2017-01-05 15:14:53	◣	ubsandroid (ubsan@moz-2an7t4.pi10.ubiv.fb90.2607.IP) has quit (Quit: <3)
2017-01-05 15:15:00	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-05 15:15:14	radix-M	mchang: then you need to 1. add #[derive(Clone)] to your data structure, and 2. declare test_vector with `let mut test_vector = ...`
2017-01-05 15:15:20	◣	SilverKey (SilverKey@moz-pf5aar.biz.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-05 15:15:53	◥	sebasmagri (user@moz-l4s.upu.146.189.IP) has joined #rust-beginners
2017-01-05 15:15:54	◣	kbknapp (kevin@moz-nolcos.fios.verizon.net) has quit (Ping timeout: 121 seconds)
2017-01-05 15:15:58	misdreavus	voider1: before even touching the lib, i just want to note that a GPL license for a library is pretty restrictive (and i say this as a free software nut >_>)
2017-01-05 15:16:15	mchang	radix-M: got it thanks! doh, semi-colon . Thanks
2017-01-05 15:16:24	mchang	radix-M: misdreavus solenodic that fixed it, th anks for the quick reply!
2017-01-05 15:16:50	misdreavus	voider1: unfortunately, LGPL and rust don't really get along either so if you don't want to force consumers to GPL their applications you really can't use that family of licenses, sadly :/
2017-01-05 15:17:16	misdreavus	voider1: (0.1.0 of my twitter library was LGPL until i was told that by this channel)
2017-01-05 15:17:19	~steveklabnik	forcing it is like, half the point ;)
2017-01-05 15:17:31	~steveklabnik	(i like the GPL but am very much in the minority in rust world)
2017-01-05 15:17:31	misdreavus	right, just noting >_>
2017-01-05 15:18:02	misdreavus	i'm not usually accustomed to seeing libraries get the full GPL
2017-01-05 15:18:08	radix-M	voider1: I'm curious about why you decided to have versions of `as_*_*` that return both Result and Option. If you had only the Result version, users could trivially convert Results to Options (if they need them) by adding `.ok()`
2017-01-05 15:20:45	◥	kulshrax (kulshrax@moz-e6bked.j0qm.7vpd.010d.2620.IP) has joined #rust-beginners
2017-01-05 15:21:50	radix-M	Is there a way to declare that some trait-associated type must implement some other trait?
2017-01-05 15:22:58	misdreavus	voider1: make more things pub, the generated doc for this is really light :P
2017-01-05 15:23:00	radix-M	Either in the trait, or otherwise not have to declare the requirements in every function I use that type in
2017-01-05 15:23:20	misdreavus	type Thing: SomeConstraint;
2017-01-05 15:23:21	misdreavus	iitc
2017-01-05 15:23:24	misdreavus	**iirc
2017-01-05 15:23:37	radix-M	misdreavus: o, lemme see
2017-01-05 15:24:39	radix-M	misdreavus: nice! I don't know why I didn't think of that, I tried something silly like `type Type where ...`
2017-01-05 15:24:44	misdreavus	(^^)b
2017-01-05 15:25:04	◣	ebvalaim (bartek@moz-ehk6a9.dynamic.chello.pl) has quit (Quit: Leaving.)
2017-01-05 15:25:05	◣	y6cmE (root@moz-2du.csp.23.58.IP) has quit (Quit: leaving)
2017-01-05 15:25:14	◥	ubsandroid_ (ubsan@moz-29oige.pi10.ubiv.fb90.2607.IP) has joined #rust-beginners
2017-01-05 15:25:33	radix-M	I am very impressed with how much type-level shenanigans I can get up to in Rust so far. No HKTs, but at least I have type-level functions :)
2017-01-05 15:26:23	◣	nZac (nZac@moz-0knq4t.midco.net) has quit (A TLS packet with unexpected length was received.)
2017-01-05 15:26:33	◥	tel (tel@moz-0jh5f2.ma.comcast.net) has joined #rust-beginners
2017-01-05 15:26:58	durka42	I'm scared to ask, but what are you working on? :)
2017-01-05 15:27:19	radix-M	durka42: a little digital tabletop RPG system
2017-01-05 15:27:32	durka42	with type level functions? o_O
2017-01-05 15:27:59	FrenchToast	Is it just me or does all programing start with D&D
2017-01-05 15:28:13	onelson	any program can be a correct program if you study category theory and become a type astronaut and transcend reality
2017-01-05 15:28:19	◣	jbradberry (jrb@moz-kpp3mi.biz.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-05 15:28:19	radix-M	yeah, I just used a simple one the other day. I am perhaps obsessed with invalid=unrepresentable... :)
2017-01-05 15:28:20	◣	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-05 15:29:17	FrenchToast	I feel like I'm so close to understanding the type system
2017-01-05 15:29:28	radix-M	but I am tracking the state of creatures in combat, so like, if the current creature is incapacitated, there is no way for them to perform an action
2017-01-05 15:30:14	kermi	misdreavus: steveklabnik: looks like at least on the windows embedded system node 7.4 and c# 4.0 work fine.  obviously was hoping for rust to work.  i'll poke my head in hopefully WindowsBunny  knows what's up
2017-01-05 15:30:22	◥	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has joined #rust-beginners
2017-01-05 15:30:30	◥	snowe (snowe@moz-jvoosu.co.comcast.net) has joined #rust-beginners
2017-01-05 15:30:33	~steveklabnik	kermi: cool. interested to hear about this!
2017-01-05 15:30:37	radix-M	also, games can either be in-combat or out-of-combat, and that's where I used a type-level function. If my Game<NoCombat>, then Game.combat is () instead of a Combat<...> 
2017-01-05 15:30:50	misdreavus	"becoming a type astronaut and transcend[ing] reality" sounds very on-topic for tabletop rpgs
2017-01-05 15:30:53	kermi	steveklabnik: and thanks for the work on the docs / talks
2017-01-05 15:30:57	MikeMountain	Is there some rationale for the Tier-decisions?  https://forge.rust-lang.org/platform-support.html doesn't lik anything, and I'd like to know why *BSD has such a bad reception.
2017-01-05 15:31:08	radix-M	it's actually pretty simple stuff as type-level trickery goes
2017-01-05 15:31:23	kermi	going to go back to location to try these options there.
2017-01-05 15:31:25	FrenchToast	So here's a question, I have an enum which contains 4 types... something like TheThing { Thing1(string), Thing2(u8) ... }
2017-01-05 15:31:31	~steveklabnik	kermi: you're welcome :)
2017-01-05 15:31:36	FrenchToast	I have a function which returns said enum
2017-01-05 15:31:55	◥	nZac (nZac@moz-0knq4t.midco.net) has joined #rust-beginners
2017-01-05 15:32:40	breeden1	MikeMountain: they are tier, i wouldn't call that a bad reputation
2017-01-05 15:32:40	FrenchToast	So I save the result, then I do a match on the result, so that I can access the actual type as a variable instead of the enum which wraps it
2017-01-05 15:32:55	breeden1	MikeMountain: just Tear 1 is reserved for the big3
2017-01-05 15:33:11	◥	alx741 (alx741@moz-22t.a3g.152.190.IP) has joined #rust-beginners
2017-01-05 15:33:25	FrenchToast	but all I'm doing once I've accessed it is calling the same function with the same args, regardless of which type it was
2017-01-05 15:33:33	misdreavus	kermi: huh. i guess that makes sense, i think .net 4 is that old - i'd be surprised if it still ran on the xp machine tho
2017-01-05 15:33:58	voider1	radix-M: Because I want it to error on me if it's not found.
2017-01-05 15:34:01	FrenchToast	is there a way I could remove the match statement by unwrapping the enumeration?
2017-01-05 15:34:03	radix-M	FrenchToast: sounds like you want some generic functions then
2017-01-05 15:34:05	voider1	misdreavus: What license  should I get?
2017-01-05 15:34:07	◣	bereddy (bereddy@moz-2e6qc0.fios.verizon.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2017-01-05 15:34:14	FrenchToast	yeah basically radix-M
2017-01-05 15:34:32	◣	snowe (snowe@moz-jvoosu.co.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-05 15:34:38	radix-M	FrenchToast: have you ever written any functions like `fn foo<T>(val: T)` yet? 
2017-01-05 15:34:40	FrenchToast	the compiler says..help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `encrypt_block`, perhaps you need to implement it:
2017-01-05 15:34:43	misdreavus	voider1: the majority of crates get the same as rust itself: dual MIT/Apache2
2017-01-05 15:35:06	radix-M	voider1: I don't understand why you can't do that with only the Result versions.
2017-01-05 15:35:20	◥	skippy (Mibbit@moz-b8d4n3.nb.bellaliant.net) has joined #rust-beginners
2017-01-05 15:35:23	◣	alx741_ (alx741@moz-8e1.qnp.152.190.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 15:35:31	FrenchToast	radix-M: oh, ok yeah I'll give that a shot
2017-01-05 15:35:33	misdreavus	voider1: i personally made my lib just Apache2 (turns out it restricts gpl2 consumers) but if you're curious on way or the other check out choosealicense.com
2017-01-05 15:35:47	misdreavus	**one way or the other
2017-01-05 15:35:50	voider1	radix-M: I could do that I think. 
2017-01-05 15:35:57	◣	nZac (nZac@moz-0knq4t.midco.net) has quit (Ping timeout: 121 seconds)
2017-01-05 15:35:57	voider1	radix-M: I will look into it.
2017-01-05 15:36:13	skippy	hi, question on chunking slices.... is there a built-in method to get N chunks, instead of chunks of size N?
2017-01-05 15:36:17	radix-M	FrenchToast: if you need any more help, I could take a look at your code
2017-01-05 15:37:05	◣	isd1 (isd@moz-d4f8e9.cable.rcn.com) has quit (Ping timeout: 121 seconds)
2017-01-05 15:37:19	FrenchToast	radix-M: actually yeah I think that's a better option, but its dependent on a library
2017-01-05 15:37:51	◣	sqwishy (sqwishy@moz-ifh.q9a.172.69.IP) has quit (Connection closed)
2017-01-05 15:38:37	◥	sqwishy (sqwishy@moz-ifh.q9a.172.69.IP) has joined #rust-beginners
2017-01-05 15:39:01	FrenchToast	radix-M: looking to see if there is a way to share my GitHub repo with you
2017-01-05 15:39:15	FrenchToast	radix-M currently it's set to private
2017-01-05 15:39:18	misdreavus	skippy: i don't think there's a built-in for that, tho you could try something like .chunks((slice.len() / N) + 1)
2017-01-05 15:39:22	◣	zako (zako@moz-ormegi.dynamicip.rima-tde.net) has quit (Ping timeout: 121 seconds)
2017-01-05 15:39:32	FrenchToast	radix-M: mostly because my rust is embarrassing :)
2017-01-05 15:39:32	skippy	oh, good idea, thx!
2017-01-05 15:40:05	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 15:40:11	radix-M	oh ok
2017-01-05 15:40:20	misdreavus	the "+ 1" is up for debate, but yeah
2017-01-05 15:40:22	◥	mchang__ (mchang@moz-cfsj56.fruv.144q.e000.2605.IP) has joined #rust-beginners
2017-01-05 15:40:26	◣	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has quit (Ping timeout: 121 seconds)
2017-01-05 15:40:32	FrenchToast	well, all my code is embarrassing, but I guess the additional reason is I'm doing an online challenge and didn't want to ruin the challenge for others looking to do them as well
2017-01-05 15:40:55	◣	ubsandroid_ (ubsan@moz-29oige.pi10.ubiv.fb90.2607.IP) has quit (Quit: <3)
2017-01-05 15:41:03	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-05 15:41:31	◣	manuel_ (manuel@moz-44m.14s.6.209.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 15:41:53	FrenchToast	oh there we go
2017-01-05 15:42:09	FrenchToast	I can add you as a collaborator radix-M, do you have a GitHub account?
2017-01-05 15:42:19	radix-M	FrenchToast: yep, "radix"
2017-01-05 15:43:01	FrenchToast	https://github.com/frenchtoastbeer/cryptopals/invitations
2017-01-05 15:43:17	◣	dionysus69 (Thunderbird@moz-f3r.u5k.134.178.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 15:43:18	◣	mchang (mchang@moz-cfsj56.fruv.144q.e000.2605.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 15:43:59	◥	jinshil (jinshl@moz-76n.0jp.94.115.IP) has joined #rust-beginners
2017-01-05 15:45:09	◥	ubsandroid_ (ubsan@moz-81uufq.pi10.ubiv.fb90.2607.IP) has joined #rust-beginners
2017-01-05 15:45:21	radix-M	FrenchToast: ok, lemme look at rust-crypto for a sec
2017-01-05 15:46:12	FrenchToast	I wasn't sure what copy was uploaded, so I did a fresh push
2017-01-05 15:47:15	◥	PillowFuzz (Mibbit@moz-bq3v4d.afrihost.co.za) has joined #rust-beginners
2017-01-05 15:47:36	PillowFuzz	Hey there everyone!
2017-01-05 15:47:49	◣	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-05 15:48:26	FrenchToast	radix-M: So the problem *I think* is that on the one hand, I'd like to avoid re-initializing an AES crypto engine every time.  Eventually I'll probably make an encryption struct so that the encryption struct can exist in a way that avoids re-initializing AES every time I want to encrypt a block
2017-01-05 15:49:23	◣	afshinmeh (textual@moz-v7pv40.hgkk.s1m0.8084.2a02.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 15:49:55	◥	djump_ (djump@moz-dkcp2c.wa.comcast.net) has joined #rust-beginners
2017-01-05 15:50:15	FrenchToast	raidix-M: but on the other hand, right now inside the aes_encrypt_block() function (in crypt.rs) is creating the object, and then using a match to basically unwrap the enum so that I can call the appropriate encrypt_block.
2017-01-05 15:52:02	radix-M	FrenchToast: so basically you can probably just use the BlockEncryptor trait instead of the enum (at least some of the time)
2017-01-05 15:52:06	radix-M	I'm gonna try something
2017-01-05 15:52:12	◣	djump (djump@moz-dkcp2c.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-05 15:53:18	radix-M	though it might require boxing
2017-01-05 15:53:28	FrenchToast	radix-M: definitely appreciate your help, I've been stuck on solving this particular thing for a while now due to my nooblike skillz
2017-01-05 15:54:22	FrenchToast	My nunchuck skills are much better than my rust skills, and I don't think I've ever held nunchucks.
2017-01-05 15:54:33	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-05 15:54:55	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Connection closed)
2017-01-05 15:55:45	radix-M	FrenchToast: I have only been using Rust for like three weeks so it is a good opportunity to practice for me
2017-01-05 15:55:52	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-05 15:56:33	◥	manuel_ (manuel@moz-44m.14s.6.209.IP) has joined #rust-beginners
2017-01-05 15:57:10	FrenchToast	Yah, I tried boxing, and I tried making a generic function, both of those attempts failed, even if they were a good way to solve the problem
2017-01-05 15:57:42	radix-M	FrenchToast: so yeah I just got it to work with boxing, but it took some fiddling
2017-01-05 15:57:49	◣	oln (smuxi@moz-h6kap0.customer.cdi.no) has quit (Connection closed)
2017-01-05 15:58:13	FrenchToast	radix-M: Oh sweet!
2017-01-05 15:58:20	◣	PillowFuzz (Mibbit@moz-bq3v4d.afrihost.co.za) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-05 15:59:28	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Connection closed)
2017-01-05 15:59:31	◣	hexagoxel (hexagoxel@moz-it62hu.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2017-01-05 15:59:52	FrenchToast	wow dude.  I could cry I'm so pleased with your solution...
2017-01-05 16:00:02	radix-M	hehe
2017-01-05 16:00:12	◣	eibwen (eibwen@moz-tfu661.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-05 16:00:26	▷	FrenchToast celebrates newfound wisdom!
2017-01-05 16:00:37	◣	manuel_ (manuel@moz-44m.14s.6.209.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 16:00:44	radix-M	FrenchToast: it's interesting to note the similarities between certain enums and typeclasses. it just so happened that in this case, there was already a typeclass for what you were operating on (BlockEncryptor)
2017-01-05 16:00:48	◥	konstin (konstin@moz-90b.42o.243.162.IP) has joined #rust-beginners
2017-01-05 16:00:56	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 16:01:02	◣	p0x (ggrochow@moz-9as.smm.64.50.IP) has quit (Quit: leaving)
2017-01-05 16:01:29	FrenchToast	I figured the hint that the compiler was giving me was relevant, but I had no idea how to actually use it
2017-01-05 16:02:24	◣	machuga (machuga@moz-kuh.odq.223.162.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-05 16:03:03	◥	mada (mariano@moz-5gj.4co.170.181.IP) has joined #rust-beginners
2017-01-05 16:03:06	◣	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has quit (Quit: Leaving)
2017-01-05 16:05:40	◣	kulshrax (kulshrax@moz-e6bked.j0qm.7vpd.010d.2620.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-05 16:06:07	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-05 16:08:01	◥	kbknapp (kevin@moz-kog.013.140.38.IP) has joined #rust-beginners
2017-01-05 16:08:28	konstin	Can I make a function in a trait and in the trait implementation private? 
2017-01-05 16:08:41	◣	plutoniix (q@moz-5jo.4dj.25.125.IP) has quit (Quit: Leaving)
2017-01-05 16:08:43	shahn	no
2017-01-05 16:09:00	◥	manuel_ (manuel@moz-5eskqg.ma.comcast.net) has joined #rust-beginners
2017-01-05 16:09:04	konstin	That's odd. Why not?
2017-01-05 16:09:17	◥	wallacoloo____ (colin@moz-tvseqg.tukw.qwest.net) has joined #rust-beginners
2017-01-05 16:09:26	shahn	because private stuff is an implementation detail I guess
2017-01-05 16:09:58	◣	zao (zao@moz-lupdiq.priv.bahnhof.se) has left #rust-beginners
2017-01-05 16:10:55	konstin	Well that kinda makes sense. Thanks
2017-01-05 16:11:01	shahn	private things are not visible outside the current namespace, so that would be a weird exception for traits
2017-01-05 16:11:28	◣	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 16:11:28	◣	wallacoloo____ (colin@moz-tvseqg.tukw.qwest.net) has quit (Client exited)
2017-01-05 16:12:16	konstin	I see the design pattern here. I've tried to do it like in OOP, but my helper function obviously does not belong to the crate
2017-01-05 16:13:28	◥	wallacoloo____ (colin@moz-tvseqg.tukw.qwest.net) has joined #rust-beginners
2017-01-05 16:13:36	◥	bkn (bkn@moz-dbkqi7.fios.verizon.net) has joined #rust-beginners
2017-01-05 16:14:28	shahn	konstin: belong to the trait you mean?
2017-01-05 16:14:38	◣	peschkaj (sid156955@moz-br36jm.brockwell.irccloud.com) has quit (NickServ (RECOVER command used by peschkaj_))
2017-01-05 16:14:38	◥	peschkaj (peschkaj@moz-vr7pjk.or.comcast.net) has joined #rust-beginners
2017-01-05 16:15:29	konstin	oh yes of course
2017-01-05 16:17:12	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-05 16:18:29	shahn	:)
2017-01-05 16:19:28	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Connection closed)
2017-01-05 16:19:52	◥	spear2 (chatzilla@moz-5ij8s5.eugn.qwest.net) has joined #rust-beginners
2017-01-05 16:21:42	◥	lpghatguy (LPGhatguy@moz-heo.6h1.32.71.IP) has joined #rust-beginners
2017-01-05 16:21:58	◣	bread|laptop (bread@moz-fnm.4h1.16.70.IP) has quit (Client exited)
2017-01-05 16:23:20	◣	tyoc213 (tyoc@moz-geq.1mu.58.209.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 16:23:34	◣	durka42 (durka42@moz-h07.vjt.130.158.IP) has quit (Client exited)
2017-01-05 16:24:53	◣	peschkaj (peschkaj@moz-vr7pjk.or.comcast.net) has quit (Quit: leaving)
2017-01-05 16:25:28	sebasmagri	Hi! could someone help me with a borrowing/lifetimes issue? https://play.rust-lang.org/?gist=4bbc6ba5dffe8f96faf04ed84d462c9b&version=stable&backtrace=0
2017-01-05 16:25:30	◥	ghishadow___________ (ghishadow@moz-pns.pkp.199.117.IP) has joined #rust-beginners
2017-01-05 16:25:37	◣	ghishadow___________ (ghishadow@moz-pns.pkp.199.117.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-05 16:27:42	sebasmagri	I understand the `locations` borrow ends with the `fill_columns` function, but `location_columns` will outlive that function because it's being moved to the `columns` vector which is the return value. Am I right?
2017-01-05 16:28:49	◥	y6cmE (root@moz-2du.csp.23.58.IP) has joined #rust-beginners
2017-01-05 16:28:56	@niconii	sebasmagri: the problem is that you're taking &'static str when you just want to take &str
2017-01-05 16:29:20	@niconii	sebasmagri: &'static str means it has to live forever, which isn't the case since you're borrowing from a String
2017-01-05 16:29:29	sebasmagri	niconii: oh I see, so the whole issue is because of the 'static lifetime
2017-01-05 16:29:33	@niconii	yes
2017-01-05 16:29:36	sebasmagri	damn right...
2017-01-05 16:29:39	sebasmagri	Thanks!
2017-01-05 16:30:01	@niconii	btw you can just write `location.name.as_str()`, you don't need the & before it
2017-01-05 16:30:17	@niconii	.as_str() returns a &str already, so that just makes it into a &&str that just gets auto-derefed anyway
2017-01-05 16:30:46	sebasmagri	ok great, that was just me trying to identify where the issue was... thanks niconii 
2017-01-05 16:30:52	◥	ghishadow___________ (ghishadow@moz-pns.pkp.199.117.IP) has joined #rust-beginners
2017-01-05 16:30:53	◣	ghishadow___________ (ghishadow@moz-pns.pkp.199.117.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-05 16:30:54	@niconii	sure thing
2017-01-05 16:31:23	◥	nagisa (nagisa@moz-8t068g.static.zebra.lt) has joined #rust-beginners
2017-01-05 16:32:56	◥	tl8atWork (tl8atWork@moz-4nskmf.1300webpro.com.au) has joined #rust-beginners
2017-01-05 16:33:04	◥	alx741_ (alx741@moz-b5u.sn4.152.190.IP) has joined #rust-beginners
2017-01-05 16:33:19	spear2	is there a better way to 'count' the iterations of a macro loop: https://is.gd/9YzeZq ?
2017-01-05 16:34:26	spear2	i thought of creating a variant between the two unrolls instead of defining a whole new type, but then you have to deal with that 'marker' variant it every time you pattern match on the enum
2017-01-05 16:34:53	@mbrubeck	spear2: https://danielkeep.github.io/tlborm/book/blk-counting.html has a few other methods, none of them perfect
2017-01-05 16:35:04	spear2	ty
2017-01-05 16:35:14	◥	idahogray (idahogray@moz-tk8gav.mo.charter.com) has joined #rust-beginners
2017-01-05 16:35:17	◣	alx741 (alx741@moz-22t.a3g.152.190.IP) has quit (Ping timeout: 121 seconds)
2017-01-05 16:35:31	◥	bread|laptop (bread@moz-fnm.4h1.16.70.IP) has joined #rust-beginners
2017-01-05 16:35:33	◣	badon (badon@moz-c5r.91b.195.199.IP) has quit (Connection closed)
2017-01-05 16:36:10	◥	badon (badon@moz-c5r.91b.195.199.IP) has joined #rust-beginners
2017-01-05 16:37:10	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-05 16:37:18	◥	Freyskeyd (Freyskeyd@moz-9m9m23.dsl.ovh.fr) has joined #rust-beginners
2017-01-05 16:38:07	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Connection closed)
2017-01-05 16:38:40	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-06 09:54:04	⚡	irc: disconnected from server
2017-01-06 09:54:21	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-06 09:54:21	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-06 09:54:21	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-06 09:54:21	⚡	Channel #rust-beginners: 649 nicks (4 ops, 0 halfops, 0 voices, 645 normals)
2017-01-06 09:54:25	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-06 09:54:44	vorner	What is the recommended way to terminate with non-zero exit code? std::process::exit seems to be a bit harsh way to do it.
2017-01-06 09:54:54	◥	smartPudding (smartPuddin@moz-8l8ico.fbtk.i511.120b.2a02.IP) has joined #rust-beginners
2017-01-06 09:54:55	jannick	misdreavus: ty :)
2017-01-06 09:55:08	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2017-01-06 09:55:16	~steveklabnik	vorner: that is the way
2017-01-06 09:55:44	~steveklabnik	vorner: however, you may be interested in http://rust-lang.github.io/book/ch12-03-improving-error-handling-and-modularity.html which describes a pattern to make this nicer
2017-01-06 09:56:05	◥	tyoc__ (tyoc@moz-nvt.8oo.75.184.IP) has joined #rust-beginners
2017-01-06 09:56:28	◣	junqed (junqed@moz-egr.l1h.70.178.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 09:56:42	◥	drivel (me@moz-iqulob.maltekraus.de) has joined #rust-beginners
2017-01-06 09:57:06	~steveklabnik	vorner: the last example is probably the most relevant, it shows you how main is set up, and calls a function named "run"
2017-01-06 09:58:10	◥	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has joined #rust-beginners
2017-01-06 09:58:34	vorner	Yes, I already got to code like that, except that I'd prefer something that runs the destructors (not that I would have any at that place currently, but one can't be careful enough)
2017-01-06 09:58:53	vorner	But thanks, knowing there's nothing better saves time too O:-)
2017-01-06 09:58:59	◣	tyoc (tyoc@moz-64b0ua.iusacell.net) has quit (Ping timeout: 121 seconds)
2017-01-06 10:00:19	Xion	So I made a post, about using #[path] for putting unit tests somewhere else: http://xion.io/drafts/rust-unit-test-placement.html
2017-01-06 10:00:24	Xion	Comments, rants and praise welcome ;)
2017-01-06 10:00:29	Xion	(not published yet)
2017-01-06 10:00:30	◥	niconii (nicole@moz-e97d1e.midco.net) has joined #rust-beginners
2017-01-06 10:00:30	⚡	Mode #rust-beginners [+o niconii] by ChanServ
2017-01-06 10:00:44	⚡	JaparicAfk is now known as japaric
2017-01-06 10:02:33	◣	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has quit (Ping timeout: 121 seconds)
2017-01-06 10:07:30	⚡	irc: disconnected from server
2017-01-06 10:07:48	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-06 10:07:48	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-06 10:07:48	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-06 10:07:48	⚡	Channel #rust-beginners: 650 nicks (5 ops, 0 halfops, 0 voices, 645 normals)
2017-01-06 10:07:52	~steveklabnik	Xion: interesting!
2017-01-06 10:07:52	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-06 10:08:01	◣	hash (hash@moz-3evbcs.narocnik.mobitel.si) has quit (Quit: IRC for Sailfish 0.9)
2017-01-06 10:08:01	misdreavus	Xion: there's also just foo/mod.rs, foo/tests.rs, which is not as well accepted for reasons i either don't understand or don't remember
2017-01-06 10:08:12	~steveklabnik	not as well accepted?
2017-01-06 10:08:17	~steveklabnik	that's normally how i'd do it
2017-01-06 10:08:27	misdreavus	usually i see people jump strait to "keep it inline"
2017-01-06 10:08:29	misdreavus	**straight
2017-01-06 10:08:42	misdreavus	it's not mentioned as much
2017-01-06 10:08:57	misdreavus	that could just mean people don't think about doing that
2017-01-06 10:09:06	~steveklabnik	ah
2017-01-06 10:09:11	misdreavus	it also forces you to move foo.rs to foo/mod.rs
2017-01-06 10:09:15	misdreavus	which could be a pain
2017-01-06 10:09:40	WindowsBunny	vorner: On Windows, the entry point doesn't return an exit code, it instead takes the return value from C main() and passes it to ExitProcess
2017-01-06 10:09:58	Xion	misdreavus: Yeah I wanted to describe it as an alternative too but the post was already getting too long
2017-01-06 10:10:07	WindowsBunny	vorner: So just do process::exit in your fn main() and that's pretty much the best you can do
2017-01-06 10:10:18	misdreavus	prepare for like eight more comments to that effect then :P
2017-01-06 10:10:19	Xion	Also I don't like it because it essentially crates fake "packages" in the project tree
2017-01-06 10:10:27	@Manishearth	Servo has a tests/unit/<cratename>_test folder
2017-01-06 10:10:42	@Manishearth	each <cratename>_test itself is a cargo crate with only #[test] functions
2017-01-06 10:10:47	◥	tel (tel@moz-rdn.5rl.148.204.IP) has joined #rust-beginners
2017-01-06 10:11:32	Xion	That's crate-level tests though, right?
2017-01-06 10:12:11	Xion	Or is there #[path] magic involved to make it work, which basically what I alluded to in the footnote? :)
2017-01-06 10:15:19	◥	afshinmeh (textual@moz-2ajfmq.hgkk.s1m0.8084.2a02.IP) has joined #rust-beginners
2017-01-06 10:15:47	◣	sebasmagri (user@moz-ohu.o17.146.189.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-06 10:15:51	◥	seiks (seiks@moz-i8hc0i.517r.f285.11c0.2a00.IP) has joined #rust-beginners
2017-01-06 10:18:14	◥	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined #rust-beginners
2017-01-06 10:18:23	◥	mib_t3vhzw (Mibbit@moz-8do7jh.oklwil.sbcglobal.net) has joined #rust-beginners
2017-01-06 10:18:45	◣	mib_t3vhzw (Mibbit@moz-8do7jh.oklwil.sbcglobal.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 10:18:51	◥	xorcon (Mibbit@moz-8do7jh.oklwil.sbcglobal.net) has joined #rust-beginners
2017-01-06 10:19:10	◣	xorcon (Mibbit@moz-8do7jh.oklwil.sbcglobal.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 10:19:49	◥	kermit (Mibbit@moz-8do7jh.oklwil.sbcglobal.net) has joined #rust-beginners
2017-01-06 10:19:58	◣	kermit (Mibbit@moz-8do7jh.oklwil.sbcglobal.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 10:20:27	◥	bushidoboy (dbishop@moz-ok6.k7o.229.192.IP) has joined #rust-beginners
2017-01-06 10:20:32	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-06 10:20:55	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-06 10:21:00	◣	bushidoboy (dbishop@moz-ok6.k7o.229.192.IP) has quit (Quit: WeeChat 1.6)
2017-01-06 10:21:15	◥	bushidoboy (dbishop@moz-ok6.k7o.229.192.IP) has joined #rust-beginners
2017-01-06 10:22:07	◥	cynicaldevil (uid126068@moz-3m708d.brockwell.irccloud.com) has joined #rust-beginners
2017-01-06 10:23:50	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-06 10:24:44	◥	ubsandroid_ (ubsan@moz-kdmr2l.fpeu.gb19.fb90.2607.IP) has joined #rust-beginners
2017-01-06 10:24:57	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 10:25:23	@Manishearth	Xion: crate-level tests?
2017-01-06 10:25:27	@Manishearth	I mean, they're unit tests
2017-01-06 10:25:34	@Manishearth	they test all the random bits in the code
2017-01-06 10:25:39	@Manishearth	we don't have inline #[test]
2017-01-06 10:26:04	@Manishearth	part of this is the fact that servo's components/ directory contains like 20 crates all of which don't really have any "private" bits
2017-01-06 10:26:18	@Manishearth	we use privacy, but the stuff needing testing is all public
2017-01-06 10:26:50	◣	ubsandroid (ubsan@moz-cc6.3fu.114.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 10:27:40	Xion	Ah, so basically Servo makes an entire crate a unit, blurring the distinction.
2017-01-06 10:28:03	◥	awalcutt (awalcutt@moz-lpnnlu.wa.comcast.net) has joined #rust-beginners
2017-01-06 10:28:07	◣	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has quit (Connection closed)
2017-01-06 10:28:08	Xion	It seems like large projects naturally gravitate towards this setup.
2017-01-06 10:28:34	◣	AlexW (awalcutt@moz-lpnnlu.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-06 10:29:14	◥	montanonic (nicholas@moz-jn79h3.dccu.6nti.3004.2603.IP) has joined #rust-beginners
2017-01-06 10:33:17	jannick	does rust have list deconstruction?
2017-01-06 10:33:53	◥	handyman (handyman@moz-9qqg2i.subp.5lka.0645.2601.IP) has joined #rust-beginners
2017-01-06 10:34:14	◥	starblue (juergen@moz-g0jl61.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-06 10:34:25	◥	space-wi_ (space-wizar@moz-2vatbh.res.rr.com) has joined #rust-beginners
2017-01-06 10:34:31	pingveno	jannick: You mean like in Python 3: a, *b = foo ?
2017-01-06 10:34:55	jannick	or like f# let [a, b] = l
2017-01-06 10:35:00	pingveno	No
2017-01-06 10:35:07	jannick	:(
2017-01-06 10:35:28	pingveno	Just for tuples
2017-01-06 10:35:32	jannick	sad
2017-01-06 10:35:32	◣	cpup (cpup@moz-m24.69g.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 10:35:45	◣	montanonic (nicholas@moz-jn79h3.dccu.6nti.3004.2603.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 10:35:59	◣	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-06 10:35:59	chaot4	Is it currently possible to give a set of traits a name? E.g. I want to use "Copy + PartialOrd" for multiple functions; is there a way to avoid writing "where T: PartialOrd + Clone" all the time and instead write something like "where T: BothTraits"?
2017-01-06 10:36:10	~steveklabnik	jannick: it's in nightly, but it's very buggy
2017-01-06 10:36:13	@niconii	chaot4: unfortunately not
2017-01-06 10:36:16	~steveklabnik	jannick: so it hasn't been made stable yet
2017-01-06 10:36:23	~steveklabnik	chaot4: what you _can_ do is a hack
2017-01-06 10:36:27	◥	cpup (cpup@moz-m24.69g.218.32.IP) has joined #rust-beginners
2017-01-06 10:36:34	pingveno	steveklabnik: wow what
2017-01-06 10:36:34	~steveklabnik	trait CopyPartialOrd: Copy + PartialOrd {}
2017-01-06 10:36:38	~steveklabnik	pingveno: "slice patterns"
2017-01-06 10:36:41	jannick	steveklabnik: am on nightly so how does it work?
2017-01-06 10:36:54	jannick	just let [a, b] = l
2017-01-06 10:36:55	~steveklabnik	https://doc.rust-lang.org/stable/book/slice-patterns.html
2017-01-06 10:37:08	~steveklabnik	iirc you need a &
2017-01-06 10:37:21	chaot4	niconii, steveklabnik: Thanks for your answers. :)
2017-01-06 10:37:24	◥	bluss (bluss@moz-9sooj3.dynamic.simnet.is) has joined #rust-beginners
2017-01-06 10:37:26	~steveklabnik	playbot: +nightly let v = vec![1, 2]; let &[a, b] = v;
2017-01-06 10:37:31	⚡	Notice(playbot): error: expected expression, found `+`
2017-01-06 10:37:31	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2jcjb7J)
2017-01-06 10:37:37	~steveklabnik	gah, i forget how to make playbot use nightly
2017-01-06 10:37:43	pingveno	--nightly
2017-01-06 10:37:44	~steveklabnik	playbot: --nightly RUST_VERSION
2017-01-06 10:37:47	⚡	Notice(playbot): error[E0425]: unresolved value `RUST_VERSION`
2017-01-06 10:37:47	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2hYo4VL)
2017-01-06 10:38:01	~steveklabnik	playbot: --nightly #![feature(slice_patterns)] let v = vec![1, 2]; let &[a, b] = v;
2017-01-06 10:38:06	⚡	Notice(playbot): error: slice pattern syntax is experimental (see issue #23121)
2017-01-06 10:38:06	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2jctGYO)
2017-01-06 10:38:12	Xion	lol
2017-01-06 10:38:14	~steveklabnik	ahaha
2017-01-06 10:38:32	@niconii	chaot4: that trait is only half of it btw, you'd also want to impl it for all T with those traits
2017-01-06 10:38:37	Xion	Speaking of obscure unstable features, associated_constants would be nice
2017-01-06 10:38:45	~steveklabnik	Xion: same deal, also buggy
2017-01-06 10:38:59	Xion	:(
2017-01-06 10:39:04	Xion	Fix it! ;P
2017-01-06 10:39:18	chaot4	niconii: I was just writing this exact question that you just answered. :)
2017-01-06 10:39:30	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 10:39:32	chaot4	Because the hack is also what I tried first.
2017-01-06 10:39:40	◥	nkr (nkr@moz-65q.mqv.99.179.IP) has joined #rust-beginners
2017-01-06 10:40:17	◥	pounce (pounce@moz-3jv.ip9.197.140.IP) has joined #rust-beginners
2017-01-06 10:40:22	chaot4	Do you know if there is any RFC that addresses this "issue"?
2017-01-06 10:40:59	jannick	steveklabnik: it says add #![feature(slice_patterns)] to crate attributes, what does that refer to?
2017-01-06 10:41:15	pingveno	It's not a irrefutable pattern, though.
2017-01-06 10:41:29	pingveno	&[a, b] = vec![]
2017-01-06 10:41:53	pingveno	let v = vec![]; let &[a, b] = &*v;
2017-01-06 10:42:21	~steveklabnik	jannick: you put that line in your lib.rs or main.rs
2017-01-06 10:42:28	~steveklabnik	chaot4: i don't think so
2017-01-06 10:42:53	◥	riskable (Could@moz-oehaho.tg18.2sb9.0344.2601.IP) has joined #rust-beginners
2017-01-06 10:42:59	jannick	steveklabnik: hmm I tried that but it didn't work :/
2017-01-06 10:43:18	~steveklabnik	pingveno may be right here, even though we have that pattern generally, you might not be able to use it with let
2017-01-06 10:43:32	~steveklabnik	i haven't actually used slice pattenrs in two years
2017-01-06 10:43:55	◣	konstin (konstin@moz-90b.42o.243.162.IP) has left #rust-beginners
2017-01-06 10:44:12	~steveklabnik	what errod id you get?
2017-01-06 10:44:17	Xion	this works alright : https://is.gd/27va9K
2017-01-06 10:44:54	Xion	It's gotta be a slice ref, vector alone cannot be matched.
2017-01-06 10:45:23	chaot4	steveklabnik, niconii: Just found an RFC that is similar and where people also discuss about that exact thing: https://github.com/rust-lang/rfcs/pull/1733
2017-01-06 10:45:25	jannick	steveklabnik: hmmm :/ I added it to my main file however the code is in another file
2017-01-06 10:45:31	◣	nkr (nkr@moz-65q.mqv.99.179.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 10:45:34	◣	IslandUsurper (lyle@moz-nfrhh5.rnfo.mfth.0306.2602.IP) has quit (Connection closed)
2017-01-06 10:45:36	ehd	is there a way for trait impl blocks to provide additional documentation about how the struct implements the trait?
2017-01-06 10:45:38	~steveklabnik	jannick: that shouldn't matter
2017-01-06 10:45:46	◥	IslandUsurper (lyle@moz-nfrhh5.rnfo.mfth.0306.2602.IP) has joined #rust-beginners
2017-01-06 10:45:55	~steveklabnik	ehd: iirc rustdoc doesn't show it?
2017-01-06 10:45:59	~steveklabnik	i always forget
2017-01-06 10:46:11	~steveklabnik	jannick: that is, putting that line in your main.rs should make it work regardless of where the code is
2017-01-06 10:46:23	◣	pounce (pounce@moz-3jv.ip9.197.140.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 10:46:44	⚡	agibson is now known as agibson|afk
2017-01-06 10:47:23	◥	bread|laptop (bread@moz-1v6pd1.us.xo.net) has joined #rust-beginners
2017-01-06 10:47:34	jannick	steveklabnik: hmm doesn't work :/ it just gives me that I should add add #![feature(slice_patterns)]
2017-01-06 10:47:35	◣	ubsandroid_ (ubsan@moz-kdmr2l.fpeu.gb19.fb90.2607.IP) has quit (Quit: <3)
2017-01-06 10:47:42	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-06 10:47:48	ehd	steveklabnik correct; wondering if there was a way to make it show up
2017-01-06 10:47:54	~steveklabnik	jannick: very very strange
2017-01-06 10:48:22	~steveklabnik	ehd: i don't remember if there is or not
2017-01-06 10:49:07	@Manishearth	pingveno: needs to be if let
2017-01-06 10:49:14	@Manishearth	if let &[a,b,c] = vec
2017-01-06 10:49:17	◣	skeeter (skeeter@moz-d5s7vm.tukw.qwest.net) has quit (Connection closed)
2017-01-06 10:49:51	◥	isd (isd@moz-d4f8e9.cable.rcn.com) has joined #rust-beginners
2017-01-06 10:50:35	◥	montanonic (nicholas@moz-u3evs7.or.comcast.net) has joined #rust-beginners
2017-01-06 10:50:51	◥	pounce (pounce@moz-3jv.ip9.197.140.IP) has joined #rust-beginners
2017-01-06 10:51:25	◣	bread|laptop (bread@moz-1v6pd1.us.xo.net) has quit (Ping timeout: 121 seconds)
2017-01-06 10:52:02	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-06 10:52:09	◥	Dryvnt (Dryvnt@moz-ucd.cbq.56.185.IP) has joined #rust-beginners
2017-01-06 10:53:25	Dryvnt	Hey everyone. I'm having some trouble: I have a &Vec<u8> that I want to copy into a [u8; 32], truncating the bytes in excess and filling with zeroes when too short. Is my best bet to do a for i in 0..32 loop, or is there something more idiomatic?
2017-01-06 10:56:36	@niconii	Dryvnt: let mut a = [0; 32]; a.copy_from_slice(&vec);
2017-01-06 10:56:44	@niconii	ah, wait
2017-01-06 10:56:59	@niconii	that does require the same length, huh
2017-01-06 10:57:27	Dryvnt	It really feels like .iter().take(32).collect() should be able to figure out that the length is 32, for example
2017-01-06 10:58:11	The_8472	let num = std::cmp::min(vec.len(), 32); &a[0..num].copy_from_slice(&vec[0..num]);
2017-01-06 10:58:26	@niconii	yeah, that works
2017-01-06 10:58:48	Dryvnt	Ah, nice
2017-01-06 10:58:50	Dryvnt	Thanks
2017-01-06 10:59:03	pingveno	Needs zeroing out, too.
2017-01-06 10:59:27	The_8472	if it's not a freshly allocated array, yeah
2017-01-06 11:01:02	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 11:01:08	◥	alx741 (alx741@moz-frc.hcj.112.181.IP) has joined #rust-beginners
2017-01-06 11:02:25	◥	kulshrax (kulshrax@moz-tppr0q.j0qm.7vpd.010d.2620.IP) has joined #rust-beginners
2017-01-06 11:03:00	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-06 11:03:04	Vtec234	So I'm trying to guarantee alignment in debug with --features="nightly" using debug_assert!(mem::align_of::<T>() >= 2); and I get an undocumented error:
2017-01-06 11:03:08	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-06 11:03:18	Vtec234	E0019: constant function contains unimplemented expression type
2017-01-06 11:03:39	◣	alx741_ (alx741@moz-a7s.qnp.152.190.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 11:03:42	Vtec234	This only happens when nightly feature is on. Anybody have an idea what this is?
2017-01-06 11:03:43	◥	durka42 (durka42@moz-itei31.pa.comcast.net) has joined #rust-beginners
2017-01-06 11:04:52	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 11:05:30	rkruppe	what does the error point at?
2017-01-06 11:05:54	◣	afshinmeh (textual@moz-2ajfmq.hgkk.s1m0.8084.2a02.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 11:05:56	◥	mr_sticky (Mibbit@moz-4ik.epv.39.189.IP) has joined #rust-beginners
2017-01-06 11:06:21	Vtec234	that whole line of code
2017-01-06 11:06:22	federico	steveklabnik: kudos to you and carol on the new book; what is there is *very* nice
2017-01-06 11:06:25	◣	cjhowe (textual@moz-aomlp1.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 11:06:29	◥	x7e11e (Mibbit@moz-viklgs.access.telenet.be) has joined #rust-beginners
2017-01-06 11:06:36	◣	mr_sticky (Mibbit@moz-4ik.epv.39.189.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 11:06:40	federico	steveklabnik: already having a great time with the new text on ownership/lifetimes
2017-01-06 11:07:02	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 11:07:38	◣	x7e11e (Mibbit@moz-viklgs.access.telenet.be) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 11:07:44	◣	pounce (pounce@moz-3jv.ip9.197.140.IP) has quit (Quit: WeeChat 1.6)
2017-01-06 11:08:13	~steveklabnik	federico: awesome :)
2017-01-06 11:08:17	⚡	ngc0202` is now known as ngc0202
2017-01-06 11:11:09	◥	azakai|2 (alon@moz-l3ofdg.sntcca.sbcglobal.net) has joined #rust-beginners
2017-01-06 11:12:15	◥	afshinmeh (textual@moz-l7tom4.hgkk.s1m0.8084.2a02.IP) has joined #rust-beginners
2017-01-06 11:12:22	◥	nercury (nercury@moz-ngr949.static.zebra.lt) has joined #rust-beginners
2017-01-06 11:12:52	◣	azakai|2 (alon@moz-l3ofdg.sntcca.sbcglobal.net) has quit (Connection closed)
2017-01-06 11:13:00	voider1	Does anyone know how to write compiler plugins like Rocket does?
2017-01-06 11:14:47	~steveklabnik	there's a book chapter
2017-01-06 11:14:52	vandenoever	the inline errors in rustdt are great for my productivity, but i think eclipse has stopped recognizing the compiler output on my machine, console still shows error, but they're not shown inline anymore
2017-01-06 11:14:55	~steveklabnik	also, in the coming months, it's going to change entirely
2017-01-06 11:15:11	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-06 11:15:39	booyaa	?newbook
2017-01-06 11:15:42	booyaa	!newbook
2017-01-06 11:15:42	rustbot	https://rust-lang.github.io/book/ (It's not finished yet!)
2017-01-06 11:15:49	◣	smartPudding (smartPuddin@moz-8l8ico.fbtk.i511.120b.2a02.IP) has quit (Quit: Linkinus - http://linkinus.com)
2017-01-06 11:16:03	◣	dm3 (dm3@moz-urssv3.static.zebra.lt) has quit (Connection closed)
2017-01-06 11:16:22	booyaa	wowser that's a lot more chapters when i last checked
2017-01-06 11:16:25	◥	dm3 (dm3@moz-urssv3.static.zebra.lt) has joined #rust-beginners
2017-01-06 11:16:29	Vtec234	rkruppe: oh, i got it. i'm calling it in a const fn declaration
2017-01-06 11:16:49	Vtec234	is it strictly forbidden to have asserts in const fns?
2017-01-06 11:17:10	~steveklabnik	booyaa: carol and i had a meeting recently and fleshed out the TOC, so a lot of it has no content, just headings
2017-01-06 11:17:59	◥	nkr (nkr@moz-65q.mqv.99.179.IP) has joined #rust-beginners
2017-01-06 11:18:01	◣	stephanbuys (Adium@moz-2gg.a72.247.41.IP) has quit (Connection closed)
2017-01-06 11:18:03	booyaa	ah
2017-01-06 11:18:04	◥	stephanbuys (Adium@moz-2gg.a72.247.41.IP) has joined #rust-beginners
2017-01-06 11:18:38	voider1	steveklabnik: With macros 2.0, right?
2017-01-06 11:18:44	~steveklabnik	yes
2017-01-06 11:18:57	voider1	But will that drop compatibility with compiler plugins?
2017-01-06 11:19:05	~steveklabnik	yes
2017-01-06 11:19:07	~steveklabnik	that is
2017-01-06 11:19:08	voider1	Ah.
2017-01-06 11:19:11	~steveklabnik	it ist he new version of compiler plugins
2017-01-06 11:19:20	~steveklabnik	the current version will never be made stable
2017-01-06 11:19:26	voider1	Man, I really want this functionality, but... 
2017-01-06 11:19:39	◣	amphibulus (Mibbit@moz-0fl.k7d.76.95.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 11:19:47	~steveklabnik	and once macros 2.0 has an implementaiton, is likely to get straight-up removed, i'd think.
2017-01-06 11:20:27	◣	dm3 (dm3@moz-urssv3.static.zebra.lt) has quit (Ping timeout: 121 seconds)
2017-01-06 11:21:18	voider1	How long until macros 2.0?
2017-01-06 11:22:18	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-06 11:23:07	~steveklabnik	the RFC was accepted
2017-01-06 11:23:13	~steveklabnik	but i haven't seen any implementation work start yet
2017-01-06 11:25:02	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-06 11:25:07	~steveklabnik	nrc might know
2017-01-06 11:26:31	voider1	steveklabnik: Are Custom Derives stable now?
2017-01-06 11:26:38	~steveklabnik	they will be as of the next release
2017-01-06 11:26:46	~steveklabnik	one month
2017-01-06 11:26:57	voider1	1.16?
2017-01-06 11:27:29	misdreavus	1.15
2017-01-06 11:27:45	misdreavus	releasing Feb 2
2017-01-06 11:28:14	voider1	Alright. =)
2017-01-06 11:29:00	voider1	I'm struggling a bit with making mods, if I have src/objects/update.rs     I should make objects/mod.rs, but what should be in it?
2017-01-06 11:29:04	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 11:29:19	misdreavus	"mod update;"
2017-01-06 11:29:34	voider1	No pub?
2017-01-06 11:30:02	misdreavus	if you want it to be public (outside of your crate or that module) then it should be "pub mod update;"
2017-01-06 11:30:10	XMPPwocky	depends. you could definitely do that- but you might also want to "pub use" the things from update you want
2017-01-06 11:30:19	misdreavus	also that ^
2017-01-06 11:30:31	XMPPwocky	misdreavus: well if all that's in mod.rs is "mod update;" it's not very useful at all unless it's pub :P
2017-01-06 11:30:41	misdreavus	yeah, i suppose :P
2017-01-06 11:31:05	voider1	I want to use the things from objects/ in the files one dir above it.
2017-01-06 11:31:22	voider1	so I want to use src/objects/update.rs in src/lib.rs
2017-01-06 11:31:25	voider1	mod update is enough?
2017-01-06 11:31:47	XMPPwocky	voider1: "pub mod update" in mod.rs, and then "mod objects" in lib.rs
2017-01-06 11:31:49	misdreavus	you'll need pub for that
2017-01-06 11:31:53	voider1	I thought so.
2017-01-06 11:31:55	XMPPwocky	/there/ you may or may not want "pub mod objects"
2017-01-06 11:32:10	voider1	Yeah.
2017-01-06 11:32:10	voider1	=)
2017-01-06 11:32:12	voider1	Thanks!
2017-01-06 11:32:18	XMPPwocky	then you can use objects::update::whatever from lib.rs, and ::objects::update::whatever from anywhere in your crate
2017-01-06 11:32:18	misdreavus	depends on whether you want objects to be visible to your library consumers
2017-01-06 11:32:56	voider1	Got it. :D
2017-01-06 11:33:06	voider1	It's a lot better organized now.
2017-01-06 11:33:33	◣	durka42 (durka42@moz-itei31.pa.comcast.net) has quit (Client exited)
2017-01-06 11:34:51	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-06 11:35:17	voider1	Btw, I once read an RFC about `use` orders.
2017-01-06 11:35:30	voider1	But what about extern crate, mod modname?
2017-01-06 11:35:35	voider1	How do you order those?
2017-01-06 11:36:38	~steveklabnik	https://github.com/rust-lang-nursery/fmt-rfcs/issues/24
2017-01-06 11:37:34	◣	kulshrax (kulshrax@moz-tppr0q.j0qm.7vpd.010d.2620.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-06 11:38:24	◥	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has joined #rust-beginners
2017-01-06 11:39:11	◥	snowe_ (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-06 11:39:11	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-06 11:39:50	◣	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has quit (A TLS packet with unexpected length was received.)
2017-01-06 11:40:45	◥	zwol (zack@moz-ocgkcl.fios.verizon.net) has joined #rust-beginners
2017-01-06 11:41:09	◣	jannick (jannick@moz-eu0lcm.siteimprove.com) has quit (Ping timeout: 121 seconds)
2017-01-06 11:41:34	◥	tyoc (tyoc@moz-ugr.72a.188.187.IP) has joined #rust-beginners
2017-01-06 11:41:34	◣	DusXMT (dusxmt@moz-09f.p1s.12.195.IP) has quit (Connection closed)
2017-01-06 11:41:37	◥	DusXMT (dusxmt@moz-09f.p1s.12.195.IP) has joined #rust-beginners
2017-01-06 11:41:42	zwol	This is maybe a little advanced for the beginners channel, but *I'm* still a beginner, so.
2017-01-06 11:41:53	zwol	I need some help with https://github.com/rust-lang/libc/pull/489
2017-01-06 11:42:12	zwol	most importantly I'm not sure how to do what Alex asked in re idtype_t
2017-01-06 11:42:46	zwol	on the C side, there's a function specified to take an argument which is a C enum type
2017-01-06 11:43:06	zwol	so the obvious way to shim that into Rust is #[repr(C)] pub enum idtype_t { ... }
2017-01-06 11:43:11	◣	saimen (saimen@moz-6nh7io.hsi5.kabel-badenwuerttemberg.de) has quit (Ping timeout: 121 seconds)
2017-01-06 11:43:17	rkruppe	zwol: C enums are very little more than a couple of names for integer constants
2017-01-06 11:43:41	@mbrubeck	zwol: On the Rust side you can treat it as a set of integer constants, though I don't know a convenient way to choose the right integer type without using a tool like bindgen...
2017-01-06 11:43:45	zwol	@rkruppe I know, the problem is getting the underlying integer type right - if we don't, the calling convention will be screwed up
2017-01-06 11:44:13	◣	bronson (bronson@moz-suja1u.dynamic.fusionbroadband.com) has quit (Connection closed)
2017-01-06 11:44:18	@mbrubeck	I'd check if there are other examples in the `libc` crate of C enums treated as ints
2017-01-06 11:44:29	zwol	good idea
2017-01-06 11:44:31	◣	tyoc__ (tyoc@moz-nvt.8oo.75.184.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 11:44:45	zwol	I'm not sure there are any, but I'll look
2017-01-06 11:44:48	◣	tel (tel@moz-rdn.5rl.148.204.IP) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-06 11:44:49	◥	kulshrax (kulshrax@moz-lgr.jsl.201.199.IP) has joined #rust-beginners
2017-01-06 11:44:58	vorner	AFAIK C ABI treats any integer smaller than int as int and casts when calling.
2017-01-06 11:45:10	zwol	@vorner Technically not guaranteed for enums.
2017-01-06 11:45:31	zwol	I can't think of a psABI off the top of my head that doesn't do that, but it is _not_ a C requirement.
2017-01-06 11:45:34	◣	voider1 (voider1@moz-cnrpdc.dynamic.ziggo.nl) has quit (A TLS packet with unexpected length was received.)
2017-01-06 11:45:40	vorner	Hmm. Ok.
2017-01-06 11:45:51	◥	leonardo2 (chatzilla@moz-pkgiv7.retail.telecomitalia.it) has joined #rust-beginners
2017-01-06 11:45:59	◥	junqed (junqed@moz-egr.l1h.70.178.IP) has joined #rust-beginners
2017-01-06 11:46:14	leonardo2	A little borrowing problem: http://codepad.org/gdtCV4kk
2017-01-06 11:46:28	◣	seiks (seiks@moz-i8hc0i.517r.f285.11c0.2a00.IP) has quit (Quit: Farewell!)
2017-01-06 11:46:31	leonardo2	Can you write that function with a simple map? Or do I need the fold?
2017-01-06 11:47:29	◥	voider1 (voider1@moz-cnrpdc.dynamic.ziggo.nl) has joined #rust-beginners
2017-01-06 11:47:44	◥	hansaplast (hansaplast@moz-ifuba5.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2017-01-06 11:48:02	◥	ubsandroid_ (ubsan@moz-v52bu0.fpeu.gb19.fb90.2607.IP) has joined #rust-beginners
2017-01-06 11:48:10	breeden_	    vals.iter().map(|k| encoding[k].clone()).collect()
2017-01-06 11:48:34	leonardo2	But isn't the clone() copying every string?
2017-01-06 11:49:05	◥	tel (tel@moz-rdn.5rl.148.204.IP) has joined #rust-beginners
2017-01-06 11:49:23	leonardo2	If I just need to join them together I should not need to also copy them first
2017-01-06 11:49:38	The_8472	then you need something to push them into
2017-01-06 11:50:02	◣	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-06 11:50:03	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 11:50:04	leonardo2	OK, then we're back to the fold()
2017-01-06 11:50:20	leonardo2	Thank you :-)
2017-01-06 11:50:49	◥	duosrx (DuoSRX@moz-ghn5ka.vc.shawcable.net) has joined #rust-beginners
2017-01-06 11:50:56	The_8472	or something fold-like. scan, reduce...
2017-01-06 11:51:19	@mbrubeck	zwol: It'd be nice if the `libc` crate had a `type c_enum` alias that was set on each platform to the appropriate integer type...
2017-01-06 11:51:51	zwol	... it's sadly not that simple because it *can* depend on the set of enumerators that are defined
2017-01-06 11:52:06	The_8472	leonardo2, itertools also has a join() on iterators
2017-01-06 11:52:17	@mbrubeck	zwol: ah, true
2017-01-06 11:52:58	◥	mib_mm4hl0 (Mibbit@moz-pf3.tv0.129.66.IP) has joined #rust-beginners
2017-01-06 11:53:10	pingveno	It compiled with &*encoding[k]
2017-01-06 11:53:27	◣	cpup (cpup@moz-m24.69g.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 11:53:40	◣	duosrx (DuoSRX@moz-ghn5ka.vc.shawcable.net) has quit (Quit: WeeChat 1.6)
2017-01-06 11:53:50	breeden_	pingveno: oh it sure does, doesn't it
2017-01-06 11:53:53	◣	ghisvail__ (ghisvail@moz-r5f5iu.iqfg.unmu.0630.2001.IP) has quit (Client exited)
2017-01-06 11:53:56	breeden_	leonardo2: ^
2017-01-06 11:53:56	◣	mib_mm4hl0 (Mibbit@moz-pf3.tv0.129.66.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 11:54:50	leonardo2	It works! Thank you.
2017-01-06 11:55:13	leonardo2	But I don't understand why...
2017-01-06 11:55:42	@mbrubeck	zwol: I can't find any other examples.  The only solution I can think of is to define the consts separately for each platform (e.g. `libc::unix::linux::idtype::P_ALL`) so that they can potentially have different types. :/
2017-01-06 11:55:48	leonardo2	It looks like something the compiler could suggest to the programmer :-)
2017-01-06 11:56:02	◥	duosrx (duosrx@moz-ghn5ka.vc.shawcable.net) has joined #rust-beginners
2017-01-06 11:56:07	zwol	mbrubeck: I'm not finding any other examples either.
2017-01-06 11:56:10	@mbrubeck	zwol: Well, I guess the other solution is to only support platforms where the enum is a c_int
2017-01-06 11:56:15	breeden_	Can't move out of borrowed context.  Have you tried a re-borrow? :P
2017-01-06 11:56:24	◥	cpup (cpup@moz-m24.69g.218.32.IP) has joined #rust-beginners
2017-01-06 11:56:29	pingveno	leonardo2: Indexing attempts to move the String out of a reference, which is quite impossible.
2017-01-06 11:56:37	◣	nkr (nkr@moz-65q.mqv.99.179.IP) has quit (Connection closed)
2017-01-06 11:56:39	zwol	mbrubeck: Would the existing tests catch it if the platform _didn't_ make the underlying type a c_int?
2017-01-06 11:56:56	pingveno	*encoding.index(k)
2017-01-06 11:56:59	zwol	mbrubeck: Because if so, we could punt to "if and when it becomes a problem we'll notice"
2017-01-06 11:57:06	@mbrubeck	zwol: I'm not sure
2017-01-06 11:57:09	leonardo2	OK
2017-01-06 11:57:51	@mbrubeck	zwol: I guess you could add a test that does a transmute from a `#[repr(C) enum` to `c_int`, which would fail to compile if they are different sizes.
2017-01-06 11:58:03	◥	nkr (nkr@moz-65q.mqv.99.179.IP) has joined #rust-beginners
2017-01-06 11:58:23	▷	mbrubeck wonders how smart #[repr(C)] is about this, anyways
2017-01-06 11:58:55	WindowsBunny	mbrubeck: repr(C) enums are super dumb
2017-01-06 11:59:09	WindowsBunny	because 1. they don't always match the size of C enums
2017-01-06 11:59:20	WindowsBunny	and 2. they don't allow arbitrary values the way C enums do
2017-01-06 11:59:26	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-06 11:59:54	pingveno	leonardo2: Have you been introduced to &* on String?
2017-01-06 12:00:13	zwol	WindowsBunny: Eegh, seriously?! (1) would be the _entire damn point_ of #[repr(C)]
2017-01-06 12:00:14	leonardo2	I have just added it
2017-01-06 12:00:24	◥	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has joined #rust-beginners
2017-01-06 12:00:29	zwol	WindowsBunny: Is there a bug report already?
2017-01-06 12:00:56	WindowsBunny	zwol: yes, somewhere
2017-01-06 12:01:19	WindowsBunny	zwol: those are some of the reasons winapi simply uses integer constants for enums
2017-01-06 12:01:30	WindowsBunny	it only uses rust enums to create void types :P
2017-01-06 12:01:36	▷	zwol is surprised because getting the ABI right is LLVM's job...
2017-01-06 12:02:03	WindowsBunny	(2) https://github.com/rust-lang/rust/issues/36927
2017-01-06 12:02:24	◣	leonardo2 (chatzilla@moz-pkgiv7.retail.telecomitalia.it) has quit (Quit: ChatZilla 0.9.93 [Firefox 50.1.0/20161208153507])
2017-01-06 12:02:32	WindowsBunny	(1) https://github.com/rust-lang/rust/issues/34641
2017-01-06 12:02:43	WindowsBunny	(1) https://github.com/rust-lang/rust/issues/28925
2017-01-06 12:04:00	◥	bread|laptop (bread@moz-odk.a8v.130.12.IP) has joined #rust-beginners
2017-01-06 12:04:18	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-06 12:04:25	WindowsBunny	zwol: the other reason I use integer constants is because it avoids creating new types which avoids creating trait impls which saves a fuckton on compile time
2017-01-06 12:04:26	◣	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has quit (Ping timeout: 121 seconds)
2017-01-06 12:05:24	◥	skeeter (skeeter@moz-d5s7vm.tukw.qwest.net) has joined #rust-beginners
2017-01-06 12:05:46	zwol	well, if #[repr(C)] pub enum doesn't match sizes, there's no point me even trying to worry about this :-/
2017-01-06 12:06:10	◣	ubsandroid_ (ubsan@moz-v52bu0.fpeu.gb19.fb90.2607.IP) has quit (Connection closed)
2017-01-06 12:06:29	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-06 12:07:37	◥	ubsandroid_ (ubsan@moz-mt65v7.fpeu.gb19.fb90.2607.IP) has joined #rust-beginners
2017-01-06 12:07:56	◣	nkr (nkr@moz-65q.mqv.99.179.IP) has quit (Connection closed)
2017-01-06 12:09:53	◣	bread|laptop (bread@moz-odk.a8v.130.12.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-06 12:10:13	voider1	I was wondering, I have a couple objects which all have the mostly the same new() method.
2017-01-06 12:10:16	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 12:10:43	voider1	http://prntscr.com/dscmle I have this for Update, Chat, Message, MessageEntity, etc.
2017-01-06 12:10:54	voider1	Couldn't you solve this with a custom derive or something?
2017-01-06 12:10:55	◣	brson (brson@moz-cfhap5.mtv2.mozilla.com) has quit (Ping timeout: 121 seconds)
2017-01-06 12:11:16	◣	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-06 12:11:27	◥	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has joined #rust-beginners
2017-01-06 12:12:03	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-06 12:12:26	◥	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has joined #rust-beginners
2017-01-06 12:12:30	◥	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has joined #rust-beginners
2017-01-06 12:12:30	~steveklabnik	!crate new-derive
2017-01-06 12:12:30	rustbot	Crate 'new-derive' does not exist.
2017-01-06 12:12:32	~steveklabnik	!crate derive-new
2017-01-06 12:12:34	rustbot	derive-new (0.3.0) - `#[derive(new)]` implements simple constructor functions for structs. -> https://crates.io/crates/derive-new <https://docs.rs/crate/derive-new>
2017-01-06 12:12:38	~steveklabnik	voider1: ^ :)
2017-01-06 12:12:49	voider1	Cool.
2017-01-06 12:12:50	voider1	=)
2017-01-06 12:12:50	Xion	ooooh
2017-01-06 12:13:01	pingveno	But in this case, perhaps it would be simpler just to directly deserialize?
2017-01-06 12:13:08	Xion	Also, *sigh* at Rust's constellations of nested ecosystems.
2017-01-06 12:13:14	◥	bread|laptop (bread@moz-fck.dqc.236.173.IP) has joined #rust-beginners
2017-01-06 12:13:21	voider1	pingveno: What do you mean?
2017-01-06 12:13:47	◣	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has quit (Connection closed)
2017-01-06 12:14:06	Dryvnt	Is there a way to extend an iterator?
2017-01-06 12:14:18	Dryvnt	Like, "when there's no more left in this iterator, continue with this iterator instead"
2017-01-06 12:14:40	Xion	chain?
2017-01-06 12:14:41	pingveno	Instead of deserializing to a serde_json::Value and then converting, just deserialize straight to the type.
2017-01-06 12:14:52	voider1	Dryvnt: https://doc.rust-lang.org/std/iter/struct.Chain.html
2017-01-06 12:14:55	Xion	Yep, Iterator::chain
2017-01-06 12:15:02	Dryvnt	Ah, thanks.
2017-01-06 12:15:06	◣	mandeep (mandeep@moz-ca9.dfa.8.198.IP) has quit (Quit: Leaving)
2017-01-06 12:15:14	Xion	!next
2017-01-06 12:15:14	rustbot	Another satisfied customer! NEXT!
2017-01-06 12:15:32	voider1	pingveno: How do I do that?
2017-01-06 12:15:33	Xion	It's super helpful that Rust essentially copied some bits of stdlib from Python :)
2017-01-06 12:15:41	voider1	Xion: Agreed. =)
2017-01-06 12:16:15	◥	mkmodrzew (Michal@moz-jhq6n3.168.pxs.pl) has joined #rust-beginners
2017-01-06 12:16:32	◣	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has quit (Ping timeout: 121 seconds)
2017-01-06 12:17:40	pingveno	voider1: There's an example here: https://github.com/serde-rs/json
2017-01-06 12:18:09	pingveno	The exact method will depend on the source of the JSON.
2017-01-06 12:18:58	voider1	Doesn't this directyl serialize it to an Update then?
2017-01-06 12:19:53	pingveno	I'm suggesting that your constructor might not be the best place.
2017-01-06 12:20:18	pingveno	Are you getting it from a string? Something that implements Read?
2017-01-06 12:20:20	voider1	Where is?
2017-01-06 12:20:47	pingveno	Sorry, where is what?
2017-01-06 12:20:59	Dryvnt	Playing around with chain, I get this ( https://play.rust-lang.org/?gist=6e0b303394425cfa0da430932788d99c&version=stable&backtrace=0 ) base example to work. I feel like it's far too complicated for what it's trying to do. What am I missing?
2017-01-06 12:21:45	◥	frogzilla (Mibbit@moz-gh1isj.static.twtelecom.net) has joined #rust-beginners
2017-01-06 12:21:46	◣	frogzilla (Mibbit@moz-gh1isj.static.twtelecom.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 12:22:07	◣	junqed (junqed@moz-egr.l1h.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-06 12:22:21	voider1	pingveno: Getting it from here https://docs.rs/reqwest/0.2.0/reqwest/struct.Response.html#method.json
2017-01-06 12:22:30	Xion	https://is.gd/znMYwE
2017-01-06 12:22:32	Xion	Dryvnt: ^
2017-01-06 12:22:33	voider1	pingveno: The best place to do that. 
2017-01-06 12:22:40	voider1	Is what I meant with "where is?"
2017-01-06 12:22:43	Dryvnt	LOL
2017-01-06 12:22:50	Xion	Your way works for general iterables of course.
2017-01-06 12:23:10	pingveno	voider1: Oh, in that case you can just do: let update: Update = response.json()?;
2017-01-06 12:23:22	voider1	Yeah, I was just looking at that now. 
2017-01-06 12:23:23	Dryvnt	That's hilariously simple. Thanks a bunch man
2017-01-06 12:23:35	Xion	!next
2017-01-06 12:23:35	rustbot	Another satisfied customer! NEXT!
2017-01-06 12:23:47	voider1	pingveno: I underestimated Serde's capabilities. 
2017-01-06 12:24:03	Xion	(This bot's function is too amusing to me not to use ;p)
2017-01-06 12:24:17	pingveno	Note the '?', which means an early return.
2017-01-06 12:24:32	pingveno	And error handling by the calling function.
2017-01-06 12:26:25	◣	rkruppe (chatzilla@moz-c6skn4.unity-media.net) has quit (Quit: ChatZilla 0.9.93 [Firefox 50.1.0/20161213225203])
2017-01-06 12:26:39	voider1	pingveno: The response.json() isn't an Update object, it contains an "result" which holds an array with Update objects.
2017-01-06 12:26:46	◣	ubsandroid_ (ubsan@moz-mt65v7.fpeu.gb19.fb90.2607.IP) has quit (Quit: <3)
2017-01-06 12:26:53	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-06 12:27:20	pingveno	voider1: Then just: let updates: Vec<Update> = response.json()?;
2017-01-06 12:27:48	voider1	pingveno: https://is.gd/6kkjfc
2017-01-06 12:28:21	voider1	pingveno: That wouldn't work if it's {"result": [Update: {...}, Update: {...}]}, right?
2017-01-06 12:28:29	voider1	I'd first have to find "result"
2017-01-06 12:28:40	pingveno	Oh, yeah, that gets more complex.
2017-01-06 12:28:54	pingveno	You could have a wrapper struct, I suppose
2017-01-06 12:29:05	voider1	What would that look like?
2017-01-06 12:29:45	pingveno	#[derive(Deserialize)] struct ResultWrapper<T> { result: <T> }
2017-01-06 12:30:03	pingveno	Rather, #[derive(Deserialize)] struct ResultWrapper<T> { pub result: <T> }
2017-01-06 12:30:33	pingveno	Er... #[derive(Deserialize)] struct ResultWrapper<T> { pub result: T }
2017-01-06 12:30:48	voider1	Would that abstraction make the code that much cleaner?
2017-01-06 12:30:57	◣	skeeter (skeeter@moz-d5s7vm.tukw.qwest.net) has quit (Quit: WeeChat 1.6)
2017-01-06 12:31:00	◥	skeeter (skeeter@moz-d5s7vm.tukw.qwest.net) has joined #rust-beginners
2017-01-06 12:31:35	pingveno	let updates: ResultWrapper<Vec<Update>> = update.json();
2017-01-06 12:31:46	◥	dm3 (dm3@moz-eaq.811.60.78.IP) has joined #rust-beginners
2017-01-06 12:31:50	pingveno	Uncertain
2017-01-06 12:32:00	◥	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has joined #rust-beginners
2017-01-06 12:34:06	◣	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-06 12:34:22	◥	cjhowe (textual@moz-aomlp1.hr.cox.net) has joined #rust-beginners
2017-01-06 12:35:57	voider1	Hmm, I don't know if I want to do that for that one instance.
2017-01-06 12:35:57	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-06 12:38:46	◥	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has joined #rust-beginners
2017-01-06 12:38:46	pingveno	It would work with all calls that produce { "result": ... }.
2017-01-06 12:38:46	pingveno	But ultimately, it's whatever makes more sense to you.
2017-01-06 12:38:46	◣	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has quit (Ping timeout: 121 seconds)
2017-01-06 12:38:46	voider1	pingveno: This'll probably be the only call which will have to parse a Result.
2017-01-06 12:38:46	voider1	Or, I mean {"result": .... }
2017-01-06 12:38:46	pingveno	Ah
2017-01-06 12:40:25	zwol	OK, next waitid-related question.  In the libc crate, what is the most sensible way to describe a function that exists everywhere _except_ OpenBSD? (Ya rly)
2017-01-06 12:40:28	voider1	The Update is the only thing I have to receive, it contains everything I need, so I think I won't make it.
2017-01-06 12:41:07	◥	nZac (nZac@moz-0knq4t.midco.net) has joined #rust-beginners
2017-01-06 12:41:22	~steveklabnik	zwol: cfg(not(whatever the openbsd triple is)) ?
2017-01-06 12:41:50	◣	hansaplast (hansaplast@moz-ifuba5.ve71.89v9.120b.2a02.IP) has quit (Connection closed)
2017-01-06 12:43:21	◥	nkr (nkr@moz-p2a.qp2.141.177.IP) has joined #rust-beginners
2017-01-06 12:43:32	zwol	yeah I guess it really is that simple :)
2017-01-06 12:43:43	◣	sreinhardt (quassel@moz-rql.nt3.148.198.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-06 12:43:53	◥	sreinhardt (quassel@moz-rql.nt3.148.198.IP) has joined #rust-beginners
2017-01-06 12:44:07	~steveklabnik	:)
2017-01-06 12:44:24	◥	hansaplast (hansaplast@moz-33ncn9.ve71.89v9.120b.2a02.IP) has joined #rust-beginners
2017-01-06 12:44:34	◣	dm3 (dm3@moz-eaq.811.60.78.IP) has quit (Connection closed)
2017-01-06 12:44:59	◥	dm3 (dm3@moz-eaq.811.60.78.IP) has joined #rust-beginners
2017-01-06 12:45:26	zwol	Next and hopefully last question for now, this one probably needs a NetBSD guru.
2017-01-06 12:45:33	zwol	https://travis-ci.org/rust-lang/libc/jobs/189564924#L837 <-- wtf
2017-01-06 12:45:58	◥	mwoodruff (mwoodruff@moz-b97lm9.pa.comcast.net) has joined #rust-beginners
2017-01-06 12:46:23	~steveklabnik	it's probably not good for #rust-beginners then :)
2017-01-06 12:47:24	◣	nkr (nkr@moz-p2a.qp2.141.177.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 12:49:01	◣	dm3 (dm3@moz-eaq.811.60.78.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 12:49:06	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 12:49:30	zwol	steveklabnik, the linter doesn't like your suggestion for openbsd...
2017-01-06 12:49:37	~steveklabnik	huh
2017-01-06 12:49:42	zwol	> src/unix/mod.rs:461 - use cfg_if! and submodules instead of #[cfg]
2017-01-06 12:50:14	zwol	hm, maybe I can just do a one-liner cfg-if! and make it happy
2017-01-06 12:51:59	◥	dm3 (dm3@moz-eaq.811.60.78.IP) has joined #rust-beginners
2017-01-06 12:52:43	◣	afshinmeh (textual@moz-l7tom4.hgkk.s1m0.8084.2a02.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 12:52:46	◥	mib_n4gvk7 (Mibbit@moz-ov9cvb.sntcca.sbcglobal.net) has joined #rust-beginners
2017-01-06 12:53:09	◥	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has joined #rust-beginners
2017-01-06 12:53:15	◣	mib_n4gvk7 (Mibbit@moz-ov9cvb.sntcca.sbcglobal.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 12:53:27	~steveklabnik	huh
2017-01-06 12:54:01	zwol	or I can steal the existing Android-related kludge :)
2017-01-06 12:54:36	◣	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has quit (Connection closed)
2017-01-06 12:54:48	◥	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has joined #rust-beginners
2017-01-06 12:56:25	◣	montanonic (nicholas@moz-u3evs7.or.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-06 12:57:22	◥	Kreest (Kreest@moz-itv67e.pool.invitel.hu) has joined #rust-beginners
2017-01-06 12:57:38	◣	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has quit (Quit: KVIrc 4.9.2 Aria http://www.kvirc.net/)
2017-01-06 12:57:47	◣	starblue (juergen@moz-g0jl61.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-06 12:57:51	◥	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has joined #rust-beginners
2017-01-06 12:58:00	◣	bread|laptop (bread@moz-fck.dqc.236.173.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 12:58:23	◥	Sklopi (tobias@moz-dgvh9q.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-06 12:58:34	◣	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has quit (Connection closed)
2017-01-06 12:59:10	◣	Sklopi (tobias@moz-dgvh9q.dip0.t-ipconnect.de) has left #rust-beginners ("Leaving")
2017-01-06 12:59:22	◥	Sklopi (tobias@moz-dgvh9q.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-06 12:59:37	◥	russ_za|2 (kvirc@moz-l6j8c4.voxdsl.co.za) has joined #rust-beginners
2017-01-06 12:59:37	◥	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has joined #rust-beginners
2017-01-06 13:00:00	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-06 13:00:35	◣	Kreest_ (Kreest@moz-itv67e.pool.invitel.hu) has quit (Ping timeout: 121 seconds)
2017-01-06 13:00:54	Sklopi	hi guys, i'm trying to use diesel with chrono feature, but when i use chrono::Datetime in my model i get: "the trait `diesel::types::FromSqlRow<diesel::types::Date, _>` is not implemented for `chrono::DateTime<chrono::UTC>`"
2017-01-06 13:01:47	◣	kulshrax (kulshrax@moz-lgr.jsl.201.199.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-06 13:01:53	◣	cjhowe (textual@moz-aomlp1.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 13:02:08	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-06 13:03:41	◥	cjhowe (textual@moz-aomlp1.hr.cox.net) has joined #rust-beginners
2017-01-06 13:03:50	◥	gunibert (gunibert@moz-1v6nka.dynamic.kabel-deutschland.de) has joined #rust-beginners
2017-01-06 13:03:51	◣	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has quit (Quit: KVIrc 4.9.2 Aria http://www.kvirc.net/)
2017-01-06 13:04:00	◣	russ_za|2 (kvirc@moz-l6j8c4.voxdsl.co.za) has quit (Quit: KVIrc 4.9.2 Aria http://www.kvirc.net/)
2017-01-06 13:04:18	◣	gunibert (gunibert@moz-1v6nka.dynamic.kabel-deutschland.de) has quit (Client exited)
2017-01-06 13:04:20	◥	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has joined #rust-beginners
2017-01-06 13:04:30	◥	gunibert (gunibert@moz-1v6nka.dynamic.kabel-deutschland.de) has joined #rust-beginners
2017-01-06 13:04:49	◣	burntsushi (burntsushi@moz-rhb6m6.fios.verizon.net) has quit (Connection closed)
2017-01-06 13:05:06	◥	Kreest_ (Kreest@moz-itv67e.pool.invitel.hu) has joined #rust-beginners
2017-01-06 13:06:26	◣	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has quit (Connection closed)
2017-01-06 13:07:03	◥	supercurio (curio@moz-khkdde.cust.bredbandsbolaget.se) has joined #rust-beginners
2017-01-06 13:07:50	◣	Kreest (Kreest@moz-itv67e.pool.invitel.hu) has quit (Ping timeout: 121 seconds)
2017-01-06 13:08:09	◣	tel (tel@moz-rdn.5rl.148.204.IP) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-06 13:09:09	◥	burntsushi (burntsushi@moz-rhb6m6.fios.verizon.net) has joined #rust-beginners
2017-01-06 13:09:09	⚡	Mode #rust-beginners [+o burntsushi] by ChanServ
2017-01-06 13:09:38	◥	tel (tel@moz-rdn.5rl.148.204.IP) has joined #rust-beginners
2017-01-06 13:11:06	◥	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has joined #rust-beginners
2017-01-06 13:11:07	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 13:11:53	supercurio	Hi guys!
2017-01-06 13:12:24	◥	junqed (junqed@moz-egr.l1h.70.178.IP) has joined #rust-beginners
2017-01-06 13:12:34	supercurio	as a Rust newbie I just started to watch the Rust meetup events like this one found on air mozilla: awesome
2017-01-06 13:12:35	supercurio	https://air.mozilla.org/rust-meetup-december-2016-12-15/
2017-01-06 13:12:54	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-06 13:13:19	◣	gunibert (gunibert@moz-1v6nka.dynamic.kabel-deutschland.de) has quit (Client exited)
2017-01-06 13:13:38	◣	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has quit (Client exited)
2017-01-06 13:13:41	~steveklabnik	supercurio: :)
2017-01-06 13:13:50	◥	Kreest__ (Kreest@moz-itv67e.pool.invitel.hu) has joined #rust-beginners
2017-01-06 13:14:37	◥	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has joined #rust-beginners
2017-01-06 13:15:49	◣	Kreest_ (Kreest@moz-itv67e.pool.invitel.hu) has quit (Ping timeout: 121 seconds)
2017-01-06 13:16:12	◥	degausser (Thunderbird@moz-midec3.dyn.plus.net) has joined #rust-beginners
2017-01-06 13:16:39	◥	kulshrax (kulshrax@moz-tppr0q.j0qm.7vpd.010d.2620.IP) has joined #rust-beginners
2017-01-06 13:16:53	◣	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has quit (Quit: WeeChat 1.5)
2017-01-06 13:17:02	◣	junqed (junqed@moz-egr.l1h.70.178.IP) has quit (Connection closed)
2017-01-06 13:17:13	◥	junqed (junqed@moz-egr.l1h.70.178.IP) has joined #rust-beginners
2017-01-06 13:17:38	◣	dionysus69 (Thunderbird@moz-f3r.u5k.134.178.IP) has quit (Connection closed)
2017-01-06 13:17:42	◥	dionysus69 (Thunderbird@moz-f3r.u5k.134.178.IP) has joined #rust-beginners
2017-01-06 13:18:58	supercurio	steveklabnik, I watched a couple of your talks in the process and particularly liked the one on the history of rust, it answers a lot of questions I had
2017-01-06 13:19:07	◥	Kreest_ (Kreest@moz-itv67e.pool.invitel.hu) has joined #rust-beginners
2017-01-06 13:19:31	~steveklabnik	great! :)
2017-01-06 13:20:04	◣	Kreest__ (Kreest@moz-itv67e.pool.invitel.hu) has quit (Ping timeout: 121 seconds)
2017-01-06 13:20:41	◣	kulshrax (kulshrax@moz-tppr0q.j0qm.7vpd.010d.2620.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 13:20:42	booyaa	supercurio: have you seen our youtube channel?
2017-01-06 13:20:49	booyaa	!videos
2017-01-06 13:20:49	rustbot	Rust YouTube channel is https://www.youtube.com/channel/UCaYhcUwRBNscFNUKTjgPFiA/feed
2017-01-06 13:21:29	supercurio	booyaa, yes this is where I started, however I realized I was learning from rather old videos which were not current anymore
2017-01-06 13:22:11	supercurio	then looking around I saw that air.mozilla.org had the same content but accurately dated: like the one talking about runtime and channels from 2012 :P
2017-01-06 13:22:47	◣	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has quit (Connection closed)
2017-01-06 13:23:05	◥	allegoryofthecave (allegoryoft@moz-icl.nvf.82.124.IP) has joined #rust-beginners
2017-01-06 13:23:13	~steveklabnik	yeah they were all imported recently
2017-01-06 13:23:20	~steveklabnik	iirc they're working on it
2017-01-06 13:23:42	◥	mib_x8ni3u (Mibbit@moz-58rulq.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-06 13:23:53	◣	mib_x8ni3u (Mibbit@moz-58rulq.ftth.glasoperator.nl) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 13:24:00	◥	sander (Mibbit@moz-58rulq.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-06 13:24:00	supercurio	it's a good idea to have the content on both still
2017-01-06 13:24:18	supercurio	especially with Youtube susbcriptions with notifications
2017-01-06 13:24:39	◥	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has joined #rust-beginners
2017-01-06 13:26:08	supercurio	I'm learning as much as possible now to identify if what I found relating to Vec performance vs array should be filed as a bug or I'm just not using it correctly
2017-01-06 13:26:16	supercurio	on that: https://users.rust-lang.org/t/vecs-overhead-compared-to-c-for-dsp-application/8664
2017-01-06 13:26:20	xliiv	i'm using https://github.com/mitsuhiko/redis-rs/blob/29bc204de892e706914838e0935f82f4888638c4/src/commands.rs#L725
2017-01-06 13:26:27	xliiv	.. like this
2017-01-06 13:26:28	xliiv	con.publish::<&str, &str, ()>(channel_name, tile_id).unwrap();
2017-01-06 13:27:01	◣	cjhowe (textual@moz-aomlp1.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 13:27:01	xliiv	.. and in publisher when i print channel i got this:
2017-01-06 13:27:03	xliiv	"channel 'events': %7B%7D"
2017-01-06 13:27:12	~steveklabnik	supercurio: ah right, i thought i saw your name somewhere :) what issue did you find?
2017-01-06 13:27:31	◣	Kreest_ (Kreest@moz-itv67e.pool.invitel.hu) has quit (Connection closed)
2017-01-06 13:27:33	◥	Puddles (Mibbit@moz-37eqsb.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-06 13:27:43	supercurio	steveklabnik, all the material so far mention "zero overhead" but in my use case Vecs are twice slower than fixed sizes arrays
2017-01-06 13:27:43	◣	Puddles (Mibbit@moz-37eqsb.hfc.comcastbusiness.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 13:28:01	~steveklabnik	supercurio: are you preallocating?
2017-01-06 13:28:07	supercurio	steveklabnik, while with the same algorithm they perform identically in C++, so I guess it's a bug but not sure yet
2017-01-06 13:28:07	xliiv	but when i write con.publish::<&str, &str, ()>(channel_name, "anything").unwrap();
2017-01-06 13:28:08	~steveklabnik	vecs are an amortized O(1)
2017-01-06 13:28:23	~steveklabnik	for append
2017-01-06 13:28:32	◣	Sklopi (tobias@moz-dgvh9q.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2017-01-06 13:28:36	~steveklabnik	basically, are you using with_capcaity or not
2017-01-06 13:28:40	◣	bushidoboy (dbishop@moz-ok6.k7o.229.192.IP) has left #rust-beginners ("WeeChat 1.6")
2017-01-06 13:28:40	~steveklabnik	that'd be my first guess
2017-01-06 13:28:55	~steveklabnik	xliiv: i haven't used that library, so i dunno :( hopefully someone else does
2017-01-06 13:28:56	supercurio	steveklabnik, yes the performance is on a simple DSP algorithm (source provided) which operate on fixed size
2017-01-06 13:29:24	xliiv	"channel 'events': "anything""
2017-01-06 13:29:36	◥	yanns (Mibbit@moz-kt9fuq.dynamic.kabel-deutschland.de) has joined #rust-beginners
2017-01-06 13:29:54	yanns	can somebody explain me this error?
2017-01-06 13:30:01	xliiv	steveklabnik, i think it's something with this
2017-01-06 13:30:03	xliiv	et tile_id = req.extensions.get::<Router>().unwrap().find("tile_id").unwrap_or("none");
2017-01-06 13:30:04	yanns	code:         if first.is_none() || first.unwrap() > time_lapse {             first = Some(time_lapse.clone());         }
2017-01-06 13:30:22	yanns	error: error[E0382]: use of moved value: `first`   --> src/main.rs:80:12    | 80 |         if first.is_none() || first.unwrap() > time_lapse {    |            ^^^^^              ----- value moved here    |            |    |            value used here after move    |    = note: move occurs because `first` has type `std::option::Option<Month>`, which does not i
2017-01-06 13:31:00	~steveklabnik	yanns: you should use a pastebin
2017-01-06 13:31:05	xliiv	steveklabnik, i thought that nobody helps me becasue problem is kinda stupid :)
2017-01-06 13:31:06	~steveklabnik	very ahrd to read that
2017-01-06 13:31:20	xliiv	steveklabnik, anyway thanks for attention :)
2017-01-06 13:31:21	◣	ot (ot@moz-gmtpic.cpe.webspeed.dk) has quit (Quit: ChatZilla 0.9.93 [Firefox 50.1.0/20161213212120])
2017-01-06 13:31:23	~steveklabnik	xliiv: nothing is stupid in this room; that said, depending on who is around or not, it can get quiet
2017-01-06 13:31:53	yanns	yes, the formatting is not so readable. the pastebin: http://pastebin.com/YQnpXr5j
2017-01-06 13:32:33	~steveklabnik	so, i'm not sure why it's evaluating it this way
2017-01-06 13:32:36	~steveklabnik	but unwrap takes ownership by move
2017-01-06 13:32:54	◥	nusic (Mibbit@moz-ihlbnh.cust.bredband2.com) has joined #rust-beginners
2017-01-06 13:32:54	yanns	in plain english: if the option is None or if the content of the option is > than a value, I'd like to mutate the option to contain Some(value)
2017-01-06 13:32:56	◣	Hoff (kvirc@moz-84jd08.dhcp.inet.fi) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2017-01-06 13:33:01	~steveklabnik	yeah
2017-01-06 13:33:01	~steveklabnik	so
2017-01-06 13:33:09	◥	dave_blood (Mibbit@moz-jdn.1hn.108.138.IP) has joined #rust-beginners
2017-01-06 13:33:11	▷	steveklabnik thinks
2017-01-06 13:33:34	◣	davs_ (davs@moz-5fltd5.178-41-153.t-com.sk) has quit (Ping timeout: 121 seconds)
2017-01-06 13:34:12	◥	fwiw (fwiw@moz-l7r.mds.82.36.IP) has joined #rust-beginners
2017-01-06 13:34:20	@mbrubeck	yanns: try `first.as_ref().unwrap() > time_lapse`
2017-01-06 13:34:32	@mbrubeck	You might need to dereference the left-hand side or reference the right-hand-side
2017-01-06 13:35:18	misdreavus	if first.map(|v| v > time_lapse).unwrap_or(false)
2017-01-06 13:35:25	yanns	it compiles with `first.as_ref().unwrap() > &time_lapse` but I'm comparing references here I think
2017-01-06 13:35:43	◣	TheCycoONE (quassel@moz-d4s.1g6.223.162.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 13:35:46	misdreavus	might need an as_ref() in there
2017-01-06 13:36:00	◣	dm3 (dm3@moz-eaq.811.60.78.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 13:36:06	@mbrubeck	yanns: comparing references will compare their values, since &T doesn't have its own implementation of the comparison operators.
2017-01-06 13:36:07	~steveklabnik	https://is.gd/D8fccM is my first attempt
2017-01-06 13:36:17	~steveklabnik	but, i feel like combinators is better
2017-01-06 13:36:20	◥	cjhowe (textual@moz-aomlp1.hr.cox.net) has joined #rust-beginners
2017-01-06 13:36:54	yanns	`first.map(|v| v > time_lapse).unwrap_or(false)` seems cleaner to me, thx. I'll try to fix the `^^^^^ value moved here in previous iteration of loop` error
2017-01-06 13:36:56	supercurio	steveklabnik, as a general rule of thumb, for read/write operations within allocated Vectors using zip iterator, would you expect the same performance as from an array?
2017-01-06 13:37:13	◥	davs (davs@moz-5fltd5.178-41-153.t-com.sk) has joined #rust-beginners
2017-01-06 13:37:22	~steveklabnik	supercurio: yes. i am not a super expert on this though
2017-01-06 13:37:30	~steveklabnik	but they both should effectively be slices
2017-01-06 13:37:32	◣	nercury (nercury@moz-ngr949.static.zebra.lt) has quit (Quit: ZzzzzZzzZzzzZzZzzZ)
2017-01-06 13:37:34	yanns	`first.as_ref().map(|v| v > &time_lapse).unwrap_or(false)` compiles
2017-01-06 13:37:34	~steveklabnik	so, same thing
2017-01-06 13:37:45	◣	vorner (vorner@moz-fjnbbo.cz) has quit (Quit: Error from remote client)
2017-01-06 13:38:08	yanns	thx for all the info!
2017-01-06 13:38:17	misdreavus	oh, unwrap_or(true) is what you want https://is.gd/hZr2Q5
2017-01-06 13:38:22	supercurio	steveklabnik, okay so I guess it's a bug then. I'll continue studying some more to make a good bug report soon
2017-01-06 13:38:28	◣	sebk (sebk@moz-05nbdi.pools.vodafone-ip.de) has quit (Ping timeout: 121 seconds)
2017-01-06 13:39:04	@mbrubeck	supercurio: Yes, though once code like this has been inlined and optimized you can get surprising effects like this.
2017-01-06 13:39:04	breeden_	well depending on what time_lapse is, you could also do: `first.unwrap_or(u32::MAX) > time_lapse {`
2017-01-06 13:39:16	@mbrubeck	supercurio: Have you tested on a recent nightly Rust?
2017-01-06 13:39:25	bluss	yanns: and .map_or(x, f) is a short version of .map(f).unwrap_or(x). Maybe bringing back the .filtered(predicate) on Option could be a thing :)
2017-01-06 13:39:46	radix-M	Is there some way to "cast" a phantom type parameter to a new type without "reconstructing" the whole structure that it's in?
2017-01-06 13:39:51	supercurio	mbrubeck, yes from a few days althrough I didn't try with last night's one :D let's see!
2017-01-06 13:39:55	@mbrubeck	supercurio: On my machine using rustc 1.16.0-nightly (5d994d8b7 2017-01-05), `iir_vec3` and `iir_vec_zip_3` are as fast or faster than most of the arry versions.
2017-01-06 13:40:11	yanns	bluss: I was looking for a `contains`... ;)
2017-01-06 13:40:22	@mbrubeck	though most of the other vec functions are still measureably slower.
2017-01-06 13:40:41	◣	tel (tel@moz-rdn.5rl.148.204.IP) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-06 13:40:50	breeden_	mbrubeck: oh where are those numbers published?
2017-01-06 13:40:55	supercurio	mbrubeck, yes these are the ones with some naive manual optimisations to the algorithm, and not even using zip()
2017-01-06 13:40:57	radix-M	I'm trying stuff like `let newfoo = Foo::<NewType> { ..foo}` , or `foo as Foo<NewType>`, but none of those are allowed
2017-01-06 13:41:36	supercurio	mbrubeck, interestingly I noticed that if these were working close to array on Intel, on ARM they were still 40% slower than array
2017-01-06 13:41:47	◥	mib_yg91h3 (Mibbit@moz-h3gnha.dhcp4.washington.edu) has joined #rust-beginners
2017-01-06 13:42:01	◣	mib_yg91h3 (Mibbit@moz-h3gnha.dhcp4.washington.edu) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 13:42:09	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2017-01-06 13:42:20	◣	karinqe (karinqe@moz-ptt.nvt.172.163.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 13:42:36	@mbrubeck	breeden_: https://gist.github.com/mbrubeck/14c20da1667a43f47924ab39d961f38d has numbers from a single run. I'm getting a fair amount of variance between runs, but the overall pattern stays consistent.
2017-01-06 13:43:30	NfNitLoop	is this on something compiled with --release? 
2017-01-06 13:43:34	@mbrubeck	radix-M: If you don't want to move each of the fields individually, you can use unsafe code and cast a raw pointer.
2017-01-06 13:43:43	@mbrubeck	NfNitLoop: Yes
2017-01-06 13:43:52	radix-M	mbrubeck: scary :(
2017-01-06 13:44:11	@mbrubeck	https://gist.github.com/mbrubeck/14c20da1667a43f47924ab39d961f38d has links to the benchmarks we're talking about, and some prior discussion
2017-01-06 13:44:18	radix-M	mbrubeck: I don't mind moving them, it's just a lot of syntactical overhead especially when I have many cases
2017-01-06 13:44:26	@mbrubeck	sorry, wrong link
2017-01-06 13:44:35	@mbrubeck	https://users.rust-lang.org/t/vecs-overhead-compared-to-c-for-dsp-application/8664
2017-01-06 13:45:00	@mbrubeck	radix-M: Yeah. I guess someone could write a macro or a custom `derive` to generate the boilerplate automatically.
2017-01-06 13:45:06	radix-M	I guess now that I think of it, this isn't even related to phantom types. it could be a non-phantom thing too that causes this
2017-01-06 13:45:40	breeden_	or right, i remember this post
2017-01-06 13:45:44	◥	morton (Mibbit@moz-7dc97c.pool.telekom.hu) has joined #rust-beginners
2017-01-06 13:45:58	@mbrubeck	radix-M: The difference with zero-sized types like PhantomData is that you can convert without actually doing anything, just by unsafe casting/transmuting
2017-01-06 13:46:42	◣	hansaplast (hansaplast@moz-33ncn9.ve71.89v9.120b.2a02.IP) has quit (Connection closed)
2017-01-06 13:46:47	◥	tel (tel@moz-rdn.5rl.148.204.IP) has joined #rust-beginners
2017-01-06 13:46:48	◥	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined #rust-beginners
2017-01-06 13:47:08	breeden_	mbrubeck: i'm actually a little suprised that there is a difference in `let n = vec.len(); for idx in 0..n {` and `for idx in 0..vec.len() {`
2017-01-06 13:47:11	◥	avocado (iasoon@moz-037gte.bsj8.an54.a03f.2a02.IP) has joined #rust-beginners
2017-01-06 13:47:20	morton	hi
2017-01-06 13:47:20	radix-M	yeah. in the non-phantom case, though, I would still like some syntax where I only need to mention the one field that needs to change (I realize I have cases like this too). like Foo<NewType> = Foo { newtypefield: NewType, ..oldfoo}
2017-01-06 13:47:23	jean377	hi
2017-01-06 13:47:31	breeden_	oh wait there is some differences in the body i see
2017-01-06 13:47:37	◣	sander (Mibbit@moz-58rulq.ftth.glasoperator.nl) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 13:47:56	◥	sterlz (Mibbit@moz-b6cc3f.or.charter.com) has joined #rust-beginners
2017-01-06 13:48:19	morton	question, why doesn't the community provide libc funcionality by default for rust but only in a dangerously maintained libc crate?
2017-01-06 13:48:25	morton	libc is SO essential
2017-01-06 13:48:33	radix-M	I guess something like "row typing" would solve this, but so would just a special case for structs with type parameters
2017-01-06 13:48:38	breeden_	hmm still
2017-01-06 13:48:56	misdreavus	"dangrously maintained"?
2017-01-06 13:48:57	◥	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has joined #rust-beginners
2017-01-06 13:49:23	breeden_	mbrubeck: are the panic branches different from iir_vec and iir_vec_2?
2017-01-06 13:49:24	supercurio	mbrubeck, I tried again with lastest nighly: same results as before on Intel normal zip over vec slices still 2x slower as array. manually optimized close to array
2017-01-06 13:49:26	morton	0.2.9 is quite... young
2017-01-06 13:49:35	~steveklabnik	eh
2017-01-06 13:49:40	◥	sander (Mibbit@moz-58rulq.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-06 13:49:42	~steveklabnik	so, first of all
2017-01-06 13:49:47	~steveklabnik	libc is maintained by the libs team
2017-01-06 13:49:53	◣	mkmodrzew (Michal@moz-jhq6n3.168.pxs.pl) has quit (Quit: Leaving)
2017-01-06 13:49:57	~steveklabnik	so it's just as much "from the rust project" as anything else
2017-01-06 13:50:38	~steveklabnik	second, it's at 0.2 becuase, well, 0.1 was the first release series, and upgrading to 0.2 was _very painful_ for the ecosystem. so until we're sure about a good major version bump, it's gonna sit at 0.2.x for a long while
2017-01-06 13:51:00	morton	then why is it an external thing? I know, GNU and FOSS and stuff, make everything as modular as possible but libc functionality is essential for systems programming
2017-01-06 13:51:01	~steveklabnik	but it's not "young", it's the libc wrapper that we've been using for years
2017-01-06 13:51:10	~steveklabnik	not everything needs libc
2017-01-06 13:51:20	~steveklabnik	or rather
2017-01-06 13:51:29	~steveklabnik	needs to call out to non-libc stuff that's in the standard library
2017-01-06 13:51:36	@mbrubeck	morton: Once something is in the standard libraries, it can never release a breaking change (unless we do a Rust 2.0, which we hope to avoid), so we don't put things there unless we're confident they won't need improvement.
2017-01-06 13:51:37	morton	everything, that needs the famouse "zero abstraction c calling" needs libc
2017-01-06 13:52:05	@mbrubeck	Keeping something external is *better* for maintenance, because it doesn't prevent useful fixes and improvements by freezing the API forever
2017-01-06 13:52:09	morton	and of course if you write software anything more complicated than a hello world, you would like to call curl, X etc from C
2017-01-06 13:52:29	morton	I see
2017-01-06 13:52:31	◣	degausser (Thunderbird@moz-midec3.dyn.plus.net) has quit (Ping timeout: 121 seconds)
2017-01-06 13:52:37	supercurio	mbrubeck, on ARM / Pi3 it's still like 2251ns vs 3296ns (buffer size: 128) so yes no change
2017-01-06 13:52:39	@mbrubeck	morton: By the way, bringing common crates like this up to 1.0 is one of the key items in the 2017 roadmap: https://github.com/rust-lang/rfcs/blob/master/text/1774-roadmap-2017.md#rust-should-have-10-level-crates-for-essential-tasks
2017-01-06 13:52:56	◥	durka42 (durka42@moz-h07.vjt.130.158.IP) has joined #rust-beginners
2017-01-06 13:53:04	WindowsBunny	morton: libc is not at all essential on windows
2017-01-06 13:53:23	morton	oh indeed
2017-01-06 13:53:27	WindowsBunny	morton: On Windows all IO in Rust is done directly through win32 without touching libc at all
2017-01-06 13:53:32	breeden_	mbrubeck: interesting benchmarks, thanks for sharing
2017-01-06 13:53:33	radix-M	I was gonna say, I have never used libc, not sure what it's for :)
2017-01-06 13:53:36	◣	tel (tel@moz-rdn.5rl.148.204.IP) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-06 13:53:48	@mbrubeck	breeden_: They're from supercurio 
2017-01-06 13:53:49	morton	I was naive with only linux orientation, of course you have other platforms to think of
2017-01-06 13:53:59	WindowsBunny	Really we only use libc for math functions and memory functions which are trivial user space functions that Rust could write itself if it felt like it
2017-01-06 13:54:07	breeden_	im surprised that vec_3 and _array are so close
2017-01-06 13:54:08	xliiv	steveklabnik, when i send request with curl everything works, but with python script the error occures
2017-01-06 13:54:28	◣	yanns (Mibbit@moz-kt9fuq.dynamic.kabel-deutschland.de) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 13:54:48	xliiv	steveklabnik, nvm, i need to dig it myself 
2017-01-06 13:54:54	◥	wallacoloo____ (colin@moz-8lg3ne.dhcp4.washington.edu) has joined #rust-beginners
2017-01-06 13:55:07	◣	morton (Mibbit@moz-7dc97c.pool.telekom.hu) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 13:55:14	supercurio	breeden_ they are not close on ARM however
2017-01-06 13:55:15	radix-M	so I dunno, is there a more terse way to do something like this? is my design bad? https://gist.github.com/radix/bea119390be3be7b776b83bc1079c819
2017-01-06 13:55:24	breeden_	supercurio: pfff, ARM ;P
2017-01-06 13:55:46	supercurio	breeden_ right who use ARM these days ;P
2017-01-06 13:55:53	breeden_	supercurio: i wouldn't have thought about establishing registers before my loop like in _vec_3
2017-01-06 13:55:54	radix-M	the part that's constructing the Creature is identical in both cases, just the type parameter is different
2017-01-06 13:56:19	@mbrubeck	radix-M: Could you write a generic function to translate any Creature<T> to any Creature<U>, so you only need to list all the fields in one place?
2017-01-06 13:56:39	supercurio	breeden_ actually this is for a software DSP that'll run on Raspberry Pi, that's why I look at the performance before choosing the language
2017-01-06 13:56:40	radix-M	hum, lemme try
2017-01-06 13:56:58	◣	staticassert (Mibbit@moz-dqq.uce.118.208.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 13:57:59	radix-M	mbrubeck: yes, nice! thank you very much, that helps a ton since I have many of these throughout my project
2017-01-06 13:57:59	breeden_	supercurio: why is there such a dramatic difference creating "registers" before the loop and using the bq: &mut Biquad?
2017-01-06 13:58:03	supercurio	breeden_ yes I thought maybe the compiler might have an easier time with some of the data coming from local variables instead
2017-01-06 13:58:18	radix-M	now it's just `CreatureVari::Able(self.into_other::<Able>())`
2017-01-06 13:59:17	breeden_	supercurio: iirc, zip used to have a hard time keeping up with _vec implementations.  I think there were some discussions and eventually some optimizations to get them to par
2017-01-06 13:59:29	supercurio	breeden_ I think in C++ it makes a very small difference. Reading the MIR or ASM output for the normal vs vec_3 might tell
2017-01-06 13:59:36	@mbrubeck	radix-M: It can probably even infer the <Able> there :)
2017-01-06 14:00:18	breeden_	supercurio: I've noticed in C code, (well, while reading LuaTeX's source), they often declared "registers" whenever they started a routine that was going to have some kind of loop
2017-01-06 14:00:19	radix-M	oh yes, of course you're right, thanks
2017-01-06 14:00:51	breeden_	supercurio: yeah i might take a look at the LLVM IR to see what LLVM is doing here...
2017-01-06 14:00:57	@mbrubeck	supercurio: I do think it's worth filing a bug about this, since clearly it's not generating the most optimal code, and the array cases are a good demonstration that it could do better.
2017-01-06 14:01:50	breeden_	mbrubeck: don't we have a few benchmarks that the compiler keeps an eye on?  Would something like this:  seemingly the same algorithms should probably have roughly the same performance
2017-01-06 14:01:57	supercurio	breeden_ yes they were listed by posters in the thread. Oh I actually got the idea from Teensy where the dev used this approach to store the biquad variables when he optimized his implementation for SIMD
2017-01-06 14:02:25	◥	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has joined #rust-beginners
2017-01-06 14:02:25	supercurio	mbrubeck, cool I will do that then
2017-01-06 14:03:26	supercurio	mbrubeck, thinking that using compile-time fixed size arrays to get the same performance as C++, the design for my program suddently seemed quite difficult
2017-01-06 14:03:41	breeden_	supercurio: so after bench testing, did you decide to stay with rust or go with C++?
2017-01-06 14:03:47	supercurio	I really hope I'll be able to use Vecs!
2017-01-06 14:03:57	◣	sander (Mibbit@moz-58rulq.ftth.glasoperator.nl) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 14:04:23	supercurio	breeden_ I'm still here so I'll stick with Rust :)
2017-01-06 14:04:38	breeden_	*high five*
2017-01-06 14:05:08	◥	duosrx_ (duosrx@moz-ghn5ka.vc.shawcable.net) has joined #rust-beginners
2017-01-06 14:05:23	◥	sander (sander@moz-58rulq.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-06 14:05:46	◥	Ixrec (Ixrec@moz-k2sokt.dyn.plus.net) has joined #rust-beginners
2017-01-06 14:05:57	breeden_	supercurio: as for zip_4 vs zip_3 and zip_1 vs zip_2, I'm pretty sure that rustc optimizes out *& _before_ it gets to LLVM IR.  This is a rather recent optimization, last few months or so
2017-01-06 14:06:28	◣	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has quit (Ping timeout: 121 seconds)
2017-01-06 14:06:34	◣	mwoodruff (mwoodruff@moz-b97lm9.pa.comcast.net) has left #rust-beginners
2017-01-06 14:07:01	◣	sander (sander@moz-58rulq.ftth.glasoperator.nl) has left #rust-beginners
2017-01-06 14:07:15	supercurio	breeden_ it could be a margin of error in measurement but in every run the zip_2 was a bit faster on both Intel and ARM
2017-01-06 14:07:18	◣	undeadleech (undeadleech@moz-h6u6jb.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2017-01-06 14:07:35	breeden_	than zip_1? hm
2017-01-06 14:08:04	◣	duosrx (duosrx@moz-ghn5ka.vc.shawcable.net) has quit (Ping timeout: 121 seconds)
2017-01-06 14:08:08	◥	sander (sander@moz-58rulq.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-06 14:08:16	supercurio	(&x, y) faster than (x, y)
2017-01-06 14:08:25	supercurio	very marginally
2017-01-06 14:08:37	◥	bjz (bjz@moz-puppgq.tpgi.com.au) has joined #rust-beginners
2017-01-06 14:09:00	breeden_	i'd like to say that's just a margin of error, but there is a lot of magic from (&x, y) vs (x, y) until it hits LLVM IR
2017-01-06 14:09:09	◥	jensend (jensend@moz-fms.95k.202.130.IP) has joined #rust-beginners
2017-01-06 14:09:10	◣	duosrx_ (duosrx@moz-ghn5ka.vc.shawcable.net) has quit (Ping timeout: 121 seconds)
2017-01-06 14:09:28	bluss	there are open bugs related to this kind of code, maybe even the &mut noalias issue?
2017-01-06 14:09:40	◣	sterlz (Mibbit@moz-b6cc3f.or.charter.com) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 14:09:58	◣	davs (davs@moz-5fltd5.178-41-153.t-com.sk) has quit (Ping timeout: 121 seconds)
2017-01-06 14:09:59	bluss	!gh 31681
2017-01-06 14:09:59	rustbot	[Issue 31681] <open> Mark &mut pointers as noalias once LLVM no longer miscompiles them <https://github.com/rust-lang/rust/issues/31681>
2017-01-06 14:10:11	breeden_	once LLVM no longer miscompiles them :P
2017-01-06 14:10:14	xliiv	steveklabnik, breaking news universe works as usually, the error was just me being retarded ;)
2017-01-06 14:10:37	breeden_	bluss: is this related to the (&x, y) vs (x, y)? or something else
2017-01-06 14:11:07	bluss	not related to that I think. But it could show up whenever you're using Vec
2017-01-06 14:11:09	◣	dave_blood (Mibbit@moz-jdn.1hn.108.138.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 14:11:22	breeden_	supercurio: you didn't try the same registers, local variables, trick with arrays as you did with Vec
2017-01-06 14:11:54	supercurio	breeden yes I did but it was a bit slower actually
2017-01-06 14:12:05	◥	davs (davs@moz-gljmd0.178-41-245.t-com.sk) has joined #rust-beginners
2017-01-06 14:12:07	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 14:12:08	supercurio	it's the result for iir_slice_zip_2 (sliced array)
2017-01-06 14:12:21	◣	stelarcf (stelarcf@moz-jd7lsk.com) has quit (Client exited)
2017-01-06 14:12:37	◥	stelarcf (stelarcf@moz-jd7lsk.com) has joined #rust-beginners
2017-01-06 14:12:50	◣	lostInTheDataJungle (oli@moz-8c2877.pools.vodafone-ip.de) has left #rust-beginners ("")
2017-01-06 14:12:58	supercurio	it's zip with the (now de-)optimization trick from an array[0..length]
2017-01-06 14:13:04	◣	Andoriyu (Andoriyu@moz-h48khc.res.rr.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-06 14:13:15	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 14:13:54	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-06 14:14:03	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-06 14:14:53	◥	kulshrax (kulshrax@moz-i8755e.j0qm.7vpd.010d.2620.IP) has joined #rust-beginners
2017-01-06 14:15:58	jensend	Is there a "best" way to create a generic Error type for when you have have a function with multiple try!() statements that can return different error types? So far, I've seen Box<Error> and blindly format!-ing errors to a String.
2017-01-06 14:16:38	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 14:16:47	◥	duosrx (duosrx@moz-ghn5ka.vc.shawcable.net) has joined #rust-beginners
2017-01-06 14:17:03	◣	duosrx (duosrx@moz-ghn5ka.vc.shawcable.net) has quit (Connection closed)
2017-01-06 14:17:27	◥	duosrx (duosrx@moz-ghn5ka.vc.shawcable.net) has joined #rust-beginners
2017-01-06 14:17:34	◣	duosrx (duosrx@moz-ghn5ka.vc.shawcable.net) has quit (Connection closed)
2017-01-06 14:17:49	misdreavus	the lossless/"canonical" way is to make an enum that has variants for each Error type that could be used, and From<OtherError> impls that create the proper variant
2017-01-06 14:17:56	◥	duosrx (duosrx@moz-ghn5ka.vc.shawcable.net) has joined #rust-beginners
2017-01-06 14:18:04	misdreavus	you can write this up yourself, or use something like error-chain which takes some of the tedium away
2017-01-06 14:18:08	misdreavus	!crate error-chain
2017-01-06 14:18:08	rustbot	error-chain (0.7.2) - Yet another error boilerplate library. -> https://crates.io/crates/error-chain <https://docs.rs/crate/error-chain>
2017-01-06 14:18:56	◣	kulshrax (kulshrax@moz-i8755e.j0qm.7vpd.010d.2620.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 14:19:09	bluss	supercurio: the original "slice to same length" thing was very sensitive to the details
2017-01-06 14:19:20	bluss	supercurio: for "zip" like loops
2017-01-06 14:19:30	stephaneyfx	supercurio, i got your latest code and there are still bugs in that, for example, iir_vec_3 does not compute the same thing as iir_vec_2
2017-01-06 14:19:46	jensend	misdreavus: Thanks. The enum thing seemed like the most "elegant" way to do it. Didn't know about that crate, though.
2017-01-06 14:20:19	stephaneyfx	supercurio, we discussed that already a few days ago and i haven't followed the discussion since, so i'm not sure if that's desired to keep these differences
2017-01-06 14:20:21	misdreavus	jensend: yeah, error-chain is pretty highly talked-about, it's nice for binaries
2017-01-06 14:20:47	misdreavus	jensend: i personally wrote up the enum myself for my twitter library - it's a one-time tedium that you get to ignore afterward
2017-01-06 14:20:56	◥	Vatyx (Mibbit@moz-hmhb1r.static-ip.telepacific.net) has joined #rust-beginners
2017-01-06 14:21:23	jean377	I am hitting the usual "does not long live enough" error, anyone could give me a hint ? https://is.gd/BC5tn2
2017-01-06 14:22:02	supercurio	stephaneyfx, hello :) it's possible. I'll go back at it and improve the benchmark code, before that I'm taking a couple days to learn more about the language
2017-01-06 14:22:02	Vatyx	curl https://sh.rustup.rs -sSf | sh
2017-01-06 14:22:07	Vatyx	Whoops
2017-01-06 14:22:22	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Connection closed)
2017-01-06 14:22:34	Vatyx	Hi guys, I was trying to install rustup using curl https://sh.rustup.rs -sSf | sh but during the installation I am getting a timeout error
2017-01-06 14:22:43	◥	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has joined #rust-beginners
2017-01-06 14:22:44	Vatyx	Anyone know what it could be? My internet is working fine
2017-01-06 14:22:46	stephaneyfx	supercurio, sounds good. i hope you have as much fun learning rust as i am :)
2017-01-06 14:22:51	jean377	I am not sure how to pass that slice array efficiently
2017-01-06 14:23:00	stephaneyfx	as i have*
2017-01-06 14:23:14	breeden_	Vatyx: i don't get a timeout error :s
2017-01-06 14:23:28	misdreavus	jean377: the issue is that the thread is trying to send a reference across threads to the other end of the channel
2017-01-06 14:23:50	Vatyx	Do you know what it could be? Or is there another way to install rust without rustup?
2017-01-06 14:24:00	jean377	yep I got that. Should I just clone , or how do I pass it ?
2017-01-06 14:24:08	misdreavus	jean377: but since the channel's not guaranteed to be picked up immediately, it's not guaranteed that the reference will be pointing to the same data afterward
2017-01-06 14:24:13	supercurio	stephaneyfx, yes and I even start to drink the kool-aid of safety, crates.io and all that ;)
2017-01-06 14:24:34	◥	leo_ (leo@moz-q1i5or.nc.charter.com) has joined #rust-beginners
2017-01-06 14:24:38	stephaneyfx	supercurio, i know the feeling :)
2017-01-06 14:24:38	misdreavus	jean377: cloning it is probably the easiest, but then you've got 1kb chunks shuttling aroud
2017-01-06 14:24:55	leo_	can anyone help me understand why docopt isn't parsing my number? https://bpaste.net/show/500c718425ce
2017-01-06 14:25:02	breeden_	you have kool-aid??
2017-01-06 14:25:32	◣	wallacoloo____ (colin@moz-8lg3ne.dhcp4.washington.edu) has quit (Client exited)
2017-01-06 14:25:34	breeden_	misdreavus: would Arc work here?
2017-01-06 14:25:55	supercurio	breeden_ hehe
2017-01-06 14:25:58	jean377	misdreavus: is there a way to pass a reference and move the ownership through the channel?
2017-01-06 14:26:00	stephaneyfx	i meant the pleasant feeling of learning all these nice rust features
2017-01-06 14:26:10	◣	Vatyx (Mibbit@moz-hmhb1r.static-ip.telepacific.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 14:26:42	◥	pudgetta (Mibbit@moz-doitv0.client.mchsi.com) has joined #rust-beginners
2017-01-06 14:26:42	misdreavus	jean377: what might need to happen is that you use a Vec instead, so it can move its data through
2017-01-06 14:26:45	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Ping timeout: 121 seconds)
2017-01-06 14:27:26	jean377	misdreavus: I tried with a Vec but it throws the same error
2017-01-06 14:27:43	◣	pudgetta (Mibbit@moz-doitv0.client.mchsi.com) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 14:27:43	jean377	I am probably not passing it correctly though
2017-01-06 14:27:55	supercurio	stephaneyfx, same. for the past month or so I've been learning C++, from old to C++11/14, move semantics and all that, and it seems that most of what's remaining for potential improvements in C++ for 2020+ is already here in Rust, and more
2017-01-06 14:27:59	misdreavus	jean377: this times out which tells me it's probably good https://is.gd/ENJprK
2017-01-06 14:28:20	misdreavus	jean377: you might even be able to turn buffer back into an array
2017-01-06 14:28:34	misdreavus	jean377: the trick is that slices have a to_vec() method that clones the slice into a new Vec
2017-01-06 14:28:38	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 14:28:39	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-06 14:29:26	supercurio	stephaneyfx, it's what impresses me the most with Rust, even if its matural has been considered slow, it already reached what C++ has been stalling on for years
2017-01-06 14:29:35	misdreavus	jean377: yeah, buffer can be an array still, just cloning the slice into a Vec tosses a copy of the data across so the reader can reuse the buffer https://is.gd/EiCA1w
2017-01-06 14:29:47	◣	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 14:29:51	stephaneyfx	supercurio, true in a way. but there also some things c++ can do which rust can't... yet (e.g. CTFE)
2017-01-06 14:30:01	breeden_	probably better is Vec::with_capacity(1460) and just give ownership of the entire Vec?
2017-01-06 14:30:45	stephaneyfx	supercurio, well it also helps that there's no backward compatibility of ~30 years to maintain :p
2017-01-06 14:31:19	◣	Sergio_ (uid203766@moz-h8mp44.stonehaven.irccloud.com) has quit (Quit: Connection closed for inactivity)
2017-01-06 14:31:24	jedireza	I noticed the characters `(B[m` in the playground. Am I missing a font or is this a bug? https://irccloud.mozilla.com/file/D9deXzbt/Screenshot%20from%202017-01-06%2014-29-52.png
2017-01-06 14:31:29	jean377	misdreavus: oh that's great! many thanks for that !!
2017-01-06 14:31:33	supercurio	stephaneyfx, but isn't CTFE what makes some C++ codebases take multiple hours to build? (I read that on various hacker news discussions)
2017-01-06 14:32:00	stephaneyfx	supercurio, sure, it doesn't help speeding up builds
2017-01-06 14:32:01	Ixrec	depends on the codebase, popular targets are CTFE, template instantiations, and the lack of a proper module system
2017-01-06 14:32:07	misdreavus	breeden_: ish, it might be nicer to not allocate the entire buffer literally every loop cycle, especially if you expect not to receive the entire buffer's worth
2017-01-06 14:32:11	◥	tel (tel@moz-0jh5f2.ma.comcast.net) has joined #rust-beginners
2017-01-06 14:32:13	◣	avocado (iasoon@moz-037gte.bsj8.an54.a03f.2a02.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 14:32:32	breeden_	misdreavus: oh,then maybe put that vector outside of the loop? eitherway we'd be copying
2017-01-06 14:32:42	misdreavus	breeden_: OTOH, you do the same thing with a fixed array :/
2017-01-06 14:32:44	misdreavus	yeah
2017-01-06 14:32:58	breeden_	you are probably right though
2017-01-06 14:33:17	supercurio	stephaneyfx, yes the drawback is FFI bindings, the 3rd speaker here https://air.mozilla.org/rust-meetup-december-2016-12-15/ described how complex are OpenSSL bindings
2017-01-06 14:34:06	Ixrec	the stuff where Rust "beats" C++ is generally stuff that needs to be done right on day 1, like having a package manager, having memory-safe/immutable/thead-safe/etc be opt-out instead of opt-in, and so on
2017-01-06 14:34:08	stephaneyfx	supercurio, i have no experience with FFI in rust, so i can't comment on that
2017-01-06 14:34:19	jean377	misdreavus: however, isn't it doing what we were trying to avoid which is copying the entire array ? or is just copying the reference, I am not sure
2017-01-06 14:34:31	Ixrec	the stuff where C++ "beats" Rust is primarily due to its age, or because Rust hasn't finished its equivalent feature(s) yet, like CTFE
2017-01-06 14:34:40	breeden_	jean377: that would copy just a reference, but create a new array waiting for new input
2017-01-06 14:34:44	breeden_	once the loop iterates again
2017-01-06 14:34:54	stephaneyfx	Ixrec, good points
2017-01-06 14:35:09	Ixrec	so far, I'm not aware of any advantage C++ has that Rust cannot theoretically fix
2017-01-06 14:35:13	misdreavus	jean377: we're copying only the bytes that were read from that one iteration into the channel
2017-01-06 14:35:22	Ixrec	and because I'm a fanboy I assume it will fix all of them =D
2017-01-06 14:36:08	ubsan	Ixrec: imo, it has fixed the problems
2017-01-06 14:36:14	ubsan	the issue is the missing features
2017-01-06 14:36:23	ubsan	(which it will fix)
2017-01-06 14:36:24	Ixrec	exactly
2017-01-06 14:36:25	supercurio	stupid question: do you think it's possible to re-implement any C++ library in Rust or for some today it's still very difficult?
2017-01-06 14:36:36	ubsan	supercurio: any? no
2017-01-06 14:36:43	breeden_	jean377: i mean you kind of have to copy if you want more than one instance going on huh?
2017-01-06 14:36:44	supercurio	I'd like to translate https://github.com/avaneev/r8brain-free-src from C++
2017-01-06 14:36:46	ubsan	supercurio: one example: eigen
2017-01-06 14:37:08	ubsan	anything that doesn't do template metaprogramming trickiness, you should be able to translate
2017-01-06 14:37:15	supercurio	it could be a good exercise to learn by translating from one language to another, and because I want to use this audio resampler in my next project
2017-01-06 14:37:20	Ixrec	we'd need at least const generics, variadic generics, template specialization and CTFE before we can port "any" library
2017-01-06 14:37:26	◥	smartPudding (smartPuddin@moz-8l8ico.fbtk.i511.120b.2a02.IP) has joined #rust-beginners
2017-01-06 14:37:30	Ixrec	oh and procedural macros
2017-01-06 14:37:34	ubsan	Ixrec: well, template specialization is there
2017-01-06 14:37:36	stephaneyfx	ubsan, but do you think rust may reach a state where doing stuff like eigen would become possible?
2017-01-06 14:37:44	Ixrec	ubsan: doesn't count until it's stable!
2017-01-06 14:37:53	ubsan	stephaneyfx: probably within a year or two
2017-01-06 14:37:58	ubsan	imho
2017-01-06 14:38:04	stephaneyfx	ubsan, in stable? :p
2017-01-06 14:38:09	Ixrec	I'm pretty sure making stuff like eigen possible is a goal
2017-01-06 14:38:18	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-06 14:38:19	Ixrec	i.e. the question is when, not if
2017-01-06 14:38:23	ubsan	stephaneyfx: give it the full two
2017-01-06 14:38:39	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 14:38:49	stephaneyfx	ubsan, fine by me. it's still before c++2020 :p
2017-01-06 14:39:04	supercurio	thanks for sharing your estimates :)
2017-01-06 14:39:17	ubsan	note that these are not binding estimates
2017-01-06 14:39:24	ubsan	it may take like, 3 or 4
2017-01-06 14:39:24	stephaneyfx	ubsan, of course
2017-01-06 14:39:32	misdreavus	so who wants to join me in reimplementing taglib so i can make something cooler on top of it? LD
2017-01-06 14:39:32	supercurio	haha ETA?
2017-01-06 14:39:35	misdreavus	:D
2017-01-06 14:39:37	stephaneyfx	just like c++ concepts :p
2017-01-06 14:39:47	Ixrec	it took...5 months for Macros 1.1 to go from approved RFC to stabilization PR merged, so 2 years for any major feature feels optimitic =)
2017-01-06 14:40:17	jean377	breedend_: if it is just copying the reference of the current buffer to the channel that is fine. I just don't want it to copy the entire array content (again, once to receive it)
2017-01-06 14:40:30	ubsan	supercurio: you should definitely be able to write that in rust
2017-01-06 14:40:59	supercurio	so the things to look for before going on a translation are heavy template metaprogramming & generics
2017-01-06 14:41:05	jean377	since it is going to recreate a new array anyway once the loop starts again
2017-01-06 14:41:09	◣	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has quit (Quit: Leaving)
2017-01-06 14:41:12	ubsan	supercurio: type generics you can do
2017-01-06 14:41:23	ubsan	you cannot do const generics tho
2017-01-06 14:41:23	ubsan	or HKT
2017-01-06 14:41:48	supercurio	otherwise translating from "OOP" to "Traits" that part should be okay
2017-01-06 14:42:11	◥	tatref (tatref@moz-h9fk3v.abo.wanadoo.fr) has joined #rust-beginners
2017-01-06 14:42:19	Ixrec	and Rust's generics already have definition type checking, unlike C++
2017-01-06 14:42:34	ubsan	translating from inheritance-oriented to trait oriented is sometimes difficult
2017-01-06 14:42:36	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-06 14:42:37	ubsan	but always possible
2017-01-06 14:42:38	stephaneyfx	Ixrec, i just love that
2017-01-06 14:42:47	breeden_	jean377: i recommend this then https://is.gd/JSUjLa
2017-01-06 14:43:26	breeden_	pretty sure the capacity must be a power of 2, isn't that true?
2017-01-06 14:43:33	◥	blacksmithgu (quassel@moz-n6h.372.49.134.IP) has joined #rust-beginners
2017-01-06 14:43:40	Ixrec	Rust doesn't have any form of "implementation inheritance" yet, right?
2017-01-06 14:43:50	Ixrec	unless you count macro wizardry
2017-01-06 14:44:03	◥	jannick (jannick@moz-eu0lcm.siteimprove.com) has joined #rust-beginners
2017-01-06 14:44:11	breeden_	playbot: let v = Vec::with_capacity(1460); v.capacity()
2017-01-06 14:44:13	⚡	Notice(playbot): error[E0282]: unable to infer enough type information about `_`
2017-01-06 14:44:13	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2hYWO9B)
2017-01-06 14:44:25	breeden_	playbot: let v = Vec::<u8>::with_capacity(1460); v.capacity()
2017-01-06 14:44:27	⚡	Notice(playbot): 1460
2017-01-06 14:44:57	stephaneyfx	implementation inheritance is not something i miss
2017-01-06 14:45:11	stephaneyfx	since i was not using it in c++ anyway
2017-01-06 14:45:18	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 14:45:27	◣	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has quit (Quit: Connection closed for inactivity)
2017-01-06 14:45:27	Ixrec	I certainly don't miss it being conflated with interface inheritance, polymorphism, visibility, etc
2017-01-06 14:45:53	breeden_	playbot: let v = vec![0; 1460]; v.capacity()
2017-01-06 14:45:58	⚡	Notice(playbot): 1460
2017-01-06 14:46:06	supercurio	and have any of you tried Servo's Bindgen which is able to handle C++ and not only C FFI?
2017-01-06 14:46:23	breeden_	playbot: let v = vec![0u8; 1460]; v.push(0); v.capacity()
2017-01-06 14:46:26	⚡	Notice(playbot): error: cannot borrow immutable local variable `v` as mutable
2017-01-06 14:46:26	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2jd5S7f)
2017-01-06 14:46:27	jean377	breeden_: that's what I was after, thanks!
2017-01-06 14:46:27	Ixrec	but there are certain use cases where some limited form of single inheritance of implementation will be necessary for performance reasons
2017-01-06 14:46:32	Ixrec	so I consider that a missing feature
2017-01-06 14:46:34	breeden_	playbot: let mut v = vec![0u8; 1460]; v.push(0); v.capacity()
2017-01-06 14:46:38	⚡	Notice(playbot): 2920
2017-01-06 14:46:39	Ixrec	albeit not one I need
2017-01-06 14:46:57	stephaneyfx	Ixrec, do you have an example in mind?
2017-01-06 14:47:04	◣	cscorley (cscorley@moz-h548l6.VALOLT3.epbfi.com) has quit (Connection closed)
2017-01-06 14:47:07	supercurio	I see it could get handy to use C++ libs directly instead of.. making a C interface for it or .. rewriting to Rust :)
2017-01-06 14:47:11	Ixrec	Servo's DOM is the standard example
2017-01-06 14:47:11	leo_	this is weird. Im using docopt and if I have my flag named as 'flag_c', I can get the int argument passed by a user
2017-01-06 14:47:23	leo_	but with 'flag_n', it doesnt work o_O
2017-01-06 14:47:54	stephaneyfx	Ixrec, thank you. unfortunately i don't know anything about it.
2017-01-06 14:48:25	Ixrec	see https://internals.rust-lang.org/t/summary-of-efficient-inheritance-rfcs/494 for all of the details ever
2017-01-06 14:48:35	stephaneyfx	Ixrec, thank you!
2017-01-06 14:48:39	Ixrec	it's an old thread but I *think* basically nothing has changed since then
2017-01-06 14:49:27	supercurio	Ixrec, cool link thanks
2017-01-06 14:49:35	◣	bjz (bjz@moz-puppgq.tpgi.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 14:50:12	Ixrec	I think https://github.com/rust-lang/rfcs/pull/1546 is the most recent RFC on the subject
2017-01-06 14:50:21	◥	keret (Mibbit@moz-9m4.sgs.232.84.IP) has joined #rust-beginners
2017-01-06 14:50:26	◣	keret (Mibbit@moz-9m4.sgs.232.84.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 14:50:33	Ixrec	which seems like a pretty elegant solution to the bulk of the problem
2017-01-06 14:51:19	◥	staticassert (Mibbit@moz-bb6mst.ma.comcast.net) has joined #rust-beginners
2017-01-06 14:51:52	◥	TechnoCrunch (TechnoCrunc@moz-ant.ip3.100.101.IP) has joined #rust-beginners
2017-01-06 14:51:53	◥	kulshrax (kulshrax@moz-np7940.j0qm.7vpd.010d.2620.IP) has joined #rust-beginners
2017-01-06 14:51:55	supercurio	would such evolution of the language make it as Rust 2.0 (not breaking but adding a lot)?
2017-01-06 14:52:27	durka42	2.0 would be for significant breaking changes
2017-01-06 14:52:32	Ixrec	I don't know of any plans to do a 2.0 at all
2017-01-06 14:52:39	wyvern	Is there a way to have a struct with fields that are public, but not modifiable? In other words, I'd like the equivalent of Java's `public final`.
2017-01-06 14:52:40	Ixrec	we're nowhere near the peak of what Rust 1.0 can achieve
2017-01-06 14:53:04	◥	droo5ki (Mibbit@moz-kemlug.static.wiline.com) has joined #rust-beginners
2017-01-06 14:53:46	◥	mib_qhs1l9 (Mibbit@moz-ml7.b3k.97.177.IP) has joined #rust-beginners
2017-01-06 14:53:48	supercurio	wyvern, does it do that if your field is immutable?
2017-01-06 14:53:50	Ixrec	do you mean a specific instance of that struct that's immutable, or declare a struct type whose fields are always immutable no matter what?
2017-01-06 14:54:01	wyvern	The latter.
2017-01-06 14:54:16	wyvern	So, even if you have a `mut FooStruct`, you can't write to a member of the struct.
2017-01-06 14:54:16	Ixrec	not afaik
2017-01-06 14:54:25	◥	sneaker (thomas@moz-blt.n21.144.213.IP) has joined #rust-beginners
2017-01-06 14:54:35	Ixrec	it's the sort of thing I'm used to doing in traditional OOP languages but in Rust I wonder why I ever wanted it
2017-01-06 14:54:38	wyvern	I basically want an immutable snapshot that people can't modify (to protect them from themselves)
2017-01-06 14:54:47	Ixrec	because mutability is totally orthogonal to *type* definition
2017-01-06 14:55:17	Ixrec	the snapshot should be immutable, but there's no reason the snapshot type can't be used somewhere else mutably
2017-01-06 14:55:42	wyvern	The reason is that I, the author, want to communicate to consumers how the type should be used -- namely, immutably...
2017-01-06 14:55:45	Ixrec	presumably you'd just have a method that returns a shared/immutable reference to this thing
2017-01-06 14:56:06	◥	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has joined #rust-beginners
2017-01-06 14:56:36	supercurio	Ixrec, ah so the idea is that you'd interact with an API but not a "struct"
2017-01-06 14:56:38	stephaneyfx	wyvern, or you could make all members private and provide accessor functions
2017-01-06 14:56:46	Ixrec	supercurio: that's how I'd do it in Rust, yeah
2017-01-06 14:57:02	wyvern	yes that's what I'm doing. It's just a lot of boring typing.
2017-01-06 14:57:06	Ixrec	it's just like how in traditional OOP languages, how you define a type often forces static or dynamic dispatch of its methods on *all* users of that type
2017-01-06 14:57:09	◣	mib_qhs1l9 (Mibbit@moz-ml7.b3k.97.177.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 14:57:25	Ixrec	while in Rust you get to choose between static or dynamic dispatch, the type almost never forces it on you
2017-01-06 14:57:28	◣	droo5ki (Mibbit@moz-kemlug.static.wiline.com) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 14:57:48	◥	sebasmagri (user@moz-ohu.o17.146.189.IP) has joined #rust-beginners
2017-01-06 14:58:39	stephaneyfx	even in c++, making members const causes some trouble
2017-01-06 14:58:57	Ixrec	if "the whole struct" is meant to be immutable I'd prefer a method returning a shared ref to it rather than typing out a bunch of accessors so you can return the struct by value
2017-01-06 14:59:09	Ixrec	maybe we need more context
2017-01-06 14:59:17	◣	k4rtik (k4rtik@moz-lf4.n1l.148.128.IP) has quit (Quit: Leaving)
2017-01-06 14:59:30	◣	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has quit (Connection closed)
2017-01-06 14:59:58	wyvern	I'm iterating across a complex data structure, and the value emitted at each point in the iteration is a snapshot of a bunch of different stuff about the current position.
2017-01-06 15:00:08	◣	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has quit (Ping timeout: 121 seconds)
2017-01-06 15:00:10	wyvern	There isn't a plausible reason to take one of these snapshots and change anything about it.
2017-01-06 15:00:19	◥	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has joined #rust-beginners
2017-01-06 15:01:14	◥	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has joined #rust-beginners
2017-01-06 15:01:30	Ixrec	the iteration could emit immutable values, right?
2017-01-06 15:01:48	stephaneyfx	i'd argue that if these snapshots are pure data (no link to outside data), then keep the fields public and just return it by value. if the client code wants to modify it, they can, even if it does not make much sense to do so.
2017-01-06 15:02:28	wyvern	That's what I'm doing now, but you can see why I want to have basically `public final`...
2017-01-06 15:02:29	Ixrec	if emitting immutable values/shared refs is infeasible for some reason, then what stephaneyfx said
2017-01-06 15:02:35	◥	degausser (Thunderbird@moz-midec3.dyn.plus.net) has joined #rust-beginners
2017-01-06 15:02:42	wyvern	Ixrec: what do you mean by immutable values
2017-01-06 15:03:21	◥	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has joined #rust-beginners
2017-01-06 15:03:24	Ixrec	actually I guess even if you did return a shared ref, the user could .clone() it and get a value object to play with
2017-01-06 15:03:35	◥	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has joined #rust-beginners
2017-01-06 15:03:49	◣	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has quit (Connection closed)
2017-01-06 15:04:16	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-06 15:04:35	stephaneyfx	wyvern, i'm not sure why you want that, if your type is self-contained and does not refer to outside data. this could even prevent efficient code. consider that your snapshot contains strings and other structs, then it would be nice for the user to be allowed to steal these strings and structs from the snapshot for other uses.
2017-01-06 15:04:37	◣	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 15:04:50	wyvern	Nope, just a bunch of ints.
2017-01-06 15:05:14	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-06 15:05:15	Ixrec	yeah, I think the Rustic thing to do is not try to restrain the user
2017-01-06 15:05:25	wyvern	(if we were allocating, then yeah totally I'd want to make it steal-able)
2017-01-06 15:05:50	stephaneyfx	wyvern, but is it really worth it trying to prevent user code from changing one of these ints?
2017-01-06 15:06:03	stephaneyfx	if they do, they must have a reason
2017-01-06 15:06:09	Ixrec	traditional OOP languages provide loads of ways to impose restrictions on other people's code at a distance, partially because traditional OOP inheritance encourages tight coupling so your code wouldn't work if you couldn't restrict everyone else
2017-01-06 15:06:23	◣	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has quit (Ping timeout: 121 seconds)
2017-01-06 15:06:41	Ixrec	it's simply not as useful in this case; as long as the user doing something silly with your snapshot struct won't break your code in any way, its fine
2017-01-06 15:06:53	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 15:07:01	wyvern	Yeah, it won't break my code, but I don't want the user to trip over their own feet.
2017-01-06 15:07:26	stephaneyfx	maybe user code wants to simulate data corruption and intentionally modifies one of the fields to test how snapshot comparion, validation or whatever functionality you offer behaves.
2017-01-06 15:07:28	◥	bjz (bjz@moz-puppgq.tpgi.com.au) has joined #rust-beginners
2017-01-06 15:07:33	supercurio	wyvern, do you think documentation for this data could be sufficient in that case?
2017-01-06 15:07:39	Ixrec	as long as the API you're exposing doesn't make people think that modifying snapshots is a sensible thing to do, I don't see a problem
2017-01-06 15:07:42	stephaneyfx	comparison*
2017-01-06 15:07:49	Ixrec	we probably need to see your API to say much more
2017-01-06 15:08:00	◣	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has quit (Client exited)
2017-01-06 15:08:09	wyvern	*sigh* it's certainly possible to document it. I just don't want to have to document it.
2017-01-06 15:08:28	Ixrec	I'm not even seeing why it needs documentation
2017-01-06 15:08:36	stephaneyfx	Ixrec, same
2017-01-06 15:08:41	supercurio	wyvern, ah you'd like the code itself to tell the story: can't change that
2017-01-06 15:09:07	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-06 15:09:11	wyvern	just like enums are a good way to say "you can only use these things" rather than having a number that could possibly be mis-used: I want the language to help me communicate with the user.
2017-01-06 15:09:22	◣	junqed (junqed@moz-egr.l1h.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-06 15:10:02	Ixrec	tbh, just being called "Snapshot" is a pretty strong indication
2017-01-06 15:10:12	◣	Akien (akien@moz-o58v80.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2017-01-06 15:10:22	supercurio	wyvern, is your case very different from if you were sharing data in JSON with something external? (Since JSON doesn't have any concept of read-only)
2017-01-06 15:10:54	◣	cjhowe (textual@moz-aomlp1.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 15:10:55	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-06 15:10:58	◣	jbradberry (jrb@moz-mrjdh9.rlghnc.sbcglobal.net) has quit (Ping timeout: 121 seconds)
2017-01-06 15:11:07	◥	alx741_ (alx741@moz-nbe.qnp.152.190.IP) has joined #rust-beginners
2017-01-06 15:11:30	wyvern	certainly conceptually you could get the job done by assembling a json string and emitting that.
2017-01-06 15:11:40	◣	mcasa_ (mcasa@moz-2fn4cv.res.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-06 15:11:54	wyvern	However, "we can't have nice things crossing service boundaries" is not a reason for me to be thrilled that I can't express things inside the same process. :/
2017-01-06 15:12:33	Ixrec	that sentence didn't make any sense to me; could you expand on that?
2017-01-06 15:12:56	wyvern	I'm assuming that where that was going was "well, you can't enforce json is treated as read only when you send it over HTTP"
2017-01-06 15:13:06	◣	smartPudding (smartPuddin@moz-8l8ico.fbtk.i511.120b.2a02.IP) has quit (Quit: Leaving...)
2017-01-06 15:13:18	supercurio	wyvern, (beginner so I don't know if it makes sense): could you however share a structure which contains two sub-structures: one is mutable and the other is not
2017-01-06 15:13:24	◥	sprog (Mibbit@moz-c1r0vt.bredband.comhem.se) has joined #rust-beginners
2017-01-06 15:13:33	wyvern	anyway I'm just grumbling at this point since clearly rust doesn't have the particular gadget I want
2017-01-06 15:13:39	◣	alx741 (alx741@moz-frc.hcj.112.181.IP) has quit (Ping timeout: 121 seconds)
2017-01-06 15:13:42	wyvern	supercurio: in this case I want never mutable, ever, even if you have a `mut` binding of it
2017-01-06 15:14:00	Ixrec	yeah I'd still like to see what your API is so I can see if there's any real need for this feature
2017-01-06 15:14:38	wyvern	there isn't a need in that "this will let me avoid having my code crash". There is a need in that I want to put up some guardrails for consumers.
2017-01-06 15:14:56	wyvern	You can see the code in question here: https://github.com/jonhoo/hdrsample/pull/5
2017-01-06 15:14:58	Ixrec	I still think that this sort of feature is only important in languages with more type hierarchies and superclasses needing to be able to assume things about what subclasses can and can't do
2017-01-06 15:15:17	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-06 15:15:29	wyvern	Given that the Rust designers seem to share your opinion, it seems I can't have what I want. ;)
2017-01-06 15:15:34	wyvern	I happen to disagree, but everyone has an opinion
2017-01-06 15:16:43	sprog	Hi guys, where's the intro tutorial to rust? I just installed it on my macbook. :)
2017-01-06 15:17:01	Ixrec	you mean https://doc.rust-lang.org/book/ ?
2017-01-06 15:17:41	@mbrubeck	wyvern: https://is.gd/0ap2N3
2017-01-06 15:18:19	supercurio	wyvern, thanks for sharing the code: I understand your question follows jonhoo mention that he prefer if they were not "pub"
2017-01-06 15:18:33	wyvern	mbrubeck: Nifty, but wouldn't I need to wrap each member of my snapshot struct in Immutable?
2017-01-06 15:18:36	pingveno	mbrubeck: Or implement Deref?
2017-01-06 15:18:38	Ixrec	mbrubeck: note that doesn't stop anyone from assigning Immutable::new(10) on the next line
2017-01-06 15:18:45	wyvern	supercurio: I would also prefer if they were not pub. :)
2017-01-06 15:18:49	sprog	Ixrec: that's the one, thanks
2017-01-06 15:19:01	Ixrec	which is of course silly, but it's pretty much exactly as silly as what wyvern's trying to prevent
2017-01-06 15:19:18	@mbrubeck	wyvern: Yeah, Deref works pretty well for struct types. https://is.gd/PoDaJa
2017-01-06 15:19:32	◣	cyphase (cyphase@moz-ijahrb.ca.comcast.net) has quit (Quit: cyphase.com)
2017-01-06 15:19:35	◥	mib_l8mh4f (Mibbit@moz-4ga.5fm.66.182.IP) has joined #rust-beginners
2017-01-06 15:20:18	◥	NeverDie (NeverDie@moz-crtjcd.fios.verizon.net) has joined #rust-beginners
2017-01-06 15:20:24	◣	davs (davs@moz-gljmd0.178-41-245.t-com.sk) has quit (Ping timeout: 121 seconds)
2017-01-06 15:20:27	wyvern	So that would be `struct Foo { bar: Immutable<u64>, baz: Immutable<u64> }`?
2017-01-06 15:20:39	breeden_	wyvern: impl a trait that returns a constant?
2017-01-06 15:20:51	@mbrubeck	wyvern: No, I'd just return an Immutable<Foo>
2017-01-06 15:21:06	Ixrec	maybe called it "Final" for brevity?
2017-01-06 15:22:01	wyvern	mbrubeck: I see. So the fact that you can only get a (non-mut) ref is what does the trick.
2017-01-06 15:22:09	breeden_	oh Immutable struct idea is better
2017-01-06 15:22:13	@mbrubeck	yes, and that the contents are private
2017-01-06 15:22:29	◣	sprog (Mibbit@moz-c1r0vt.bredband.comhem.se) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 15:22:37	wyvern	well, the contents would have to be pub so that users can see them... 
2017-01-06 15:22:47	wyvern	Otherwise I'd need pub methods, and if I had that, I wouldn't need Immutable
2017-01-06 15:22:48	breeden_	mbrubeck: but given a struct I can still mem::swap
2017-01-06 15:23:07	@mbrubeck	wyvern: No, you can still use .get() or .deref() to get read-only access to the contents 
2017-01-06 15:23:16	@mbrubeck	and methods
2017-01-06 15:23:19	◣	mib_l8mh4f (Mibbit@moz-4ga.5fm.66.182.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-06 15:24:21	breeden_	wyvern: just curious what are you  going to use this for?
2017-01-06 15:24:28	wyvern	breeden_: scroll up. :)
2017-01-06 15:24:42	breeden_	i tried, i'll try again :)
2017-01-06 15:24:47	Ixrec	I'm not actually sure those wrappers accomplish anything: https://is.gd/UY8jmq
2017-01-06 15:25:08	wyvern	short version: I want the equivalent of a "public final" field to give the user a hint of "this is read only, don't bother trying to write to it"
2017-01-06 15:25:36	wyvern	I *can* just return a struct by value and let them apply the foot-gun, but I'd prefer to help them not do that. Hence this exploration of how to achieve that without too many histrionics.
2017-01-06 15:26:37	@mbrubeck	wyvern: longer example: https://is.gd/zzDNHD
2017-01-06 15:27:28	@mbrubeck	wyvern: Ah yeah, if you want some fields "final" and some not, then you'd wrap only the "final" fields in Immutable<T> (or Final<T> if you prefer)
2017-01-06 15:27:47	@mbrubeck	If the whole struct is "final" then you can just pass around a Final<MyStruct>
2017-01-06 15:28:07	supercurio	Neat
2017-01-06 15:28:29	wyvern	TIL!
2017-01-06 15:30:01	@mbrubeck	version with `Immutable` renamed to `Final` https://is.gd/gaqebz
2017-01-06 15:30:09	@mbrubeck	unfortunately lowecase `final` is a reserved keyword
2017-01-06 15:30:30	Ixrec	doesn't wrapping just the files still make it possible to change the fields? you'd be replacing a Final with another Final but it's still mutating
2017-01-06 15:30:36	◥	ghisvail__ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-06 15:30:37	pingveno	https://is.gd/elNX3k
2017-01-06 15:30:46	Ixrec	but this does seem to work pretty well when the whole struct is meant to be immutable
2017-01-06 15:30:56	breeden_	oh so by not implementing DerefMut you can't call `.reset`
2017-01-06 15:30:59	breeden_	neat
2017-01-06 15:31:14	Ixrec	pingveno's link is exactly what I was thinking
2017-01-06 15:31:57	@mbrubeck	You could also have the Final constructor be private to code outside your library...
2017-01-06 15:31:57	wyvern	fortunately at least in this case I can just wrap the whole struct
2017-01-06 15:32:05	@mbrubeck	which would defeat pingveno's thing
2017-01-06 15:32:13	Ixrec	ah
2017-01-06 15:32:26	@mbrubeck	though you could still `std::mem::swap` two Final values... :)
2017-01-06 15:32:44	◣	oln (smuxi@moz-h6kap0.customer.cdi.no) has quit (Connection closed)
2017-01-06 15:32:44	supercurio	this could become a Crate, I'm sure wyvern will not be the only one trying do do that :)
2017-01-06 15:33:18	◣	matricks (kma@moz-35v5sq.bredband.comhem.se) has quit (Ping timeout: 121 seconds)
2017-01-06 15:34:23	pingveno	Yeah, doing it properly is just large enough for a crate.
2017-01-06 15:35:45	stephaneyfx	i still don't get it. with the version that wraps the whole Foo struct in Final, user code is still free to create instances of Foo and modify them to their heart's desire. sure they can't modify the one instance that we returned, but is it worth the trouble?
2017-01-06 15:36:03	breeden_	stephaneyfx: the magic is in the Deref implementation
2017-01-09 09:16:07	⚡	irc: disconnected from server
2017-01-09 09:16:21	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-09 09:16:21	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-09 09:16:21	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-09 09:16:21	⚡	Channel #rust-beginners: 659 nicks (4 ops, 0 halfops, 0 voices, 655 normals)
2017-01-09 09:16:25	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-09 09:17:31	NfNitLoop	misdreavus: but I think I heard someone say that the crate DL counts get incremented every time some automated system builds all crates. 
2017-01-09 09:17:44	misdreavus	yeah, crater (that system) will inflate that count some
2017-01-09 09:18:47	◥	nom (Nabeel@moz-3st.87j.180.59.IP) has joined #rust-beginners
2017-01-09 09:19:13	◣	SiIky (SiIky@moz-dbrsl2.5ghr.hl2k.08a0.2001.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 09:19:18	◥	julen (julen@moz-nogeq6.ef1p.6otn.aa16.2a02.IP) has joined #rust-beginners
2017-01-09 09:19:24	◣	Yurume (yurume@moz-0n38n2.compute.amazonaws.com) has quit (Ping timeout: 121 seconds)
2017-01-09 09:19:38	◥	niconii (nicole@moz-ic1aou.midco.net) has joined #rust-beginners
2017-01-09 09:19:38	⚡	Mode #rust-beginners [+o niconii] by ChanServ
2017-01-09 09:19:47	◥	stephanbuys (Adium@moz-sam0om.telkomadsl.co.za) has joined #rust-beginners
2017-01-09 09:20:28	◥	Yurume (yurume@moz-0n38n2.compute.amazonaws.com) has joined #rust-beginners
2017-01-09 09:20:52	◥	tel (tel@moz-vd9.ulq.207.104.IP) has joined #rust-beginners
2017-01-09 09:21:43	◥	cubercaleb (Mibbit@moz-7suuq5.fios.verizon.net) has joined #rust-beginners
2017-01-09 09:21:50	◣	cubercaleb (Mibbit@moz-7suuq5.fios.verizon.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 09:22:08	◥	philn (Mibbit@moz-b0kbt8.kn-info.de) has joined #rust-beginners
2017-01-09 09:23:43	◣	philn (Mibbit@moz-b0kbt8.kn-info.de) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 09:25:09	◥	Beefki (phobia@moz-t3l42c.il.comcast.net) has joined #rust-beginners
2017-01-09 09:27:58	◥	mib_oyoqbg (Mibbit@moz-si6.c2b.244.87.IP) has joined #rust-beginners
2017-01-09 09:28:02	◥	rkuska (rkuska@moz-c9b.85h.82.95.IP) has joined #rust-beginners
2017-01-09 09:28:14	◣	mib_oyoqbg (Mibbit@moz-si6.c2b.244.87.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 09:28:16	◣	deciduously (ben@moz-airl7o.lc8q.lne8.2000.2604.IP) has quit (Quit: WeeChat 1.6)
2017-01-09 09:29:57	◥	steve (steve@moz-1op8i8.gps.caltech.edu) has joined #rust-beginners
2017-01-09 09:30:19	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2017-01-09 09:30:50	◥	ray (Mibbit@moz-7suuq5.fios.verizon.net) has joined #rust-beginners
2017-01-09 09:31:24	ray	hey, i am not sure if this belongs in internals, but can someone explain this to me: https://doc.rust-lang.org/src/collections/up/src/libcollections/vec.rs.html#1475
2017-01-09 09:31:25	◣	j0nthn (jonathan@moz-pfmh44.rev.sfr.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-09 09:31:27	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-09 09:31:55	ray	i noticed that this function is returning a &[T], which is odd, because it is returning the slice by value in the code, not by reference
2017-01-09 09:32:11	◣	rkuska (rkuska@moz-c9b.85h.82.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 09:32:31	ray	the lifetime of the slice that is made is limited to the function, so why does returning a reference to it work?
2017-01-09 09:33:12	breeden_	slice::from_raw_parts returns a &[T]
2017-01-09 09:33:15	pingveno	ray: There are a couple of lifetimes that you're thinking of.
2017-01-09 09:33:37	ray	yeah, the function sig says it returns an &[T]
2017-01-09 09:33:47	◣	liquidnight (Mibbit@moz-l9h116.dyn.telefonica.de) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 09:33:48	◥	foser (foser@moz-vchu7j.dynamic.ziggo.nl) has joined #rust-beginners
2017-01-09 09:33:48	ray	but the code clearly returns a slice by value
2017-01-09 09:34:12	pingveno	Imagine the function to instead be: fn deref<'a>(&'a self) -> &'a [T]
2017-01-09 09:34:12	breeden_	ray: from_raw_parts returns a &[T]
2017-01-09 09:34:26	◥	cjhowe (textual@moz-aomlp1.hr.cox.net) has joined #rust-beginners
2017-01-09 09:35:06	misdreavus	from_raw_parts will invent a lifetime to match whatever it's being assigned to
2017-01-09 09:35:06	◥	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has joined #rust-beginners
2017-01-09 09:35:30	ray	right, so compiler magic?
2017-01-09 09:35:37	misdreavus	unsafe magic, more like
2017-01-09 09:35:43	◥	ot (ot@moz-gmtpic.cpe.webspeed.dk) has joined #rust-beginners
2017-01-09 09:35:52	ray	so... unsafe? or unsafe + compiler magic?
2017-01-09 09:36:09	◥	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-09 09:36:11	misdreavus	compiler magic that is generally available for unsafe code
2017-01-09 09:36:28	ray	so what does it tie the lifetime to?
2017-01-09 09:36:33	ray	self?
2017-01-09 09:36:35	misdreavus	whatever it's getting matched to
2017-01-09 09:36:39	breeden_	ray: i believe it's that fact that the deref method associates the 'self lifetime with the output &[T], it's find if what you are returning is &'static or not, as the restriction of associate the 'self lifetime with the output will put the futher restriction of 'self and 'static
2017-01-09 09:36:47	◥	voider1 (voider1@moz-cnrpdc.dynamic.ziggo.nl) has joined #rust-beginners
2017-01-09 09:36:49	breeden_	it's fine*
2017-01-09 09:36:58	misdreavus	in this case, i'd assume it's the &self getting passed to deref()
2017-01-09 09:37:26	misdreavus	the fabrication of the lifetime is part of why it's unsafe
2017-01-09 09:37:36	ray	right
2017-01-09 09:37:46	breeden_	let's test something
2017-01-09 09:37:49	ray	so what about slice::from_raw_parts
2017-01-09 09:37:50	◥	mib_gwhfvd (Mibbit@moz-fc4lrf.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-09 09:37:57	breeden_	see if you can write the same function but just add 'static as the output
2017-01-09 09:38:01	ray	since that returns a reference to a slice
2017-01-09 09:38:02	misdreavus	(the other part is that the memory region being referenced might not be the right kind of data)
2017-01-09 09:38:15	breeden_	(which i think you can)
2017-01-09 09:38:16	ray	regardless of the lifetime, does it have to fabricate the '&' too?
2017-01-09 09:38:16	stephaneyfx	ray, it's all explained in the "caveat" section: https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html
2017-01-09 09:38:26	◣	mib_gwhfvd (Mibbit@moz-fc4lrf.hfc.comcastbusiness.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 09:38:30	breeden_	ray: the from_raw_parts returns a & 
2017-01-09 09:38:39	◣	zeenix (zeenix@moz-oil.8nu.218.83.IP) has quit (Quit: Leaving)
2017-01-09 09:38:40	breeden_	heh, I mean, i dont know what you mean by fabricate &
2017-01-09 09:38:40	◥	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has joined #rust-beginners
2017-01-09 09:38:48	misdreavus	yes, sort of
2017-01-09 09:38:52	stephaneyfx	ray, and there's more material there to understand how it works: https://doc.rust-lang.org/nomicon/unbounded-lifetimes.html
2017-01-09 09:38:56	misdreavus	since it's getting a pointer anyway, that's what the & is made from
2017-01-09 09:39:05	ray	well, i slice has to be created at some point
2017-01-09 09:39:23	ray	and that means there has to just be a [T], which means that someone 'owns' the slice
2017-01-09 09:39:28	ray	but this is a &[T]
2017-01-09 09:39:36	breeden_	ray: a slice [T] is a region of memory, a &[T] is a fat pointer to that region.  This method is creating the fat pointer.
2017-01-09 09:39:45	ray	so how do you create a reference to a thing that does not exist?
2017-01-09 09:40:20	stephaneyfx	ray, it does exist, within the Vec
2017-01-09 09:40:24	breeden_	ray: a Vec carries 3 things: pointer to [T], the number of elements in the vector, and the capacity of memory allocated
2017-01-09 09:40:25	◥	dionysus70 (Thunderbird@moz-f3r.u5k.134.178.IP) has joined #rust-beginners
2017-01-09 09:40:27	misdreavus	the function assumes it exists and returns a pointer to that region, wrapped up in the lifetime semantics of whatever it's getting bound to
2017-01-09 09:40:34	ray	right, but they are using from parts
2017-01-09 09:40:39	breeden_	ray: a slice consists of two things: pointer to [T], and the number of elements in the vector
2017-01-09 09:40:46	◣	dionysus69 (Thunderbird@moz-f3r.u5k.134.178.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 09:40:47	⚡	dionysus70 is now known as dionysus69
2017-01-09 09:40:47	ray	presumably, slice::from_raw_parts knows nothing about Vec
2017-01-09 09:40:55	misdreavus	correct
2017-01-09 09:41:04	stephaneyfx	ray, but it takes the pointer pointing to the T's
2017-01-09 09:41:12	misdreavus	all it knows is memory
2017-01-09 09:41:30	◥	pounce (pounce@moz-3jv.ip9.197.140.IP) has joined #rust-beginners
2017-01-09 09:42:03	◥	Altazimuth (Altazimuth@moz-muooe6.skybroadband.com) has joined #rust-beginners
2017-01-09 09:42:17	ray	i was under the impression that &[T] was a reference to a [T], not a fat pointer
2017-01-09 09:42:39	breeden_	&[T] needs to know it's length
2017-01-09 09:42:40	misdreavus	certain references are "fat pointers" because they semantically refer to more than just a location in memory
2017-01-09 09:42:41	ray	so i guess that makes sense now
2017-01-09 09:42:46	breeden_	its*
2017-01-09 09:42:49	◣	pounce (pounce@moz-3jv.ip9.197.140.IP) has quit (Quit: WeeChat 1.6)
2017-01-09 09:42:56	misdreavus	&[T], &str, and trait objects are like that
2017-01-09 09:43:30	ray	right, when i see '&' my first thought is a single pointer referencing one thing
2017-01-09 09:43:46	breeden_	yeah, i did too for awhile
2017-01-09 09:43:47	misdreavus	a &[T], semantically, is a pointer and a length - a [T] without a reference, semantically, is the actual region of memory is question
2017-01-09 09:44:19	misdreavus	that's how slice-index access can panic on bounds checking
2017-01-09 09:44:27	ray	right, so i guess these things are special to the compiler/language then? or is there some cool way of making fat pointers in the language for other types?
2017-01-09 09:44:51	misdreavus	what do you mean?
2017-01-09 09:45:00	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Connection closed)
2017-01-09 09:45:00	◥	eibwen (eibwen@moz-6smn86.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-09 09:45:05	ray	it's a pretty simple question
2017-01-09 09:45:20	◥	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has joined #rust-beginners
2017-01-09 09:45:25	Sergio_	Lol
2017-01-09 09:45:28	Sergio_	No, Ray
2017-01-09 09:45:30	breeden_	i dont think you can make &T into a fat pointer except for those intrinsic from rust
2017-01-09 09:45:47	misdreavus	only certain kinds of references can be fat pointers
2017-01-09 09:45:53	breeden_	ray: really &[T] is the only exception.  It's just that Vec derefs to taht
2017-01-09 09:46:01	breeden_	well &str
2017-01-09 09:46:08	@niconii	there's a few slice types in std
2017-01-09 09:46:10	misdreavus	&Trait is a fat pointer in a different way
2017-01-09 09:46:13	breeden_	and trait objects maybe? a few others
2017-01-09 09:46:16	◥	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has joined #rust-beginners
2017-01-09 09:46:19	@niconii	e.g. &Path, &OsStr
2017-01-09 09:46:27	◣	cjhowe (textual@moz-aomlp1.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-09 09:46:27	@niconii	which are also (ptr, len)
2017-01-09 09:46:27	ray	right, well thanks for the help!
2017-01-09 09:46:36	◥	ivesen (ivesen@moz-f6la1q.stayon.no) has joined #rust-beginners
2017-01-09 09:46:44	breeden_	niconii: hm, really... those don't just deref to &[T] or a different intrinsic?
2017-01-09 09:47:05	Sergio_	They're just strs
2017-01-09 09:47:16	Sergio_	So &Estrada
2017-01-09 09:47:20	Sergio_	Lol.
2017-01-09 09:47:43	Sergio_	&str
2017-01-09 09:47:44	◥	beedaddy (martin@moz-hpb4dv.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-09 09:47:44	ubsan	I know someone who's hungry :P
2017-01-09 09:47:50	@niconii	not exactly strs, they can contain non-utf8
2017-01-09 09:47:55	ubsan	wait
2017-01-09 09:48:00	ubsan	estrada is not strada
2017-01-09 09:48:14	ubsan	dang :(
2017-01-09 09:48:37	@niconii	i think they are built on top of [T] in one way or another though; since it's possible to have a struct where the last item is unsized, i assume that also makes pointers to them fat pointers
2017-01-09 09:48:45	◥	ghisvail___ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-09 09:49:14	ubsan	niconii: this is correct
2017-01-09 09:49:21	◣	nomad (Thunderbird@moz-8tcq9m.bigpond.net.au) has quit (Ping timeout: 121 seconds)
2017-01-09 09:49:37	◣	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 09:50:36	◥	Ramsundhar (Mutter@moz-7g1.3k0.95.59.IP) has joined #rust-beginners
2017-01-09 09:50:40	misdreavus	yeah, CStr is a [c_char] internally, looks like
2017-01-09 09:51:06	◥	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-09 09:51:24	◣	ghishadow_______________ (ghishadow@moz-ibe.9ib.69.103.IP) has quit (Client exited)
2017-01-09 09:51:32	◥	cornstalks (cornstalks@moz-6vu1bf.ca.comcast.net) has joined #rust-beginners
2017-01-09 09:51:37	misdreavus	OsStr defers to a platform-specific Slice type, but i bet those are similarly built
2017-01-09 09:51:40	◣	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has quit (Client exited)
2017-01-09 09:51:45	◥	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-09 09:51:47	misdreavus	(and Path defers to OsStr)
2017-01-09 09:51:52	◥	crodjer_ (crodjer@moz-4ec.681.143.114.IP) has joined #rust-beginners
2017-01-09 09:52:55	◥	Juan_Francisco (chatzilla@moz-fm5u8e.dynamicip.rima-tde.net) has joined #rust-beginners
2017-01-09 09:53:01	breeden_	so the excpetions are &[T], &Trait, &StructWithDST (last two are the same?)...
2017-01-09 09:53:24	◣	Ramsundhar (Mutter@moz-7g1.3k0.95.59.IP) has quit (Quit: Mutter: www.mutterirc.com)
2017-01-09 09:53:28	misdreavus	i'd wrap 1 and 3 and leave &Trait as the odd-one-out
2017-01-09 09:53:33	@niconii	well, DSTs in general have fat pointers
2017-01-09 09:53:38	ray	StructWithDST?
2017-01-09 09:53:48	◥	ngc0202 (ngc0202@moz-9jvocq.ny.comcast.net) has joined #rust-beginners
2017-01-09 09:53:56	◥	ttdonovan (ttdonovan@moz-l04.bae.185.208.IP) has joined #rust-beginners
2017-01-09 09:54:10	◣	crodjer (crodjer@moz-c8l.4bv.143.114.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 09:54:17	@niconii	ray: "DST" == "unsized type"; it's possible to have a struct where the last parameter is a DST, e.g. struct Foo { x: i32, y: i32, z: [i32] }
2017-01-09 09:54:18	misdreavus	you can put a "dynamically sized type" as the last field in a struct and make the struct itself "dynamically sized", like slices are
2017-01-09 09:54:19	breeden_	meh, i'm just going to say "when rustc feels like it, any other questions?"
2017-01-09 09:54:23	◣	foser (foser@moz-vchu7j.dynamic.ziggo.nl) has quit (Client exited)
2017-01-09 09:54:59	@niconii	only problem is that they're a pain to construct
2017-01-09 09:55:33	ray	how do you construct them
2017-01-09 09:55:46	ubsan	usually pointer casts
2017-01-09 09:55:49	ubsan	and unsafety
2017-01-09 09:55:50	ray	c/++ they are an extension
2017-01-09 09:56:00	breeden_	you can't just * a &[T] in that field?
2017-01-09 09:56:01	ubsan	no they aren't
2017-01-09 09:56:07	@niconii	the only way to do it in safe code is to have something like `struct Foo<T: ?Sized> { x: i32, y: i32, z: [i32] }`, construct a Foo<[T; N]>, then coerce to Foo<[T]>
2017-01-09 09:56:08	ray	yeah, they are
2017-01-09 09:56:14	ubsan	they're in the standard
2017-01-09 09:56:16	@niconii	but that doesn't work with str or trait objects, just [T]
2017-01-09 09:56:20	ray	struct { int x, int arr[0]; } // extension
2017-01-09 09:56:34	ray	that is not in the standard
2017-01-09 09:56:40	ubsan	struct { int x; int arr[]; }; // standard
2017-01-09 09:56:42	ubsan	yes
2017-01-09 09:56:46	ubsan	it's in the C99 standard
2017-01-09 09:56:57	ray	no one supports the c99 standard
2017-01-09 09:57:22	ray	all c++ cmpilers support c89 but few support c99 entirely, if at all
2017-01-09 09:57:37	ubsan	... you're... wrong?
2017-01-09 09:57:37	ray	especially msvc
2017-01-09 09:57:41	ubsan	I'm not sure how else to say that
2017-01-09 09:57:45	ray	no, you ae
2017-01-09 09:57:47	◥	handyman (handyman@moz-i2qk6r.subp.5lka.0645.2601.IP) has joined #rust-beginners
2017-01-09 09:57:48	◥	chamar (chamar@moz-fbvvki.mc.videotron.ca) has joined #rust-beginners
2017-01-09 09:57:52	ray	are*
2017-01-09 09:58:01	ubsan	msvc, gcc, clang, icc, all support that
2017-01-09 09:58:10	ubsan	and three of them support c11
2017-01-09 09:58:13	ray	right, as an extension to C++
2017-01-09 09:58:28	ray	it's not part of the c++ spec, it's part of the c99 spec
2017-01-09 09:59:04	ubsan	well... they also may support it as an extension to c++
2017-01-09 09:59:11	pingveno	GCC has a status page: https://gcc.gnu.org/c99status.html
2017-01-09 10:00:09	ray	yes, that is exactly what i said, as an extension to C++
2017-01-09 10:00:09	ray	but it's not a core c++ feature
2017-01-09 10:00:09	ag_dubs	has anyone else had issues with nightly-0.17
2017-01-09 10:00:09	breeden_	cargo?
2017-01-09 10:00:09	ubsan	https://gcc.gnu.org/wiki/C11Status
2017-01-09 10:00:09	ag_dubs	in particular with tokio/hyper/serde
2017-01-09 10:00:09	ubsan	even
2017-01-09 10:00:09	ray	i also don't really care about gcc, since i have to deal with msvc on a daily basis
2017-01-09 10:00:10	@niconii	ag_dubs: could you be more specific? which date?
2017-01-09 10:00:15	breeden_	oh you mean nightly-1.17?
2017-01-09 10:01:23	ubsan	well
2017-01-09 10:01:23	@niconii	also i'd rather not have offtopic arguments here please
2017-01-09 10:01:23	ubsan	anyways
2017-01-09 10:01:23	ag_dubs	yes! 
2017-01-09 10:01:23	ubsan	you do what you do in C to do that
2017-01-09 10:01:23	ag_dubs	https://www.irccloud.com/pastebin/hiCnAjtY/
2017-01-09 10:01:23	ag_dubs	ugh, never mind my local is the same as travis
2017-01-09 10:01:23	ag_dubs	i have something passing locally but not on travis
2017-01-09 10:02:04	◥	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has joined #rust-beginners
2017-01-09 10:02:04	◣	ray (Mibbit@moz-7suuq5.fios.verizon.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 10:02:07	ag_dubs	sorry, lemme look into this more, i'm a dingdong, it's a hyper change and i'm working off a git branch
2017-01-09 10:02:11	◣	nom (Nabeel@moz-3st.87j.180.59.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:02:15	ag_dubs	pretend i said nothing
2017-01-09 10:02:23	◥	ray (Mibbit@moz-7suuq5.fios.verizon.net) has joined #rust-beginners
2017-01-09 10:02:27	pingveno	ag_dubs: Branches are hard. :(
2017-01-09 10:02:50	◥	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has joined #rust-beginners
2017-01-09 10:02:51	ray	i would like to point out that gcc does not dictate the c++ standard
2017-01-09 10:03:21	ag_dubs	git dependency is what i meant
2017-01-09 10:03:23	◥	rkuska (rkuska@moz-c9b.85h.82.95.IP) has joined #rust-beginners
2017-01-09 10:03:34	breeden_	ray: it's all good. we all only care about rust anyway :)
2017-01-09 10:03:41	ray	right
2017-01-09 10:04:06	◥	Ayey_ (rune@moz-neh8gs.rev.stofanet.dk) has joined #rust-beginners
2017-01-09 10:06:31	ray	another question, at what point will the rust ecosystem be fully developed on windows?
2017-01-09 10:06:59	ray	and by that, i mean when will they get around to properly outputing pdb's that can be properly debugged in vs?
2017-01-09 10:07:33	◣	rkuska (rkuska@moz-c9b.85h.82.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:08:11	◣	rolice (Thunderbird@moz-oob.30c.72.212.IP) has quit (Client exited)
2017-01-09 10:08:23	rkruppe	that is pretty much out of our control, it requires LLVM to implement PDB
2017-01-09 10:08:26	◣	cpup (cpup@moz-m24.69g.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:08:28	◥	nom (Nabeel@moz-3st.87j.180.59.IP) has joined #rust-beginners
2017-01-09 10:08:37	◥	wgreenberg (william@moz-biegmh.com) has joined #rust-beginners
2017-01-09 10:08:56	ray	right, which is a bit sad
2017-01-09 10:09:13	rkruppe	which may be happening slowly, but I don't recall any recent status updates on that
2017-01-09 10:10:12	ray	it's funny, because jai seems to get proper pdb output from llvm
2017-01-09 10:10:21	ray	an that language is far from 1.0!
2017-01-09 10:10:37	@Manishearth	it's closer to C++ iirc
2017-01-09 10:10:41	◥	cpup (cpup@moz-m24.69g.218.32.IP) has joined #rust-beginners
2017-01-09 10:10:55	ray	that isn't really an excuse though
2017-01-09 10:11:07	@Manishearth	no, I mean that implementation-wise
2017-01-09 10:11:13	ray	he is one person, how many people are working on llvm? how many are working on rust?
2017-01-09 10:11:17	@Manishearth	I forget the issues involved
2017-01-09 10:11:32	ray	i am sure mozilla can afford to put a few people on it
2017-01-09 10:11:39	@Manishearth	no
2017-01-09 10:11:46	ray	unless they don't care about windows (which seems like the case)
2017-01-09 10:11:50	@Manishearth	mozilla has like 8 people working on rust
2017-01-09 10:12:04	@Manishearth	there are many priorities
2017-01-09 10:12:05	ray	right, and jai has one
2017-01-09 10:12:07	@Manishearth	this is not so simplistic
2017-01-09 10:12:09	rkruppe	ray: Really? Last I checked LLVM can't output PDB, only CideView which only gives you limited debug info
2017-01-09 10:12:15	@Manishearth	^
2017-01-09 10:12:48	@Manishearth	I mean, you can already debug rust on windows
2017-01-09 10:12:51	@Manishearth	just not with pdb
2017-01-09 10:13:03	ray	right, but you can't debug it with the microsoft toolchain
2017-01-09 10:13:06	ray	which is a problem
2017-01-09 10:13:15	rkruppe	Yes you can
2017-01-09 10:13:16	◥	caconym (caconym@moz-klghvh.wa.comcast.net) has joined #rust-beginners
2017-01-09 10:13:20	@Manishearth	there has been a LOT of effort by alex/brian and also non-moz employees to get rust working on windows
2017-01-09 10:13:26	@Manishearth	and working well
2017-01-09 10:13:31	rkruppe	link.exe turns CodeView into perfectly fine PDB files
2017-01-09 10:13:35	ray	"working well"
2017-01-09 10:13:38	@Manishearth	it's flat out wrong to say that we don't care about windows
2017-01-09 10:13:49	◣	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-09 10:14:04	ray	on all the windows setup's i have tried to debug rust on, none of them have worked properly
2017-01-09 10:14:14	◥	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has joined #rust-beginners
2017-01-09 10:14:47	ray	some of them just won't step into the code, some of them will, but they don't have the right line info, and others don't let me view things in the watch window
2017-01-09 10:15:03	ray	the experience is all over the place
2017-01-09 10:15:13	@Manishearth	ray: and how are you so certain that jai will work?
2017-01-09 10:15:15	Icefoz	ray: Sounds like a ripe field for your valuable contributions then!
2017-01-09 10:15:32	@Manishearth	there are no binaries of jai
2017-01-09 10:15:41	ray	well, for starters, jai has a "90% of my clients use windows, so i will make it work there first"
2017-01-09 10:15:49	@Manishearth	ray: that does not answer the question
2017-01-09 10:15:56	ray	whereas rust has the opposite mentality
2017-01-09 10:16:14	◥	Andoriyu (Andoriyu@moz-uo1igi.biz.rr.com) has joined #rust-beginners
2017-01-09 10:16:18	@Manishearth	ray: your argument was that jai, a pre-1.0 language, has good windows support *now*
2017-01-09 10:16:21	@Manishearth	you have no evidence to support that
2017-01-09 10:16:29	@Manishearth	it may eventually have good windows support we don't know
2017-01-09 10:16:34	ray	i would argue that is better than rust's
2017-01-09 10:16:35	@Manishearth	right now it should be the same as rust, mostly
2017-01-09 10:16:40	@Manishearth	ray: how do you know that?
2017-01-09 10:16:43	@niconii	getting a bit heated in here
2017-01-09 10:16:51	@Manishearth	heh
2017-01-09 10:16:56	ray	well, for one all the jai demos work on windows
2017-01-09 10:17:06	breeden_	Windows has teir one support, so the rust team certainly values windows support dearly
2017-01-09 10:17:10	◣	mib_es8il2 (Mibbit@moz-qcar7g.tx.charter.com) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 10:17:13	@Manishearth	yes
2017-01-09 10:17:15	ray	including the debugging demos
2017-01-09 10:17:15	breeden_	tier*
2017-01-09 10:17:41	◣	caconym (caconym@moz-klghvh.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-09 10:17:44	breeden_	ray: also, no one cares about jai either :)
2017-01-09 10:17:45	ray	sure, but i still can't debug it
2017-01-09 10:18:01	@Manishearth	I've had a decent experience debugging rust on windows fwiw
2017-01-09 10:18:19	rkruppe	I'm sure we can find you a wonderful demo where debugging Rust works beautifully :)
2017-01-09 10:18:20	@Manishearth	are you sure you weren't just using rust when debugging was broken in general?
2017-01-09 10:18:22	ray	maybe, but with the msvc toolchain?
2017-01-09 10:18:25	@Manishearth	yes
2017-01-09 10:18:36	◥	ehd (ehd@moz-9rq.lf7.79.208.IP) has joined #rust-beginners
2017-01-09 10:18:41	@Manishearth	there have been multiple instances last year where the rust compiler emits bad debuginfo on all targets
2017-01-09 10:19:36	ray	my desktop is running 1.9.0 and my laptop is running 1.12.0
2017-01-09 10:19:50	@Manishearth	hm
2017-01-09 10:20:00	@Manishearth	could you file bugs about what is broken?
2017-01-09 10:20:03	ray	on 1.9.0 debugging is impossible
2017-01-09 10:20:04	rkruppe	Hell, the debug info tests are failing right now on my Linux machine
2017-01-09 10:20:05	breeden_	any reason for not updating?
2017-01-09 10:20:09	@niconii	hmm, those are pretty old... current stable is 1.14.0
2017-01-09 10:20:09	◣	nom (Nabeel@moz-3st.87j.180.59.IP) has quit (Quit: see you later)
2017-01-09 10:20:13	@Manishearth	^
2017-01-09 10:20:14	◥	nom (Nabeel@moz-3st.87j.180.59.IP) has joined #rust-beginners
2017-01-09 10:20:16	rkruppe	^
2017-01-09 10:20:24	@Manishearth	1.12 was definitely around the time debuginfo was borked
2017-01-09 10:20:42	@Manishearth	well, the nightlies around that time were borked. can't recall what had happened to the stable ones 
2017-01-09 10:20:53	ray	and on 1.12, i can step into the code at least, but it never gets the line numbers right, and i can't actually set breakpoints, view memory, or anything
2017-01-09 10:20:59	@Manishearth	ray: and what are you debugging? beware that stepping and stuff is in general strange when it comes to closures
2017-01-09 10:21:02	@Manishearth	hm
2017-01-09 10:21:05	ray	but if you say it has gotten better, i might try it
2017-01-09 10:21:07	@Manishearth	ray: debug build I presume?
2017-01-09 10:21:18	ray	yes
2017-01-09 10:21:18	◥	yzarubin (Mibbit@moz-sf96pt.intuit.com) has joined #rust-beginners
2017-01-09 10:22:19	ray	i guess i will try updating to the latest version
2017-01-09 10:22:34	@niconii	btw, is it just me or does saying that debugging was broken everywhere just sound more like
2017-01-09 10:22:41	breeden_	i was just curious because updating is really easy.  I was wondering if you were stuck on previous versions due to some code not running on more recent versions
2017-01-09 10:22:48	@niconii	"so you see, we don't suck on windows, we just suck everywhere!"
2017-01-09 10:22:52	@Manishearth	niconii: it does
2017-01-09 10:22:54	@Manishearth	but this was last year
2017-01-09 10:23:05	rkruppe	niconii: that's true tho :P
2017-01-09 10:23:11	ray	i am not using rustup
2017-01-09 10:23:19	breeden_	no, we only moderatly suck everywhere ;\
2017-01-09 10:23:25	@Manishearth	I was basically saying that there was a point in time when debugging was generally broken :p
2017-01-09 10:23:53	◣	chamar (chamar@moz-fbvvki.mc.videotron.ca) has quit (Quit: Leaving)
2017-01-09 10:23:55	@Manishearth	I tend to use debuggers a lot, and I've had a consistently good experience
2017-01-09 10:23:58	breeden_	ray: oh rustup stabalized to v1.0! :D It's definitely worth trying.  Or does your environment require something that rustup can't handle?
2017-01-09 10:24:02	@Manishearth	even without the gdb/lldb wrappers
2017-01-09 10:24:09	@niconii	ray: i think they mostly mean "easy" in the sense that code generally doesn't break much if at all from version to version
2017-01-09 10:24:26	◥	brson (brson@moz-ud3.j2m.56.172.IP) has joined #rust-beginners
2017-01-09 10:25:08	◣	bbjz (00000100@moz-4ce.117.115.129.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:25:37	yzarubin	Is there a way of calling a macro while  binding it to a type as part of an expression? I'd like to be able to do something like this like this : (read!() as i32) * 5;
2017-01-09 10:25:42	ray	once rust has a proper debugger on windows that matches the debugging experience of c++, i will be happy
2017-01-09 10:26:22	@Manishearth	getting the VS debuggers to work with rust like they do C++ requires buy in from MS
2017-01-09 10:26:34	@Manishearth	I've head that there's some interetest in this
2017-01-09 10:26:35	Cldfire	ray, have you seen https://github.com/vadimcn/vscode-lldb ?
2017-01-09 10:26:37	@Manishearth	*interest
2017-01-09 10:26:57	@Manishearth	I need to get time to work on the lldb rust support
2017-01-09 10:28:56	mcw	Hi guys, how can I return a thing that is either an Iter or a Filter, I thought they were the same type (or at least, had a common ancestor Trait): https://play.rust-lang.org/?gist=34d1e697552b1d2eb0217be509117943&version=stable&backtrace=0
2017-01-09 10:29:22	@Manishearth	mcw: return an enum
2017-01-09 10:29:33	futile	sounds like 'impl Trait'?
2017-01-09 10:29:38	@Manishearth	not exactly
2017-01-09 10:29:47	@Manishearth	impl trait won't let you return concrete types that differ
2017-01-09 10:29:54	futile	oh right
2017-01-09 10:29:56	@Manishearth	you can also box both of them if you're okay with dynamic dispatch
2017-01-09 10:30:03	◣	tel (tel@moz-vd9.ulq.207.104.IP) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-09 10:30:09	@Manishearth	mcw: "common ancestor trait" only matters in polymorphic situations
2017-01-09 10:30:18	@Manishearth	*or* if you're using trait objects
2017-01-09 10:30:19	mcw	I don't know the exact right words to use. :-)
2017-01-09 10:30:26	@Manishearth	it's okay :)
2017-01-09 10:30:49	@Manishearth	Rust isn't like Java, so two types that share a trait must be explicitly boxed into a trait object for them to be treated as the same type
2017-01-09 10:30:53	@Manishearth	otherwise they're different types
2017-01-09 10:31:55	ray	okay, i updated to 1.14.0
2017-01-09 10:31:55	◥	SklopiS (tobias@moz-3mak20.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-09 10:32:07	mcw	What does boxing actually do?
2017-01-09 10:32:10	bluss	mcw: in that particular example, I'd probably just move the "match cat" into the filter closure. It's the least fuss
2017-01-09 10:32:11	ray	the debugging situation is better (i can step into the code line by line)
2017-01-09 10:32:19	◥	poolish (bread@moz-brooh7.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-09 10:32:21	ray	but i can't view variables in the watch window
2017-01-09 10:32:21	@Manishearth	mcw: https://doc.rust-lang.org/beta/book/trait-objects.html
2017-01-09 10:32:26	@Manishearth	ray: huh, strange
2017-01-09 10:32:29	@Manishearth	file a bug please :)
2017-01-09 10:32:33	mcw	bluss: is that not adding an extra comparison to every filter?
2017-01-09 10:33:44	bluss	mcw: well sure, but the compiler can lift that out of the loop. Not sure how you wanted to do otherwise - and enum'd iterator would also have an extra comparison in .next()
2017-01-09 10:33:46	bluss	and a boxed iterator has even more indirection overhead
2017-01-09 10:33:53	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2017-01-09 10:34:06	ray	this is in VS2015 (no updates)
2017-01-09 10:34:07	Arnavion	ray: In my experience, you should be able to see variables, but expanding them may give broken results.
2017-01-09 10:34:11	◣	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has quit (Ping timeout: 121 seconds)
2017-01-09 10:34:12	bluss	yes, the compiler is pretty good at lifting enum matches out of loops
2017-01-09 10:34:16	mcw	bluss: gotcha.
2017-01-09 10:34:22	ray	i will try it on my laptop which is using a more recent version of VS
2017-01-09 10:34:26	◥	Durz0 (Durzo@moz-n40fdt.dynamic.kabel-deutschland.de) has joined #rust-beginners
2017-01-09 10:34:32	Arnavion	Eg &str variables will have a proper length member but the data pointer will point to garbage memory
2017-01-09 10:35:10	@Manishearth	Arnavion: huh. wat.
2017-01-09 10:35:13	ray	ohh, i guess it isn't smart enough to only debug my code :P
2017-01-09 10:35:19	Arnavion	And enums have a rather amusing expansion where every variant is listed and you have to inspect the discriminant member to figure out which one to care about
2017-01-09 10:35:24	◥	moosnat (user@moz-itlgbr.wireless.umich.net) has joined #rust-beginners
2017-01-09 10:35:35	◣	poolish (bread@moz-brooh7.hfc.comcastbusiness.net) has quit (Client exited)
2017-01-09 10:35:37	@Manishearth	yes, enums are going to look funky 
2017-01-09 10:35:41	ray	it tried to step into the rust stdlib, which it doesn't have debug info for so...
2017-01-09 10:35:51	ray	fun times
2017-01-09 10:35:57	@Manishearth	ray: there was supposed to be a way to download stdlib with debuginfo
2017-01-09 10:36:04	@Manishearth	not sure if they did that yet
2017-01-09 10:36:12	@Manishearth	rustup component add stdlib-debug or something
2017-01-09 10:36:12	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2017-01-09 10:36:16	Arnavion	though I've also seen cases where the discriminant member had a number in the upper hundreds so I had to guess which variant was the correct one
2017-01-09 10:36:23	moosnat	Hey everyone, I remember reading a long time ago an article that suggested that sufficiently complex single-threaded code can exhibit traits of multi-threaded code. Does anyone remember this article?
2017-01-09 10:36:42	ray	right, but even so i don't want to really step into the stdlib
2017-01-09 10:36:57	Arnavion	ray: Also, stepping into the release build of stdlib is going to be very pointless
2017-01-09 10:36:58	ray	in VC++ i never have to step into win32 or libstdc
2017-01-09 10:36:59	◥	jedahan (jedahan@moz-dhluhr.n2kv.ot3t.011e.2620.IP) has joined #rust-beginners
2017-01-09 10:37:10	Arnavion	So don't?
2017-01-09 10:37:12	◥	repnop (shell@moz-osmbiu.openskytelcom.net) has joined #rust-beginners
2017-01-09 10:37:18	Arnavion	If you set a bp in your own code it'll be hit just fine
2017-01-09 10:37:23	ray	never said i wanted to
2017-01-09 10:37:43	mcw	Right, will try to do an enum tomorow, have to work out the lifetime syntax properly I guess, cheers for the pointers.
2017-01-09 10:37:44	ray	but in VS, if you try stepping into a something from win32/libstdc it just steps over it
2017-01-09 10:38:04	Arnavion	That's what F10 is for
2017-01-09 10:38:20	ray	which is nice when you are stepping into code line by line and don't want to switch between hitting two hotkeys all the time
2017-01-09 10:38:32	ray	it's a matter of principle
2017-01-09 10:38:41	Arnavion	One finger onShift, one finger to move between F10 and F11
2017-01-09 10:38:52	ray	sure
2017-01-09 10:39:01	◥	rkuska (rkuska@moz-c9b.85h.82.95.IP) has joined #rust-beginners
2017-01-09 10:39:02	◣	SklopiS (tobias@moz-3mak20.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-09 10:39:11	ray	but it in c++ it works even nicer, i just keep my finger on f11
2017-01-09 10:39:22	Arnavion	(I often have to debug the stdlib at work so I don't have "Just my code" emabled anyway, so I'm biased)
2017-01-09 10:39:24	moosnat	I actually just found it, it's https://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/
2017-01-09 10:39:31	◣	brson (brson@moz-ud3.j2m.56.172.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:39:32	ray	it assumes it don't want to step into libstdc
2017-01-09 10:39:38	◣	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has quit (Client exited)
2017-01-09 10:39:51	ray	right, its fine in some cases, but not always
2017-01-09 10:40:09	ray	i certainly don't want to step into every println!
2017-01-09 10:40:18	◥	chamar (chamar@moz-fbvvki.mc.videotron.ca) has joined #rust-beginners
2017-01-09 10:40:22	~steveklabnik	nonelement: i am back now, sorry, did you get your answer about the stdlib?
2017-01-09 10:40:41	◥	MarwenDo (MarwenDo@moz-b8e.u5k.226.41.IP) has joined #rust-beginners
2017-01-09 10:40:44	ray	anyways, how do i file a bug report?
2017-01-09 10:40:55	◣	ufobat (Martin@moz-s6rjoa.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2017-01-09 10:41:01	◥	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined #rust-beginners
2017-01-09 10:41:07	◣	hako (hako@moz-4t1dus.6fgo.fm5h.0388.2a01.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:41:23	◣	moosnat (user@moz-itlgbr.wireless.umich.net) has left #rust-beginners ("ERC (IRC client for Emacs 25.1.1)")
2017-01-09 10:41:34	◥	hako (hako@moz-4t1dus.6fgo.fm5h.0388.2a01.IP) has joined #rust-beginners
2017-01-09 10:42:17	◥	deciduously (ben@moz-airl7o.lc8q.lne8.2000.2604.IP) has joined #rust-beginners
2017-01-09 10:42:53	Silphius	I need to create a function with two type parameters T, U. It will do one thing if T: num::Float, U: num::Integer and something different in all other cases. What's the easiest way to go about that?
2017-01-09 10:43:06	◣	rkuska (rkuska@moz-c9b.85h.82.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:43:21	◥	stew (stew@moz-ektmpt.dyn.optonline.net) has joined #rust-beginners
2017-01-09 10:43:26	◣	jedahan (jedahan@moz-dhluhr.n2kv.ot3t.011e.2620.IP) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-09 10:43:29	◣	rkruppe (rkruppe@moz-pqgm0e.dyn.telefonica.de) has quit (Connection closed)
2017-01-09 10:43:33	◥	rkruppe (rkruppe@moz-pqgm0e.dyn.telefonica.de) has joined #rust-beginners
2017-01-09 10:43:33	◣	rkruppe (rkruppe@moz-pqgm0e.dyn.telefonica.de) has quit (Connection closed)
2017-01-09 10:44:00	◥	rkruppe (rkruppe@moz-3nj.rnu.131.95.IP) has joined #rust-beginners
2017-01-09 10:45:03	◥	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-09 10:45:36	◥	junqed (junqed@moz-j2b.arf.70.178.IP) has joined #rust-beginners
2017-01-09 10:46:35	◣	bbsome (Mibbit@moz-b425n3.ucl.ac.uk) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 10:47:00	◣	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has quit (Client exited)
2017-01-09 10:47:09	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-09 10:47:24	Arnavion	<@Manishearth> Arnavion: huh. wat.
2017-01-09 10:47:26	Arnavion	https://i.imgur.com/9Ik2qyw.png
2017-01-09 10:47:32	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-09 10:47:33	Arnavion	Look at subcommand_name
2017-01-09 10:48:15	Arnavion	It's supposed to be the string "list", so the length is correct
2017-01-09 10:49:02	◣	cornstalks (cornstalks@moz-6vu1bf.ca.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-09 10:49:19	repnop	Silphius: I'm not 100% sure but you might be looking for generic bounds with `where` http://rustbyexample.com/generics/where.html
2017-01-09 10:49:43	nonelement	steveklabnik Mostly! I'm still curious as to the design guidelines that the core team, I guess, works by in terms of what should go into stdlib. A few people mentioned there being stability prerequisites which makes a lot of sense.
2017-01-09 10:49:46	@Manishearth	Arnavion: huh. file bug please :)
2017-01-09 10:50:15	Silphius	You can't provide two impl's for a function with where bounds, though, without something like a negative bound
2017-01-09 10:50:29	~steveklabnik	nonelement: yeah, so that's a big one. historically speaking, and i'm not on the libs team, so their thinking may have evolved a bit, but there were three things that made sometihng eligible for the stdlib
2017-01-09 10:50:42	~steveklabnik	1. requires a lot of unsafe code. mostly datastructures. this is so they could be highly audited.
2017-01-09 10:50:50	~steveklabnik	2. traits for interoperability purposes
2017-01-09 10:51:05	~steveklabnik	3. things that would be useful in _every_ rust program. virtually, not absolutely
2017-01-09 10:51:31	~steveklabnik	part of that is due to said stability issues; like, we don't want to stabilize something poor forever
2017-01-09 10:51:34	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:51:54	@Manishearth	not libs team either, but that seems pretty accurate
2017-01-09 10:51:57	~steveklabnik	today, stuff starts out in the ecosystem, then moves into "the nursery", then reaches 1.0, then is included in the rust-lang org, then makes it to the stdlib
2017-01-09 10:52:04	◥	cmyr (cmyr@moz-tcg66u.cable.teksavvy.com) has joined #rust-beginners
2017-01-09 10:52:20	◣	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has quit (Quit: KVIrc 4.9.2 Aria http://www.kvirc.net/)
2017-01-09 10:52:22	~steveklabnik	since 1.0, one or two libraries have made the first jump. one has made the second and third. none have made the last
2017-01-09 10:52:46	@Manishearth	the last step is not always a guaranteed part of the process either
2017-01-09 10:52:57	@Manishearth	I bet regex will make it into rust-lang/, but not rust-lang/rust
2017-01-09 10:53:17	◣	stephanbuys (Adium@moz-sam0om.telkomadsl.co.za) has quit (Quit: Leaving.)
2017-01-09 10:53:30	~steveklabnik	part of it is that cargo is so good
2017-01-09 10:53:39	~steveklabnik	like, the last step basically means "you don't need to put a line in cargo.toml"
2017-01-09 10:53:48	~steveklabnik	so, very low reward, but very high risk
2017-01-09 10:53:51	~steveklabnik	imho
2017-01-09 10:54:27	◥	russ_za (kvirc@moz-l6j8c4.voxdsl.co.za) has joined #rust-beginners
2017-01-09 10:55:04	◣	crodjer_ (crodjer@moz-4ec.681.143.114.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:55:56	◣	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has quit (Quit: Leaving)
2017-01-09 10:56:07	◥	asteriskServes_ (asteriskSer@moz-ggo.mlv.69.184.IP) has joined #rust-beginners
2017-01-09 10:56:30	nonelement	Ah, toward point #3 things have tended toward the minimal for the most part?
2017-01-09 10:57:06	◣	asteriskServes (asteriskSer@moz-ggo.mlv.69.184.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 10:57:19	nonelement	Seems like a difficult thing to slice given the domain.
2017-01-09 10:57:26	nonelement	Or possible domains, I guess.
2017-01-09 10:59:14	◥	mgattozzi (mgattozzi@moz-ut3ia7.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-09 10:59:15	~steveklabnik	yeah
2017-01-09 10:59:21	~steveklabnik	i mean, rust is useful for a lot of things
2017-01-09 10:59:37	~steveklabnik	it's funny, different people have very different opinons on all of this
2017-01-09 10:59:38	◥	EoF (EoF@moz-h6i7lj.dynamic.kabel-deutschland.de) has joined #rust-beginners
2017-01-09 10:59:41	~steveklabnik	some people think our stdlib is already too large
2017-01-09 10:59:43	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-09 10:59:45	~steveklabnik	some people think it's impossibly minimal
2017-01-09 10:59:55	~steveklabnik	lots of people want it to stay basically exactly how it is and never add things
2017-01-09 11:00:00	~steveklabnik	some people want some crates pulled in over time
2017-01-09 11:00:19	~steveklabnik	some people want a "Rust platform 2017" that's basically a secondary stdlib chosen from the ecosystem, changes yearly
2017-01-09 11:00:29	◥	crodjer (crodjer@moz-mif.qc6.248.49.IP) has joined #rust-beginners
2017-01-09 11:00:33	mgattozzi	I think a lot of it depends on which language you come from and what one thinks is a good design choice
2017-01-09 11:00:47	mgattozzi	which is why the opinions differ so much
2017-01-09 11:00:49	nonelement	Right. Getting into rust, and this was echoed by someone else earlier, there were a handful of things that I just... sort of expected there to be some stdlib implementation for me to use -- serialization was one, the time was another
2017-01-09 11:01:17	◣	iiddnn__ (iacopodeeno@moz-fcea0a.retail.telecomitalia.it) has quit (Client exited)
2017-01-09 11:02:06	nonelement	I know there're time facilities included in stdlib, so that may be a poor example (was thinking of a simple time::now() or something)
2017-01-09 11:02:26	misdreavus	yeah, i came from .net, where the standard library is improbably huge
2017-01-09 11:02:37	Icefoz	nonelement: Like std::time::Instant::now() ?  :-P
2017-01-09 11:02:37	~steveklabnik	:)
2017-01-09 11:02:47	misdreavus	so it was mainly a matter of adjusting my expectations
2017-01-09 11:02:59	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-09 11:03:00	Icefoz	It does take some getting used to.  Especially compared to Python.
2017-01-09 11:03:14	nonelement	Icefoz TIL. XD
2017-01-09 11:03:49	Icefoz	nonelement: Glad to help!  :D
2017-01-09 11:04:06	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 11:04:13	nonelement	My day job sees me using a lot of JS -- JS and Rust are basically night and day.
2017-01-09 11:04:19	~steveklabnik	heh
2017-01-09 11:04:23	~steveklabnik	npm is one of our newer production users
2017-01-09 11:04:25	Icefoz	(std::time is a little bit wonky compared to what one might expect but actually is the Right Way to do it.)
2017-01-09 11:04:41	◣	cpup (cpup@moz-m24.69g.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 11:04:51	stew	i tell people i just hate php
2017-01-09 11:04:55	stew	its a lie, i also secretly hate javascript
2017-01-09 11:04:57	stew	but i do a lot of it
2017-01-09 11:05:01	stew	and i wont admit that in public
2017-01-09 11:05:09	◥	kulshrax (kulshrax@moz-2i3ho4.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-09 11:05:16	~steveklabnik	well, we try to keep language hatred out of this channel :)
2017-01-09 11:05:19	stew	hahah
2017-01-09 11:05:21	stew	agree
2017-01-09 11:05:22	◣	rkruppe (rkruppe@moz-3nj.rnu.131.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-09 11:05:22	◥	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has joined #rust-beginners
2017-01-09 11:05:32	stew	ills ay no more
2017-01-09 11:05:48	◥	rkruppe (rkruppe@moz-00ijij.dyn.telefonica.de) has joined #rust-beginners
2017-01-09 11:06:36	◥	durka42 (durka42@moz-h07.vjt.130.158.IP) has joined #rust-beginners
2017-01-09 11:06:40	nonelement	well, ok so is that to say that the stdlib might change over time if it turns out many are using it for a particular use? Or does it even matter beyond a certain point because cargo makes it incredibly easy?
2017-01-09 11:06:55	◥	cpup (cpup@moz-m24.69g.218.32.IP) has joined #rust-beginners
2017-01-09 11:07:04	misdreavus	probably depends on who shows up to the RFC discussion :P
2017-01-09 11:07:06	~steveklabnik	i mean, there's no policy that says the stdlib is frozen
2017-01-09 11:07:15	~steveklabnik	it's at least open to change
2017-01-09 11:07:36	mgattozzi	If the RFC is good it'll get added
2017-01-09 11:07:41	◣	rkruppe (rkruppe@moz-00ijij.dyn.telefonica.de) has quit (Quit: Bye)
2017-01-09 11:07:41	◣	Kinnison (quassel@moz-023mlk.rjek.com) has left #rust-beginners ("http://quassel-irc.org - Chat comfortably. Anywhere.")
2017-01-09 11:07:41	◣	ray (Mibbit@moz-7suuq5.fios.verizon.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-09 11:07:42	◥	rkruppe_ (chatzilla@moz-3nj.rnu.131.95.IP) has joined #rust-beginners
2017-01-09 11:07:43	misdreavus	yeah, it's not frozen by fiat, just by convention/inertia
2017-01-09 11:07:49	⚡	rkruppe_ is now known as rkruppe
2017-01-09 11:07:51	◥	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-09 11:08:01	◣	daschl (daschl@moz-kvc.ipu.178.62.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-09 11:08:08	mgattozzi	but in the meantime crates.io makes up for any missing batteries one might need.
2017-01-09 11:11:38	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-09 11:12:37	◥	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has joined #rust-beginners
2017-01-09 11:12:42	⚡	agibson is now known as agibson|afk
2017-01-09 11:15:07	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-09 11:15:24	◥	cjhowe (textual@moz-ola7bc.qgog.pphr.8805.2600.IP) has joined #rust-beginners
2017-01-09 11:15:26	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-09 11:16:05	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2017-01-09 11:16:23	◥	stjepang_ (stjepang@moz-3o5.uss.205.37.IP) has joined #rust-beginners
2017-01-09 11:17:03	◣	ehd (ehd@moz-9rq.lf7.79.208.IP) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2017-01-09 11:17:17	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-10 10:59:36	◥	d8v3 (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-10 10:59:36	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-10 10:59:36	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-10 10:59:36	⚡	Channel #rust-beginners: 693 nicks (5 ops, 0 halfops, 0 voices, 688 normals)
2017-01-10 10:59:37	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-10 10:59:39	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-10 11:00:02	⚡	You are now known as boon
2017-01-10 11:00:07	◣	nagisa (nagisa@moz-8t068g.static.zebra.lt) has quit (Ping timeout: 121 seconds)
2017-01-10 11:01:17	◣	FrenchToast (FrenchToast@moz-s44on6.co.comcast.net) has quit (Quit: This computer has gone to sleep)
2017-01-10 11:03:15	◣	rkuska (rkuska@moz-c9b.85h.82.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 11:05:00	◣	karinqe (karinqe@moz-ptt.nvt.172.163.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 11:06:21	◥	rkuska (rkuska@moz-c9b.85h.82.95.IP) has joined #rust-beginners
2017-01-10 11:06:53	◥	xiinotulp (q@moz-s5gkp8.dynamic.totbb.net) has joined #rust-beginners
2017-01-10 11:09:17	◣	cjhowe (textual@moz-8114ai.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 11:09:27	◣	waffles (wafflespean@moz-q0j.kbj.23.1.IP) has quit (Quit: C'yall later...)
2017-01-10 11:09:39	◥	cjhowe (textual@moz-8114ai.hr.cox.net) has joined #rust-beginners
2017-01-10 11:09:39	Moonlightning	There isn't an integer method that reverses the bits?
2017-01-10 11:09:47	▷	Moonlightning half-expects one to exist
2017-01-10 11:10:10	◣	plutoniix (q@moz-nmb1hg.dynamic.totbb.net) has quit (Ping timeout: 121 seconds)
2017-01-10 11:10:25	misdreavus	bytes, yes, but i don't think there's one for bits
2017-01-10 11:11:17	@mbrubeck	u8::swap_bytes is my new favorite Rust method
2017-01-10 11:11:23	misdreavus	lol
2017-01-10 11:11:23	@mbrubeck	playbot: 5u8.swap_bytes()
2017-01-10 11:11:26	⚡	Notice(playbot): 5
2017-01-10 11:12:00	misdreavus	need that fail button that plays the Price Is Right losing fanfare
2017-01-10 11:12:17	Moonlightning	It's just for consistency, silly :P
2017-01-10 11:12:36	Moonlightning	And it's going to be in the integer trait whenever that happens, so
2017-01-10 11:12:36	misdreavus	it's because of macros, i bet
2017-01-10 11:18:24	FreeFull	mbrubeck: What was your previous favourite method?
2017-01-10 11:19:02	◥	erde74 (erde74@moz-49726m.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-10 11:19:05	◥	humean (humean@moz-huh.rkq.238.104.IP) has joined #rust-beginners
2017-01-10 11:19:16	◥	nom_ (Nabeel@moz-3a0.bea.180.59.IP) has joined #rust-beginners
2017-01-10 11:19:30	◣	cjhowe (textual@moz-8114ai.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 11:19:54	FreeFull	!crate bit_reverse
2017-01-10 11:19:55	rustbot	bit_reverse (0.1.5) - Computes the bit reversal of primitive integers. -> https://crates.io/crates/bit_reverse <https://docs.rs/crate/bit_reverse>
2017-01-10 11:20:01	▷	Moonlightning tries to come up with a favorite method. Doesn't think of much. :(
2017-01-10 11:20:14	FreeFull	Moonlightning: Always check if there is a crate for something =P
2017-01-10 11:20:34	Moonlightning	[T]::windows(), maybe?
2017-01-10 11:20:36	◥	bkn (bkn@moz-dbkqi7.fios.verizon.net) has joined #rust-beginners
2017-01-10 11:21:01	Moonlightning	Or maybe Integer::overflowing_*()
2017-01-10 11:21:19	◣	dionysus69 (Thunderbird@moz-f3r.u5k.134.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-10 11:21:25	◣	ramr1 (mrmrr@moz-9304m2.mobile.tre.se) has left #rust-beginners
2017-01-10 11:21:46	◥	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has joined #rust-beginners
2017-01-10 11:22:00	misdreavus	mine's probably more practical, like from_iter()
2017-01-10 11:22:02	FreeFull	windows is pretty useful, sometimes
2017-01-10 11:22:20	misdreavus	or Option::as_ref
2017-01-10 11:22:35	◣	nom (Nabeel@moz-a1o.vsv.180.59.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 11:23:08	◣	maddie9 (maddie@moz-fpe67k.dyn.plus.net) has quit (Quit: Leaving)
2017-01-10 11:23:11	◣	humean (humean@moz-huh.rkq.238.104.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 11:24:11	◣	woshilapin (woshilapin@moz-lte49m.mi.comcast.net) has quit (A TLS packet with unexpected length was received.)
2017-01-10 11:25:21	@mbrubeck	Option::take, definitely
2017-01-10 11:26:40	Moonlightning	Ooooh, mem::replace()
2017-01-10 11:27:19	▷	mbrubeck writes up RFC to add `u8::swap_byte` as an alias for `u8::swap_bytes`
2017-01-10 11:27:35	◥	bluss (bluss@moz-9sooj3.dynamic.simnet.is) has joined #rust-beginners
2017-01-10 11:27:45	◥	woshilapin (woshilapin@moz-lte49m.mi.comcast.net) has joined #rust-beginners
2017-01-10 11:28:08	◥	fenster (Mibbit@moz-td2.dir.159.213.IP) has joined #rust-beginners
2017-01-10 11:28:11	◣	fenster (Mibbit@moz-td2.dir.159.213.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 11:28:15	◣	sssilver (textual@moz-453ic4.2jev.946a.6000.2605.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 11:28:15	Moonlightning	XD
2017-01-10 11:28:32	◣	degausser (Thunderbird@moz-midec3.dyn.plus.net) has quit (Ping timeout: 121 seconds)
2017-01-10 11:29:28	FreeFull	We need to add a Sink type to std
2017-01-10 11:29:35	FreeFull	So then we can have Sink::drain
2017-01-10 11:29:58	@mbrubeck	We have Sink::flush https://doc.rust-lang.org/std/io/struct.Sink.html
2017-01-10 11:30:05	misdreavus	needs to be a Sink trait, so we can have KitchenSink and BathroomSink
2017-01-10 11:30:08	◥	ghisvail___ (ghisvail@moz-hvaj2i.ic.ac.uk) has joined #rust-beginners
2017-01-10 11:30:34	◥	humean (humean@moz-sl2fi3.cable.virginm.net) has joined #rust-beginners
2017-01-10 11:30:56	◣	cpup (cpup@moz-m24.69g.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 11:30:58	boon	 I could use a little help understanding this error and what I'm missing
2017-01-10 11:31:00	boon	https://hastebin.com/qoyigayayu.php
2017-01-10 11:31:31	aep	woa, how do i get an [u8] out of a  Vec<u8> without copying?
2017-01-10 11:32:07	@mbrubeck	boon: Looks like `opts` is a `Result<Opts, UrlError>` so you need to decide what to do in the error case
2017-01-10 11:32:12	aep	copying the obvious answer, but that seems pretty inefficient 
2017-01-10 11:32:12	alreece45	either &var or &var[..] works
2017-01-10 11:32:15	muskox	can i get an Iterator<Item=Item> from a Vec<Item>?
2017-01-10 11:32:31	rkruppe	muskox: vec.into_iter()
2017-01-10 11:32:32	alreece45	muskox: into_iter()?
2017-01-10 11:32:38	muskox	oh, thanks
2017-01-10 11:32:41	misdreavus	muskox: that'll consume the vector tho
2017-01-10 11:32:42	bluss	muskox: yes but some ownership concerns/questions. Cloning or moving the elements?
2017-01-10 11:32:44	@mbrubeck	muskox: or `vec.iter().cloned()` if you want to copy the items from the vector, instead of consuming it
2017-01-10 11:32:45	◥	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has joined #rust-beginners
2017-01-10 11:33:17	misdreavus	vec.drain(..) also works and leaves the vector empty after iteration finishes
2017-01-10 11:33:26	◥	duesee (duesee@moz-v99.qk1.147.5.IP) has joined #rust-beginners
2017-01-10 11:33:28	aep	alreece45: oh that was for me? thanks
2017-01-10 11:33:29	◣	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has quit (Client exited)
2017-01-10 11:33:32	@mbrubeck	boon: You can do `Pool::new(opts.unwrap())` if you just want to panic (abort the current thread) when there is a UrlError
2017-01-10 11:33:41	@mbrubeck	for other options, see http://doc.rust-lang.org/book/error-handling.html
2017-01-10 11:33:55	Moonlightning	muskox: be sure to call into_iter() on the Vec itself, not a reference. `&Vec::into_iter()` is the same as `Vec::iter()`
2017-01-10 11:34:05	◥	sh4wn (lucas@moz-93hqeb.ricardis.openfiber.nl) has joined #rust-beginners
2017-01-10 11:34:16	alreece45	aep: yep-- theoretically Vec<u8> should deref to &[u8] without the [..], but it doesn't always seem to do that for me
2017-01-10 11:34:23	boon	that's what I was looking for, thanks. didn't realize it was one of those "results must be used" errors
2017-01-10 11:34:44	duesee	Hello, I am not sure if I found a bug in the "is match exhaustive" checker or misundestood something. Can someone look at this snippet https://gist.github.com/duesee/bfa8449c7464796bf9ac77228d3265b0 and tell me if I should report a bug?
2017-01-10 11:34:59	◥	cpup (cpup@moz-m24.69g.218.32.IP) has joined #rust-beginners
2017-01-10 11:35:18	misdreavus	duesee: it doesn't check guard conditions when looking for exhaustiveness
2017-01-10 11:35:21	◥	SklopiS (tobias@moz-rd2dfq.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-10 11:35:30	Moonlightning	exhaustck?
2017-01-10 11:35:35	Moonlightning	matchck.
2017-01-10 11:35:49	Moonlightning	Kinda like matchstick! :D
2017-01-10 11:35:56	misdreavus	:3
2017-01-10 11:36:00	duesee	oooooh
2017-01-10 11:36:06	duesee	okay, that was easy
2017-01-10 11:36:15	misdreavus	a simple unreachable!() arm will do the trick
2017-01-10 11:36:35	Moonlightning	Hmm…we should find a way to put /sti/ in there so we can call it /matchstick/ :D
2017-01-10 11:37:09	◣	awygle (Mibbit@moz-no84m6.res.rr.com) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 11:37:41	duesee	then, what's curious, when I change the order of key::esc and that one with the guard, it compiles
2017-01-10 11:38:24	duesee	the reason I wanted to use guards was to not rely on the order
2017-01-10 11:38:33	misdreavus	huh
2017-01-10 11:39:01	◥	_sfiguser (sfigguser@moz-0temhh.ip57.fastwebnet.it) has joined #rust-beginners
2017-01-10 11:39:06	◥	franz (franz@moz-2hdp0g.4976.31ct.0644.2601.IP) has joined #rust-beginners
2017-01-10 11:39:26	duesee	ohh no, I deleted the if guard also
2017-01-10 11:39:35	misdreavus	ah, that'll do it
2017-01-10 11:40:09	◥	Kreest__ (Kreest@moz-kpfgh6.globonet.hu) has joined #rust-beginners
2017-01-10 11:40:09	◥	fylux (Mibbit@moz-dlv38c.dynamicip.rima-tde.net) has joined #rust-beginners
2017-01-10 11:40:25	fylux	Hi
2017-01-10 11:40:31	muskox	hi
2017-01-10 11:40:40	misdreavus	it'll scan in order for them anyway, so putting the general matches after the specific ones will make the catch-all one work
2017-01-10 11:40:56	fylux	I'm implementing heapsort
2017-01-10 11:40:57	fylux	https://is.gd/IMMedd
2017-01-10 11:41:11	undeadleech	I was just thinking about creating a module system where every time during compilation my program would pull in all file from a specific directory and allow me to do stuff with them. Now I haven't done anything like this before but would looking into macros be the right way to go for this?
2017-01-10 11:42:27	radix-M	(I'm not sure if I already sent this, my client is acting up): Is there something like `fn first_error(i: Iterator<Result<R,E>>) -> Result<Iterator<Item=R>, E>` ?
2017-01-10 11:42:33	fylux	but I But I get an error: Some(v) => arr[i]=v,    | 			                  ^ expected type parameter, found struct `std::collections::binary_heap::PeekMut`    |
2017-01-10 11:42:58	◣	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 11:43:11	fylux	Sorry the error is : ^ expected type parameter, found &E
2017-01-10 11:43:15	muskox	fylux: perhaps use v.clone()
2017-01-10 11:43:17	misdreavus	radix-M: collect()!
2017-01-10 11:43:17	muskox	?
2017-01-10 11:43:30	duesee	i guess I will stay with the order thing. but out of curiousity: will it be someday possible to check exhaustiveness for values, rather then for "types". so that pattern which catch all values from 0 to 255 will be possible for u8?
2017-01-10 11:43:32	misdreavus	fylux: since it's Copy anyway, you can use *v https://is.gd/V3l8Da
2017-01-10 11:43:40	Moonlightning	muskox: requiring Clone for a sort?
2017-01-10 11:43:42	blashyrk	can I iterate over a **reference** to a range? I get " the trait `std::iter::Iterator` is not implemented for `&std::ops::Range<i16>" and it works fine when I move the range to the function instead of borrowing it
2017-01-10 11:43:48	muskox	oh, misdreavus ^
2017-01-10 11:43:57	muskox	sorry -_-
2017-01-10 11:43:58	bluss	blashyrk: no, but you can clone the range explicitly from the reference
2017-01-10 11:44:01	fylux	*v makes more sense to me than clone
2017-01-10 11:44:12	radix-M	misdreavus: really? that seems surprising,...
2017-01-10 11:44:17	◣	ubsandroid (ubsan@moz-cc6.3fu.114.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 11:44:36	blashyrk	bluss: interesting, do you happen to know why though?
2017-01-10 11:45:01	misdreavus	radix-M: FromIterator has a few magical impls that collect can use https://doc.rust-lang.org/std/iter/trait.FromIterator.html
2017-01-10 11:45:09	Moonlightning	radix-M: yeah; it's unintuitive, but useful!
2017-01-10 11:45:28	radix-M	I'm trying it but it's not working, maybe I need some type annotations...
2017-01-10 11:46:03	◥	davs (davs@moz-8afd79.bratislava.digicable.sk) has joined #rust-beginners
2017-01-10 11:46:37	misdreavus	you'll have to put something like Result<Vec<T>, E> - it still needs to collect into something for the non-error case
2017-01-10 11:47:24	aep	how can i call a function specifying the return type, while ignoring the return?   foo<TheType>() doesnt seem to be right
2017-01-10 11:47:32	◥	ubsandroid (ubsan@moz-marvn9.qq8i.7c2i.fb90.2607.IP) has joined #rust-beginners
2017-01-10 11:47:39	misdreavus	foo::<TheType>()
2017-01-10 11:47:48	misdreavus	if it's a syntax error you're getting
2017-01-10 11:47:48	◣	undeadleech (undeadleech@moz-qcfacg.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2017-01-10 11:47:53	aep	awesome thanks
2017-01-10 11:48:05	misdreavus	good old turbofish :3
2017-01-10 11:48:18	aep	oh right, i remember reading that in the book
2017-01-10 11:48:26	◣	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has quit (Connection closed)
2017-01-10 11:48:26	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Connection closed)
2017-01-10 11:48:27	◣	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has quit (Connection closed)
2017-01-10 11:48:33	◥	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-10 11:48:46	◥	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has joined #rust-beginners
2017-01-10 11:48:56	◣	kulshrax (kulshrax@moz-q61.9o0.201.199.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-10 11:49:40	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-10 11:49:43	◥	balmaster (Mibbit@moz-4d7pg1.istra.ru) has joined #rust-beginners
2017-01-10 11:50:08	◣	balmaster (Mibbit@moz-4d7pg1.istra.ru) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 11:50:10	radix-M	I guess the difference between .collect() and what I said is that my hypothetical thing returned an iterator instead of directly collecting
2017-01-10 11:50:18	radix-M	er, rather, a Result of an Iterator
2017-01-10 11:50:22	misdreavus	exactly
2017-01-10 11:50:44	misdreavus	you have to iterate to see if you get an Err out of it
2017-01-10 11:51:04	radix-M	oh, good point
2017-01-10 11:51:11	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-10 11:51:16	fylux	Do you know if there is a more idiomatic way to do this: let vec = heap.into_sorted_vec(); 	for i in 0..arr.len() { arr[i]=vec[i]; }
2017-01-10 11:51:17	misdreavus	your signature wants to pre-scan the iterator to ferret out the errors, reset its position, and return that as Ok
2017-01-10 11:51:18	◣	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has quit (Connection closed)
2017-01-10 11:51:21	fylux	arr is a &mut
2017-01-10 11:51:24	fylux	&mut [T]
2017-01-10 11:51:26	◥	vandenoever (oever@moz-8onu2e.adsl-surfen.hetnet.nl) has joined #rust-beginners
2017-01-10 11:51:49	radix-M	that makes it difficult to put a `.cloned()` in there, ergonomically speaking :P
2017-01-10 11:52:12	misdreavus	arr[..arr.len()].copy_from_slice(vec[..arr.len()])
2017-01-10 11:52:20	◣	ubsandroid (ubsan@moz-marvn9.qq8i.7c2i.fb90.2607.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 11:52:23	◣	bkn (bkn@moz-dbkqi7.fios.verizon.net) has quit (Client exited)
2017-01-10 11:52:43	misdreavus	&vec[..arr.len()] (need a ref) but yeah
2017-01-10 11:53:03	◣	erde74 (erde74@moz-49726m.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-10 11:53:31	misdreavus	radix-M: ah, yeah, since i bet the Result itself isn't Clone if the Err isn't
2017-01-10 11:53:36	◥	erde74 (erde74@moz-49726m.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-10 11:53:44	misdreavus	radix-M: otherwise, just slap it on before the collect() :3
2017-01-10 11:53:46	◥	chandlerbing (chandlerbin@moz-d95lac.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-10 11:54:12	misdreavus	fylux: ^ that copy_from_slice line is for you, btw
2017-01-10 11:54:23	fylux	Yes I know but I'm thinking
2017-01-10 11:54:37	fylux	what about this? arr[..l].copy_from_slice(&mut vec[..l]);
2017-01-10 11:54:40	fylux	l is arr.len()
2017-01-10 11:54:51	radix-M	misdreavus: well Result<&Foo, Err>.clone() doesn't return Result<Foo, Err>
2017-01-10 11:54:56	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2017-01-10 11:54:59	misdreavus	fylux: that also works, tho vec doesn't need to be &mut, just & will work
2017-01-10 11:55:08	misdreavus	radix-M: ah, yeah >_>
2017-01-10 11:55:24	radix-M	no biggy
2017-01-10 11:55:28	misdreavus	radix-M: map it in?
2017-01-10 11:55:46	◣	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has quit (Client exited)
2017-01-10 11:55:48	fylux	but if is it not mutable can I change the value of v[i]?
2017-01-10 11:55:49	radix-M	oh, that might be nicer yeah... Result::map you mean?
2017-01-10 11:56:05	◣	ufobat (Martin@moz-8gmjm4.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2017-01-10 11:56:45	misdreavus	fylux: for that line, &vec[..l] will create a new reference, `vec` itself will still be &mut before and after, but copy_from_slice doesn't need it
2017-01-10 11:57:03	misdreavus	radix-M: yeah, both Iterator::map and Result::map
2017-01-10 11:57:30	@mbrubeck	fylux: You can just do `arr.copy_from_slice` without the [..l] since `arr` already has the correct length
2017-01-10 11:58:01	fylux	arr.copy_from_slice(&vec) this looks nicer yes
2017-01-10 11:58:34	radix-M	ok, here's what I got: let combatants: Vec<Creature> = cids.iter().map(|cid| self.app.get_creature(cid).map(Clone::clone)).collect::<Result<_, GameError>>()?
2017-01-10 11:58:36	◥	bkn (bkn@moz-dbkqi7.fios.verizon.net) has joined #rust-beginners
2017-01-10 11:58:37	radix-M	seems to work
2017-01-10 11:58:53	fylux	misdreavus: thank you
2017-01-10 11:59:29	misdreavus	fylux: note that if their lengths aren't the same (which i guess we can assume for this example >_>) then copy_from_slice will panic, but it should work like that
2017-01-10 11:59:41	misdreavus	radix-M: yup, exactly
2017-01-10 11:59:58	fylux	yes I've had that panic with other examples
2017-01-10 12:00:36	◥	vulpes (vulpes@moz-fjsq93.dcb1.8e10.2788.2a02.IP) has joined #rust-beginners
2017-01-10 12:00:37	radix-M	misdreavus: thanks for the advice :)
2017-01-10 12:00:41	misdreavus	(^^)b
2017-01-10 12:00:44	misdreavus	(brb)
2017-01-10 12:01:04	◥	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has joined #rust-beginners
2017-01-10 12:01:13	◥	bjz (bjz@moz-puppgq.tpgi.com.au) has joined #rust-beginners
2017-01-10 12:01:23	◣	ghisvail___ (ghisvail@moz-hvaj2i.ic.ac.uk) has quit (Ping timeout: 121 seconds)
2017-01-10 12:01:24	radix-M	I think I've added itertools dependency to my project and then removed it when I didn't need it about five times now
2017-01-10 12:02:25	◥	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has joined #rust-beginners
2017-01-10 12:02:51	◥	daschl (daschl@moz-kvc.ipu.178.62.IP) has joined #rust-beginners
2017-01-10 12:03:34	◣	angusi (angusai@moz-v8q.do5.71.82.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 12:04:40	fylux	By the way, do you know if there is any way to make a swap with displace in a slice? something like [1,2,3,4,5]; insert(3,0) -> [3,1,2,4,5]
2017-01-10 12:05:14	◣	daschl (daschl@moz-kvc.ipu.178.62.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 12:05:17	◣	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has quit (Client exited)
2017-01-10 12:05:36	◣	bkn (bkn@moz-dbkqi7.fios.verizon.net) has quit (Client exited)
2017-01-10 12:06:01	◥	Ixrec (Ixrec@moz-9bf9ip.dyn.plus.net) has joined #rust-beginners
2017-01-10 12:07:14	◣	fylux (Mibbit@moz-dlv38c.dynamicip.rima-tde.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 12:07:16	◣	Beefki (phobia@moz-t3l42c.il.comcast.net) has quit (Connection closed)
2017-01-10 12:07:17	◣	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has quit (Connection closed)
2017-01-10 12:07:18	◣	Arlefreak (arlefreak@moz-lnb.844.207.189.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 12:07:23	◣	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 12:08:36	◥	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has joined #rust-beginners
2017-01-10 12:08:57	◥	undeadleech (undeadleech@moz-qcfacg.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-10 12:09:18	◥	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-10 12:09:35	◥	sadboy13 (dbishop@moz-doo.oct.130.68.IP) has joined #rust-beginners
2017-01-10 12:09:40	◣	philipp1 (philipp@moz-54056u.reverse.mdcc-fun.de) has quit (Quit: Leaving.)
2017-01-10 12:10:18	◥	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has joined #rust-beginners
2017-01-10 12:11:52	◣	bushidoboy (dbishop@moz-ok6.k7o.229.192.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 12:12:17	◣	erde74 (erde74@moz-49726m.dip0.t-ipconnect.de) has quit (Quit: Verlassend)
2017-01-10 12:12:18	◥	zako (zako@moz-ormegi.dynamicip.rima-tde.net) has joined #rust-beginners
2017-01-10 12:12:41	◥	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has joined #rust-beginners
2017-01-10 12:13:09	◣	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has quit (Connection closed)
2017-01-10 12:13:59	voider1	When someone passes a string to my library which gets send to the API and the API returns an error, which in turn makes my lib panic!, should I just keep the panic or how should I handle it?
2017-01-10 12:15:00	@mbrubeck	darn, fylux left: https://is.gd/GKmmCY
2017-01-10 12:15:45	~steveklabnik	your library shouldn't panic from the API giving you bad values
2017-01-10 12:15:48	~steveklabnik	id say
2017-01-10 12:15:58	voider1	steveklabnik: What should I do?
2017-01-10 12:16:31	@mbrubeck	return the error back to the caller, possibly wrapped or converted to a new error type
2017-01-10 12:16:34	bjorn3	Result<T, E> as return type
2017-01-10 12:17:01	◥	ufobat (Martin@moz-8gmjm4.dyn.telefonica.de) has joined #rust-beginners
2017-01-10 12:17:17	~steveklabnik	yup
2017-01-10 12:18:37	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-10 12:19:16	voider1	steveklabnik: I can only detect it by the API not returning the right JSON, which gives me a JsonNotFound Error (converted from serde_json errors), should I just remove the ? and check if it is JsonNotFound and then return another error?
2017-01-10 12:19:34	◥	ubsandroid_ (ubsan@moz-4kupi9.hifp.h3gc.fb90.2607.IP) has joined #rust-beginners
2017-01-10 12:19:36	◣	humean (humean@moz-sl2fi3.cable.virginm.net) has quit (Quit: WeeChat 1.5)
2017-01-10 12:19:42	◥	humean (humean@moz-sl2fi3.cable.virginm.net) has joined #rust-beginners
2017-01-10 12:20:09	undeadleech	So earlier I asked if macros would be the right way to automatically load every file in a path as a module. But now looking at the macro API that doesn't seem possible. Any hints on what I could do?
2017-01-10 12:20:49	misdreavus	voider1: in my twitter library, i try to parse every response as the error json before trying to parse it as the actual result - if it successfully parses the error out, i return that instead
2017-01-10 12:21:06	voider1	misdreavus: How do you do that?
2017-01-10 12:21:23	bjorn3	undeadleech: compiler plugin
2017-01-10 12:21:35	alreece45	undeadleech: a build script and include!()?
2017-01-10 12:21:38	voider1	bjorn3: Compiler plugins will be replaced by macros 2.0.
2017-01-10 12:21:39	◥	thvdburgt (thvdburgt@moz-htr87p.7kab.l0e4.0982.2001.IP) has joined #rust-beginners
2017-01-10 12:22:03	◣	SklopiS (tobias@moz-rd2dfq.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-10 12:22:39	undeadleech	Oh right just yesterday I did some minor stuff with build scripts that might be possible. I'll look into it thanks. I'm not sure how it would work as a compiler plugin.
2017-01-10 12:22:42	misdreavus	voider1: i have a TwitterErrors struct that derives RustcDecodable, so i just let rustc-serialize attempt to parse it and match on the Ok before handing it off https://github.com/QuietMisdreavus/twitter-rs/blob/master/src/common/response.rs#L356
2017-01-10 12:23:00	◣	cpup (cpup@moz-m24.69g.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 12:23:18	◥	cpup (cpup@moz-m24.69g.218.32.IP) has joined #rust-beginners
2017-01-10 12:23:21	◣	riskable (Could@moz-kr415q.fl.comcast.net) has quit (Connection closed)
2017-01-10 12:23:25	◣	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-10 12:23:36	◣	joehillen (joehillen@moz-2oec0q.members.linode.com) has quit (Quit: quit)
2017-01-10 12:24:29	◥	joehillen (joehillen@moz-236d99.fkdv.ulf6.3c01.2600.IP) has joined #rust-beginners
2017-01-10 12:24:48	misdreavus	voider1: (the parse_response fn below this one takes the String and actually parses it as a Json in whatever FromJson impl is being requested)
2017-01-10 12:25:06	◥	cjhowe (textual@moz-8114ai.hr.cox.net) has joined #rust-beginners
2017-01-10 12:25:10	◣	wallacoloo____ (colin@moz-67r52l.dhcp4.washington.edu) has quit (Client exited)
2017-01-10 12:25:35	◥	morandy (Mibbit@moz-8u2.mj9.182.199.IP) has joined #rust-beginners
2017-01-10 12:26:15	◥	steven807 (grady@moz-16r9o4.ca.comcast.net) has joined #rust-beginners
2017-01-10 12:30:19	◥	newbie (StevePerkin@moz-uns.3sn.132.64.IP) has joined #rust-beginners
2017-01-10 12:30:37	⚡	newbie is now known as StevePerkins
2017-01-10 12:30:40	steven807	Is there a reason why Copy is implemented for some kinds of Range<T> where T: Copy (specifically: RangeFull, RangeTo, RangeToInclusive), but not for Range itself?
2017-01-10 12:31:14	~steveklabnik	as a matter of poicy Iterators don't implemetn Copy even when they could
2017-01-10 12:31:21	◥	kazagistar (Adium@moz-br6.b81.207.205.IP) has joined #rust-beginners
2017-01-10 12:31:26	~steveklabnik	beacuse it's also confusing, but in a different way
2017-01-10 12:31:38	◥	Akien (akien@moz-cr19g5.dyn.telefonica.de) has joined #rust-beginners
2017-01-10 12:32:06	Silphius	What is the best way to implement a trait or method differently for a float vs an integer type parameter
2017-01-10 12:32:10	steven807	But Range isn’t an iterator, it’s just a struct.  I have code like “for i in range { … }; foo(range.end - range.start)”, but range has been moved at that point
2017-01-10 12:32:52	◥	wallacoloo____ (colin@moz-puujts.dhcp4.washington.edu) has joined #rust-beginners
2017-01-10 12:32:55	StevePerkins	In the "Guessing Game" chapter of The Rust Book, there's a part where you're supposed to deliberately cause a compile error by comparing a string to a number without explicit type conversion.  However, I'm finding that the ORIGINAL code version does work after all!  Has the Rust compiler's type inference improved or something since the Book was last updated?
2017-01-10 12:32:56	steven807	I can fix it with clone(), but I’m confused why range isn’t Copy
2017-01-10 12:33:00	~steveklabnik	Range should be an iterator
2017-01-10 12:33:07	~steveklabnik	playbot: for i in 0..5 { }
2017-01-10 12:33:14	⚡	Notice(playbot): ()
2017-01-10 12:33:14	steven807	Hm, not according to https://doc.rust-lang.org/std/ops/struct.Range.html
2017-01-10 12:33:15	~steveklabnik	oh wait, that uses IntoIterator
2017-01-10 12:33:19	~steveklabnik	hmmmm
2017-01-10 12:33:27	bluss	Range implements Iterator for certain <T> sure
2017-01-10 12:33:29	misdreavus	"impl<A> Iterator for Range<A> where A: Step, &'a A: Add<&'a A>, &'a A::Output == A"
2017-01-10 12:33:44	~steveklabnik	StevePerkins: i haven't heard that! I don't think so. care to share which part specifically?
2017-01-10 12:34:03	bluss	steven807: there was a concern about the range being copied implicitly
2017-01-10 12:34:18	◣	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has quit (Client exited)
2017-01-10 12:34:27	StevePerkins	https://doc.rust-lang.org/book/guessing-game.html
2017-01-10 12:34:45	steven807	bluss: I figured there was a reason; I just don’t understand what is it.  (And some of the variations of Range* _do_ implement Copy.)
2017-01-10 12:34:48	◣	bjorn3 (bjorn3@moz-7p2.6ir.81.86.IP) has quit (Connection closed)
2017-01-10 12:34:52	StevePerkins	Hard to give an exact "page number" without a PDF or other such format... but go to https://doc.rust-lang.org/book/guessing-game.html and search for the text string "Whew! This is a big error."
2017-01-10 12:35:06	bluss	steven807: yeah, explicitly those that are not iterators
2017-01-10 12:35:08	◣	rudy (rustedwolf@moz-9bd5uq.dynamic.chello.pl) has quit (A TLS packet with unexpected length was received.)
2017-01-10 12:35:16	steven807	Well, again, Range isn’t an iterator.
2017-01-10 12:35:31	◥	degausser (Thunderbird@moz-midec3.dyn.plus.net) has joined #rust-beginners
2017-01-10 12:35:33	bluss	steven807: Range<T> implements Iterator, so then I think it's fine to call it an iterator
2017-01-10 12:36:15	bluss	for example try (0..10).map(|x| x * x).next()  which uses the method Iterator::map
2017-01-10 12:38:26	steven807	Ah, true, the other Range* types do not implement IntoIterator.  So the thinking is that while Range is _implemented_ as a struct, it should be _thought of_ as an iterator, so then Copy makes less sense.  I wonder whether the implementation (as a struct with pub start/end) should instead be hidden then.
2017-01-10 12:38:27	kazagistar	Silphius: Are you saying one implementation for float-like types and another implementation y for int-like types? You might want to look at the num crate
2017-01-10 12:38:45	StevePerkins	steveklabnik: Nevermind, I seem to have screwed something up.  Probably forgot to save changes in the file, because I'm used to working with an IDE that always saves-on-change.
2017-01-10 12:38:49	steven807	Thanks for the guidance, bluss
2017-01-10 12:39:05	bluss	steven807: almost all Iterator impls are structs, to put it in context
2017-01-10 12:39:09	◥	tm (tom@moz-4bd.9to.255.49.IP) has joined #rust-beginners
2017-01-10 12:39:35	◣	sck_ (sck@moz-d1jm3d.dyn.as47377.net) has quit (Quit: Leaving)
2017-01-10 12:40:49	bluss	(for example the std::slice::Iter struct which is the by reference iterator for slices and vectors)
2017-01-10 12:41:47	~steveklabnik	StevePerkins: ah :)
2017-01-10 12:41:52	~steveklabnik	no worries!
2017-01-10 12:42:41	◣	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has quit (A TLS packet with unexpected length was received.)
2017-01-10 12:43:03	Silphius	@kazagistar Yeah. I'm using the num crate, but implementing the same thing twice, one for Int one for Float gives an error about duplicate impls
2017-01-10 12:44:38	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Connection closed)
2017-01-10 12:44:47	◣	ubsandroid_ (ubsan@moz-4kupi9.hifp.h3gc.fb90.2607.IP) has quit (Quit: <3)
2017-01-10 12:44:55	◥	Gramy (quassel@moz-labbb5.hsi5.kabel-badenwuerttemberg.de) has joined #rust-beginners
2017-01-10 12:45:00	◥	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has joined #rust-beginners
2017-01-10 12:45:03	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-10 12:45:28	◣	beedaddy (martin@moz-c95bnq.dip0.t-ipconnect.de) has quit (Quit: Konversation terminated!)
2017-01-10 12:45:32	◥	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has joined #rust-beginners
2017-01-10 12:46:06	◣	aep (aep@moz-htb.j4r.120.37.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 12:47:13	kazagistar	Silphius: I think the problem is what to do with something that implements both Int and Float? There is nothing stopping such a type from existing. Not 100% sure though.
2017-01-10 12:47:37	◣	duesee (duesee@moz-v99.qk1.147.5.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 12:47:41	◥	aep (aep@moz-htb.j4r.120.37.IP) has joined #rust-beginners
2017-01-10 12:48:41	Silphius	Yeah, that's the issue I believe. Is there a common practice for getting around that? My current strategy has been macros to impl something for all relevant types, but sometimes that's not that feasible
2017-01-10 12:49:02	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Ping timeout: 121 seconds)
2017-01-10 12:49:15	◥	kulshrax (kulshrax@moz-q61.9o0.201.199.IP) has joined #rust-beginners
2017-01-10 12:51:53	misdreavus	unfortunately at the moment that's a hard error, as far as i know :/
2017-01-10 12:52:40	◣	aep (aep@moz-htb.j4r.120.37.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 12:53:08	◥	Jackneill_ (Jackneill@moz-d5febd.pool.digikabel.hu) has joined #rust-beginners
2017-01-10 12:53:17	◣	kulshrax (kulshrax@moz-q61.9o0.201.199.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 12:54:09	kazagistar	Uh, why is this OK? Is it because I didn't initialize the values or because the impls are empty or am I just making some other mistake? https://is.gd/jw78xs
2017-01-10 12:54:31	◣	bjz (bjz@moz-puppgq.tpgi.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 12:54:36	◣	wallacoloo____ (colin@moz-puujts.dhcp4.washington.edu) has quit (Client exited)
2017-01-10 12:54:57	◥	cjm (c@moz-3cj6cb.co.comcast.net) has joined #rust-beginners
2017-01-10 12:55:09	◣	hackebeilchen (Peter@moz-tkduhv.ip-addr.inexio.net) has quit (Connection closed)
2017-01-10 12:55:56	misdreavus	first thought is that those impl blocks for C are on C as a trait object
2017-01-10 12:56:16	◣	Hoff (kvirc@moz-84jd08.dhcp.inet.fi) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2017-01-10 12:56:32	misdreavus	if you make those impls "for T" then the expected error happens https://is.gd/PwI9fm
2017-01-10 12:56:41	kazagistar	oh, derp, so its a syntax error, haha
2017-01-10 12:56:57	misdreavus	not even, it still compiles, yeah?
2017-01-10 12:58:37	space-wizard	is there a way to clone an iterator? I feel like found the solution for this the other day but I can't seem to find it now
2017-01-10 12:58:38	kazagistar	yeah, thats a little strange. Didn't know you could write impls for trait objects like that
2017-01-10 12:59:33	space-wizard	ah by_ref()
2017-01-10 12:59:34	kazagistar	space-wizard: it depends on the nature of the iterator
2017-01-10 12:59:47	◣	Guest27 (textual@moz-7c3v55.rev.dnainternet.fi) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-10 13:00:11	misdreavus	space-wizard: if the iterator type impls Clone you can just go like that, that'll create a duplicate and not affect the position of the original iterator
2017-01-10 13:00:20	◥	MoSal (None@moz-8nalrs.jcsfiberlink.net) has joined #rust-beginners
2017-01-10 13:00:27	space-wizard	yeah I think by_ref is what I want, and I explained what I wanted poorly
2017-01-10 13:00:40	misdreavus	space-wizard: using by_ref() will let you use the iterator for something else and leave the original around, though with its iteration state changed
2017-01-10 13:00:56	misdreavus	okay yeah, since you remembered it quickly enough it's probably what you want
2017-01-10 13:01:12	◣	nahamu (Mibbit@moz-oufpmu.fios.verizon.net) has left #rust-beginners
2017-01-10 13:01:51	space-wizard	i need to make myself a rust cheat sheet or something
2017-01-10 13:02:20	MoSal	Is it possible the language will support Self::SomeEnumVariant(..) in the future?
2017-01-10 13:02:44	MoSal	Right now it fails because the variant is not an associated item.
2017-01-10 13:03:19	◣	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has quit (Connection closed)
2017-01-10 13:03:48	◥	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-10 13:03:48	misdreavus	kazagistar: i think your example works because you can treat the "trait object impls" as if they were being impl'd on different structs
2017-01-10 13:04:08	◥	humean_ (humean@moz-huh.rkq.238.104.IP) has joined #rust-beginners
2017-01-10 13:04:21	◥	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has joined #rust-beginners
2017-01-10 13:04:27	◣	rkuska (rkuska@moz-c9b.85h.82.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 13:04:30	◥	aep (aep@moz-htb.j4r.120.37.IP) has joined #rust-beginners
2017-01-10 13:04:30	◥	bjz (bjz@moz-puppgq.tpgi.com.au) has joined #rust-beginners
2017-01-10 13:04:50	misdreavus	kazagistar: unfortunately if you have an overlapping definition i'm not sure how you'd select the right impl https://is.gd/21fxZu
2017-01-10 13:05:14	◣	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-10 13:05:36	◥	kulshrax (kulshrax@moz-q61.9o0.201.199.IP) has joined #rust-beginners
2017-01-10 13:05:50	◥	ghisvail___ (ghisvail@moz-pd7njm.wifi.virginm.net) has joined #rust-beginners
2017-01-10 13:06:21	◣	steven807 (grady@moz-16r9o4.ca.comcast.net) has quit (Client exited)
2017-01-10 13:06:33	◣	sh4wn (lucas@moz-93hqeb.ricardis.openfiber.nl) has quit (Quit: Leaving)
2017-01-10 13:08:14	◣	humean_ (humean@moz-huh.rkq.238.104.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 13:08:34	◣	aep (aep@moz-htb.j4r.120.37.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 13:09:34	kazagistar	misdreavus: I'm not familiar with the more complex "explicit type acrobatics" so ill take your word for it
2017-01-10 13:09:37	◣	caconym (caconym@moz-klghvh.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-10 13:09:45	misdreavus	:P
2017-01-10 13:10:06	◣	bjz (bjz@moz-puppgq.tpgi.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 13:10:18	misdreavus	if they don't overlap then it works great https://is.gd/ytiImb
2017-01-10 13:10:46	misdreavus	in fact i think you might be able to use this effect to have some kind of inherited method structure >_>
2017-01-10 13:10:50	◣	nadley (quassel@moz-1acdlb.fbx.proxad.net) has quit (Ping timeout: 121 seconds)
2017-01-10 13:12:03	misdreavus	ah, wait, never mind, abusing it for method overloading just makes even more ridiculous errors https://is.gd/LcF5PN
2017-01-10 13:12:20	◥	TechnoCrunch (TechnoCrunc@moz-ant.ip3.100.101.IP) has joined #rust-beginners
2017-01-10 13:12:47	◣	ghisvail___ (ghisvail@moz-pd7njm.wifi.virginm.net) has quit (Ping timeout: 121 seconds)
2017-01-10 13:13:08	kazagistar	candidate #1 is defined in an impl for the type `C<_> + 'static`
2017-01-10 13:13:10	kazagistar	huh
2017-01-10 13:13:13	◥	fe (fe@moz-o4v.kg2.236.2.IP) has joined #rust-beginners
2017-01-10 13:13:43	misdreavus	yeah, that's the thing
2017-01-10 13:14:33	misdreavus	not sure how to wrangle ufcs to make it happy
2017-01-10 13:14:43	◣	morandy (Mibbit@moz-8u2.mj9.182.199.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 13:15:05	kazagistar	Is that the name of the trait object?
2017-01-10 13:15:46	misdreavus	"universal function call syntax" is a way to explicitly say which trait you're pulling a method from
2017-01-10 13:16:02	misdreavus	it's why traits that impl methods with teh same name are allowed to be impl'd on the same type
2017-01-10 13:16:10	misdreavus	https://doc.rust-lang.org/book/ufcs.html
2017-01-10 13:17:17	misdreavus	but something like `<Box<C<Z>> as C<Z as A>>::asdf(&asdf)` is a syntax error because you can't nest "as" conversions like that, apparently https://is.gd/2MwvAy
2017-01-10 13:18:27	kazagistar	No I was just confused by the 'static for a second cause I'm a noob :D
2017-01-10 13:18:32	◣	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has quit (Connection closed)
2017-01-10 13:19:15	◥	humean_ (humean@moz-j5b.rkq.238.104.IP) has joined #rust-beginners
2017-01-10 13:19:43	◥	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has joined #rust-beginners
2017-01-10 13:20:25	◥	itmitica (Mibbit@moz-3vs.p2a.97.78.IP) has joined #rust-beginners
2017-01-10 13:20:33	itmitica	hi
2017-01-10 13:20:40	misdreavus	o/
2017-01-10 13:20:42	itmitica	https://doc.rust-lang.org/book/patterns.html
2017-01-10 13:20:50	itmitica	match c {     x => println!("x: {} c: {}", x, c), }
2017-01-10 13:21:01	itmitica	In other words, x => matches the pattern and introduces a new binding named x. 
2017-01-10 13:21:06	itmitica	how come?
2017-01-10 13:21:13	◥	karinqe (karinqe@moz-ptt.nvt.172.163.IP) has joined #rust-beginners
2017-01-10 13:21:35	misdreavus	are you asking why it shadows the "x" in the outer scope?
2017-01-10 13:21:46	itmitica	no, why is x a match?
2017-01-10 13:21:54	misdreavus	it's a pattern, that matches anything
2017-01-10 13:22:02	itmitica	huh?
2017-01-10 13:22:27	itmitica	where is the new binding hapening?
2017-01-10 13:22:28	kazagistar	its like the underscore in the example above, except you can use it in the expression on the right
2017-01-10 13:22:31	misdreavus	any variable name can be used as a pattern
2017-01-10 13:22:36	⚡	haik is now known as haik|afk
2017-01-10 13:22:45	misdreavus	but it won't compare it to an existing variable
2017-01-10 13:23:00	misdreavus	it'll just say "oh, this is a 'match anything' pattern
2017-01-10 13:23:02	itmitica	ok, where does it write that?
2017-01-10 13:23:02	misdreavus	"
2017-01-10 13:23:13	misdreavus	`x =>`
2017-01-10 13:23:21	◣	humean_ (humean@moz-j5b.rkq.238.104.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 13:23:22	itmitica	no, the docs, i mean
2017-01-10 13:23:27	kazagistar	there is an implicit binding of all variables on the left, that lasts for the entire expression on the right
2017-01-10 13:23:44	misdreavus	"There’s one pitfall with patterns: like anything that introduces a new binding, they introduce shadowing. " immediately before the example you showed
2017-01-10 13:24:19	kazagistar	They don't explicitly say it introduces a new binding I guess.
2017-01-10 13:24:31	◥	sebasmagri (user@moz-hhq.pe4.146.189.IP) has joined #rust-beginners
2017-01-10 13:24:36	◥	nicholasf (nicholasf@moz-jphe0u.iinet.net.au) has joined #rust-beginners
2017-01-10 13:24:39	misdreavus	"In other words, x => matches the pattern and introduces a new binding named x."
2017-01-10 13:24:54	misdreavus	this is the introduction to that concept
2017-01-10 13:25:10	◥	wallacoloo____ (colin@moz-p1i8vr.dhcp4.washington.edu) has joined #rust-beginners
2017-01-10 13:25:11	itmitica	but... how does it match the pattern? a variable is a pattern for another variable? 
2017-01-10 13:25:39	◥	bbsome (Mibbit@moz-l19.sv6.223.2.IP) has joined #rust-beginners
2017-01-10 13:25:47	◣	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has quit (Connection closed)
2017-01-10 13:25:52	◥	bjz (bjz@moz-4e8t75.optusnet.com.au) has joined #rust-beginners
2017-01-10 13:26:02	◥	caconym (caconym@moz-klghvh.wa.comcast.net) has joined #rust-beginners
2017-01-10 13:26:13	misdreavus	a pattern is either a literal like `5`, a range like `5...10`, an enum pattern like `Some(5)`, or a name that the thing gets bound into
2017-01-10 13:26:31	misdreavus	this is useful in combination, like `Some(x)`, but also works by itself for just `x`
2017-01-10 13:26:40	itmitica	match c { x => is equivalent to x = c?
2017-01-10 13:26:40	kazagistar	At the top level, it matches everything (that is unmatched by previous cases). Destructuring is covered in the later section
2017-01-10 13:27:11	misdreavus	itmitica: yes, just for the other side of that match arm, within that match
2017-01-10 13:27:17	◥	rocode (rocode@moz-ddt6to.clsp.qwest.net) has joined #rust-beginners
2017-01-10 13:27:28	misdreavus	it's an "irrefutable pattern"
2017-01-10 13:27:32	itmitica	it makes me not want to use match
2017-01-10 13:27:39	◣	Psilidae (Psilidae@moz-kng1rg.at.cox.net) has quit (Ping timeout: 121 seconds)
2017-01-10 13:27:39	itmitica	what about share, borrow
2017-01-10 13:27:43	kazagistar	`match c { x => expr }` is equivalent to `{ let x = c; expr }`
2017-01-10 13:27:45	itmitica	no rules?
2017-01-10 13:28:01	misdreavus	the match block takes ownership of the value
2017-01-10 13:28:07	misdreavus	it's moved for it
2017-01-10 13:28:07	◥	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has joined #rust-beginners
2017-01-10 13:28:17	itmitica	so c is no  more
2017-01-10 13:28:20	misdreavus	the example dodged it because char and i32 are Copy, which ignore that
2017-01-10 13:28:33	itmitica	ah, ok
2017-01-10 13:28:33	misdreavus	in general, yes, after that match block c is gone
2017-01-10 13:28:46	kazagistar	you can match ref instead, look at the section https://doc.rust-lang.org/book/patterns.html#ref-and-ref-mut
2017-01-10 13:28:55	misdreavus	^ is how you get around that
2017-01-10 13:29:20	misdreavus	it's like matching &c instead
2017-01-10 13:29:43	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2017-01-10 13:29:43	itmitica	kazagistar: match c { x => expr }` is equivalent to `{ let x = c; expr }; thanks for that, but where does it say that in so many words?
2017-01-10 13:29:54	⚡	Emilgardis|zzz is now known as Emilgardis
2017-01-10 13:30:00	Emilgardis	Hey guys!
2017-01-10 13:30:14	◣	caconym (caconym@moz-klghvh.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-10 13:30:25	◥	aep (aep@moz-htb.j4r.120.37.IP) has joined #rust-beginners
2017-01-10 13:31:11	◥	nadley (quassel@moz-1acdlb.fbx.proxad.net) has joined #rust-beginners
2017-01-10 13:31:26	◥	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has joined #rust-beginners
2017-01-10 13:31:29	itmitica	"irrefutable pattern": i have to look this up
2017-01-10 13:31:36	◣	wallacoloo____ (colin@moz-p1i8vr.dhcp4.washington.edu) has quit (Client exited)
2017-01-10 13:31:49	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-10 13:31:49	◣	Exegesis (Exegesis@moz-530n3i.ip.windstream.net) has quit (Connection closed)
2017-01-10 13:31:51	kazagistar	itmitica: to me, the page seems to communicate this (it says it introduces a binding and shadowing, which is exactly what a scope + let do), but that does not mean the documentation is not confusing.
2017-01-10 13:32:05	◥	wallacoloo____ (colin@moz-p1i8vr.dhcp4.washington.edu) has joined #rust-beginners
2017-01-10 13:32:11	◣	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 13:32:30	◣	TheCycoONE (quassel@moz-d4s.1g6.223.162.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 13:32:42	itmitica	kazagistar: yeah, the leap in comprehension was enormous
2017-01-10 13:32:53	misdreavus	it's not that big a deal, just know that there's a difference between something that can be correct all the time (`x` matches anything) or something that can be handed a value where it doesn't match (`Some(x)` can be handed a None which won't match)
2017-01-10 13:34:13	◣	bjz (bjz@moz-4e8t75.optusnet.com.au) has quit (Ping timeout: 121 seconds)
2017-01-10 13:34:14	itmitica	misdreavus: previos chapter, match: Each ‘arm’ of the branch is of the form val => expression
2017-01-10 13:34:24	itmitica	x is not val
2017-01-10 13:34:30	◣	sadboy13 (dbishop@moz-doo.oct.130.68.IP) has quit (Quit: WeeChat 1.6)
2017-01-10 13:34:31	itmitica	x is expression
2017-01-10 13:34:45	itmitica	it should read: Each ‘arm’ of the branch is of the form expression => expression
2017-01-10 13:34:48	itmitica	?
2017-01-10 13:34:58	~steveklabnik	pattern => expression
2017-01-10 13:35:03	misdreavus	correct, it's leaving that detail out before it introduces patterns more fully in the next chapter
2017-01-10 13:35:04	~steveklabnik	is what it _should_ say
2017-01-10 13:35:24	▷	steveklabnik cannot wait until the new book ships
2017-01-10 13:35:28	misdreavus	also yes, x is read as a *pattern* in the match arm
2017-01-10 13:35:34	▷	steveklabnik shipped a new draft of the iterators chapter to support this goal :p
2017-01-10 13:35:35	itmitica	steveklabnik: why pattern?
2017-01-10 13:35:45	~steveklabnik	itmitica: because that's what it is; the left hand side of => is a pattern
2017-01-10 13:35:48	◣	rocode (rocode@moz-ddt6to.clsp.qwest.net) has quit (Quit: Leaving)
2017-01-10 13:35:53	~steveklabnik	"x" is a very simple pattern, but a pattern non-the-less
2017-01-10 13:36:16	itmitica	how is x a pattern for a var named c?
2017-01-10 13:36:19	voider1	misdreavus: I've been away for a while, anyways, I'm looking over your code and we both use different libs, so I'm going to give this a look.
2017-01-10 13:36:27	◣	MoSal (None@moz-8nalrs.jcsfiberlink.net) has left #rust-beginners ("WeeChat 1.6")
2017-01-10 13:36:34	cobrien	it's a pattern for any single variable with no restrictions
2017-01-10 13:36:39	misdreavus	voider1: ah, no worries
2017-01-10 13:36:41	~steveklabnik	itmitica: because a name itself is a pattern that says "match anything and bind it to a variable with this name"
2017-01-10 13:36:55	~steveklabnik	itmitica: this examle in the current book is confusing
2017-01-10 13:36:58	~steveklabnik	so, don't feel too bad
2017-01-10 13:37:03	misdreavus	voider1: the details should be similar with serde, i dunno if you're using something like that tho
2017-01-10 13:37:03	itmitica	x is missing it's declaration/initializatio
2017-01-10 13:37:15	~steveklabnik	that is where it is declared
2017-01-10 13:37:22	~steveklabnik	and it gets initialized to the thing it's matching
2017-01-10 13:37:23	itmitica	is a pattern with no description
2017-01-10 13:37:34	kazagistar	The pattern declares and initializes all variable names it contains
2017-01-10 13:37:37	cobrien	patterns function as initializers in this case yeah
2017-01-10 13:37:49	~steveklabnik	anyway, everyone else is doing a good job of explaining, i will go back to lurking :)
2017-01-10 13:37:50	misdreavus	it's being assigned the thing at the beginning of the match block, "match c"
2017-01-10 13:37:53	◣	nonelement (nonelement@moz-uouu4n.nonelement.com) has quit (Quit: Lost terminal)
2017-01-10 13:37:53	itmitica	if i were to write x; it's valid?
2017-01-10 13:38:03	cobrien	within that match
2017-01-10 13:38:05	itmitica	x;
2017-01-10 13:38:21	voider1	misdreavus: Serde with serde_json, yes. =)
2017-01-10 13:38:43	misdreavus	voider1: are you using any of the derive(Deserialize) or whatever they call it?
2017-01-10 13:38:50	◥	caconym (caconym@moz-klghvh.wa.comcast.net) has joined #rust-beginners
2017-01-10 13:39:50	itmitica	it says match is a replacement for if/else; how this translates to if/else?
2017-01-10 13:39:51	▷	misdreavus hasn't used serde proper yet >_>
2017-01-10 13:40:19	voider1	misdreavus: I do.
2017-01-10 13:40:25	voider1	misdreavus: It's amazing.
2017-01-10 13:40:26	◣	aganezov (aganezov@moz-9lji2h.va.comcast.net) has quit (Quit: )
2017-01-10 13:40:27	cobrien	itmitica: not in all cases, but for instance in cases where you're looking through some ranges:
2017-01-10 13:40:42	cobrien	x if x < 5 => do_a(x),
2017-01-10 13:40:43	misdreavus	voider1: then the concept should be the same, just try to decode it as an error first, then if that doesn't work try the thing being asked for
2017-01-10 13:40:51	cobrien	x if x < 10 => do_b(x),
2017-01-10 13:40:52	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-10 13:41:02	cobrien	etc. and this is used to avoid massive if/else ladders
2017-01-10 13:41:04	◥	rocode (rocode@moz-ddt6to.clsp.qwest.net) has joined #rust-beginners
2017-01-10 13:41:06	itmitica	match c {     x => println!("x: {} c: {}", x, c), }
2017-01-10 13:41:07	◥	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has joined #rust-beginners
2017-01-10 13:41:09	itmitica	this
2017-01-10 13:41:26	cobrien	x and c will be the same in that case
2017-01-10 13:41:30	voider1	misdreavus: So every time I'm making a request, first try to decode as error, if that fails decode it as what I wanted it to be/
2017-01-10 13:41:33	voider1	?*
2017-01-10 13:41:36	misdreavus	voider1: yup
2017-01-10 13:41:41	cobrien	but often match is used on expressions other than bindings
2017-01-10 13:42:05	voider1	misdreavus: But if I'm returning a Result<Message>, how would I do that?
2017-01-10 13:42:20	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-10 13:42:30	◣	aep (aep@moz-htb.j4r.120.37.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 13:42:40	◣	rocode (rocode@moz-ddt6to.clsp.qwest.net) has quit (Quit: Leaving)
2017-01-10 13:42:53	◥	rocode (rocode@moz-ddt6to.clsp.qwest.net) has joined #rust-beginners
2017-01-10 13:42:59	cobrien	so like `match get_num() {    x if x < 0 => do_a(x), x if x == 0 => do_b, x => do_c(x)    }`
2017-01-10 13:43:13	misdreavus	voider1: if it decodes as an error, wrap it in the error enum and `return Err(Error::TelegramError(parsed_error));` or whatver you decide to call it
2017-01-10 13:43:23	cobrien	there the pattern `x` is used to handle every other case while still getting a binding to it
2017-01-10 13:43:33	kazagistar	itmitica: https://is.gd/yOTpKm
2017-01-10 13:43:58	voider1	misdreavus: Right, I'll give it a go.
2017-01-10 13:44:01	voider1	Thanks.
2017-01-10 13:44:09	misdreavus	(^^)b
2017-01-10 13:44:43	misdreavus	kazagistar: itmitica: note that that example only works because &str is Copy, if you make c a non-Copy type (like String, here) you get a "use of moved value" error https://is.gd/u8x65W
2017-01-10 13:45:01	itmitica	kazagistar: apart from the final println, it's pretty much the example in the book? what am i missing?
2017-01-10 13:45:08	◣	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 13:45:22	◥	mib_kye1ou (Mibbit@moz-1a9vuh.retail.telecomitalia.it) has joined #rust-beginners
2017-01-10 13:45:37	◣	mib_kye1ou (Mibbit@moz-1a9vuh.retail.telecomitalia.it) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 13:45:38	◥	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has joined #rust-beginners
2017-01-10 13:46:01	misdreavus	i feel like we've gone down a few rabbit trails and lost the original point
2017-01-10 13:46:04	◣	himi (sjjf@moz-r3ta53.internode.on.net) has quit (Ping timeout: 121 seconds)
2017-01-10 13:46:11	◣	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has quit (Connection closed)
2017-01-10 13:46:15	kazagistar	itmitica: maybe I didn't get your question, but I would suggest you fiddle with that example
2017-01-10 13:46:35	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-10 13:46:38	itmitica	c: the expression; x the "magic" pattern: initialization+binding
2017-01-10 13:46:48	◥	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has joined #rust-beginners
2017-01-10 13:47:05	itmitica	c: the expression; x the "magic" pattern: declration+binding
2017-01-10 13:47:17	itmitica	why the magic?
2017-01-10 13:47:28	misdreavus	because that's how patterns work, they are the magic
2017-01-10 13:47:35	itmitica	:)
2017-01-10 13:47:53	misdreavus	match arms, "let" statements, "if let" statements, function parameters, all use patterns
2017-01-10 13:47:58	misdreavus	it's the same mechanism
2017-01-10 13:48:09	itmitica	but.. why? (in ryan reynolds voice)
2017-01-10 13:48:11	misdreavus	"while let", forgot that one
2017-01-10 13:48:17	kazagistar	itmitica: that case is trivial. You wouldn't use it like that. The cases later in the page are more realistic: deconstructing values, or branching based on values
2017-01-10 13:48:38	~steveklabnik	it makes the language consistent overall
2017-01-10 13:48:39	cobrien	itmitica: convenience and readability, for the most part
2017-01-10 13:48:42	~steveklabnik	patterns do the same thing everywhere
2017-01-10 13:48:55	~steveklabnik	rahter than special casing assignment, arguments, and match
2017-01-10 13:48:58	misdreavus	because it allows you to destructure tuples and structs, to take values out of enum variants
2017-01-10 13:49:00	~steveklabnik	and whatever else
2017-01-10 13:49:21	misdreavus	also ^, this is a matter of consistency
2017-01-10 13:49:34	◥	aep (aep@moz-htb.j4r.120.37.IP) has joined #rust-beginners
2017-01-10 13:49:56	cobrien	yeah consistency is the root of the things I mentioned as well
2017-01-10 13:49:56	itmitica	when destructuring, there's a clear intent to create a binding, for match the intent is to... match
2017-01-10 13:49:58	kazagistar	often, a destructuring match would desugar to some horribly unreadable if statements
2017-01-10 13:50:16	cobrien	itmitica: the intent is to match and then do something because of that match
2017-01-10 13:50:23	misdreavus	itmitica: not true, you can also destructure using a match
2017-01-10 13:50:30	misdreavus	itmitica: it's later on in that chapter, even
2017-01-10 13:50:31	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-10 13:50:38	cobrien	if you don't care about what you're destructuring you can wildcard it out with _
2017-01-10 13:50:45	◣	rocode (rocode@moz-ddt6to.clsp.qwest.net) has quit (Quit: Leaving)
2017-01-10 13:50:55	◥	rocode (rocode@moz-ddt6to.clsp.qwest.net) has joined #rust-beginners
2017-01-10 13:51:10	misdreavus	it's a mechanism that allows the language to be incredibly expressive with fewer lines than would be necessary without it
2017-01-10 13:51:11	◣	xiinotulp (q@moz-s5gkp8.dynamic.totbb.net) has quit (Quit: Leaving)
2017-01-10 13:51:24	itmitica	so, thank you for your patience, back to reading :)
2017-01-10 13:51:37	kazagistar	itmitica: the variables are wildcards of the match, but ones that you can use in the expression
2017-01-10 13:51:48	◣	humean (humean@moz-sl2fi3.cable.virginm.net) has quit (A TLS packet with unexpected length was received.)
2017-01-10 13:52:18	itmitica	kazagistar: wildcards, i'll remeber that
2017-01-10 13:53:01	◥	steven807 (grady@moz-fg2bib.ca.comcast.net) has joined #rust-beginners
2017-01-10 13:54:22	◣	kulshrax (kulshrax@moz-q61.9o0.201.199.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-10 13:54:31	◥	fuogo (Mibbit@moz-ke49vt.PUBLIC.monkeybrains.net) has joined #rust-beginners
2017-01-10 13:54:43	◥	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-10 13:54:44	◣	fuogo (Mibbit@moz-ke49vt.PUBLIC.monkeybrains.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 13:55:26	◥	humean_ (humean@moz-j5b.rkq.238.104.IP) has joined #rust-beginners
2017-01-10 13:56:20	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-10 13:56:45	◣	fe (fe@moz-o4v.kg2.236.2.IP) has quit (Connection closed)
2017-01-10 13:56:56	◥	wallacoloo_____ (colin@moz-q7l6m1.dhcp4.washington.edu) has joined #rust-beginners
2017-01-10 13:57:06	◥	himi (sjjf@moz-r3ta53.internode.on.net) has joined #rust-beginners
2017-01-10 13:57:08	voider1	Should my library provide error handling for when the API would be down
2017-01-10 13:57:10	voider1	?
2017-01-10 13:57:16	◥	fe (fe@moz-47g5bc.q4bj.rjaa.0b07.2001.IP) has joined #rust-beginners
2017-01-10 13:57:27	◥	SiIky (SiIky@moz-dbrsl2.5ghr.hl2k.08a0.2001.IP) has joined #rust-beginners
2017-01-10 13:57:44	◣	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-10 13:57:47	◣	humean_ (humean@moz-j5b.rkq.238.104.IP) has quit (Quit: WeeChat 1.6)
2017-01-10 13:57:51	misdreavus	i handle that just as whatever error i get from hyper
2017-01-10 13:57:52	◥	humean (humean@moz-j5b.rkq.238.104.IP) has joined #rust-beginners
2017-01-10 13:58:02	◣	wallacoloo____ (colin@moz-p1i8vr.dhcp4.washington.edu) has quit (Ping timeout: 121 seconds)
2017-01-10 13:58:03	◣	denisg (denisg@moz-k19q37.dip0.t-ipconnect.de) has quit (Client exited)
2017-01-10 13:58:06	◣	mwoodruff (mwoodruff@moz-b97lm9.pa.comcast.net) has left #rust-beginners
2017-01-10 13:58:20	voider1	I see.
2017-01-10 13:58:31	voider1	Well, I guess I'd get a network error too before that.
2017-01-10 13:59:01	◣	IslandUsurper (lyle@moz-f0fadd.rnfo.mfth.0306.2602.IP) has left #rust-beginners
2017-01-10 14:00:13	◣	Kreest__ (Kreest@moz-kpfgh6.globonet.hu) has quit (Connection closed)
2017-01-10 14:00:17	caconym	voider1: there's probably an argument to be made that errors directly from hyper are easier to understand than whatever interpretation of them you would provide
2017-01-10 14:00:35	caconym	voider1: if you want your own error types too, you could have an enum with one member that wraps hyper errors, maybe..
2017-01-10 14:00:36	◥	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-10 14:00:41	◥	humean_ (humean@moz-sl2fi3.cable.virginm.net) has joined #rust-beginners
2017-01-10 14:00:55	voider1	caconym: I'm using reqwest and I wrap the reqwest error, reqwest wraps Hyper errors.
2017-01-10 14:00:58	◣	humean_ (humean@moz-sl2fi3.cable.virginm.net) has quit (Quit: WeeChat 1.6)
2017-01-10 14:00:58	◥	willglynn (willglynn@moz-e0j0dn.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-10 14:01:03	◥	humean_ (humean@moz-sl2fi3.cable.virginm.net) has joined #rust-beginners
2017-01-10 14:01:10	misdreavus	i also have a catch-all error for non-200 status codes, in case i get one that doesn't also return an error structure
2017-01-10 14:01:18	◣	fe (fe@moz-47g5bc.q4bj.rjaa.0b07.2001.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:01:44	◣	bschaefer (bschaefer@moz-6rr.8im.18.24.IP) has quit (Quit: Leaving)
2017-01-10 14:01:58	◣	humean (humean@moz-j5b.rkq.238.104.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:02:10	◣	tm (tom@moz-4bd.9to.255.49.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:02:23	◣	humean_ (humean@moz-sl2fi3.cable.virginm.net) has quit (Quit: WeeChat 1.6)
2017-01-10 14:02:29	◥	humean (humean@moz-sl2fi3.cable.virginm.net) has joined #rust-beginners
2017-01-10 14:03:04	◥	vadimcn (uid46608@moz-9ioufh.tooting.irccloud.com) has joined #rust-beginners
2017-01-10 14:03:10	◣	itmitica (Mibbit@moz-3vs.p2a.97.78.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 14:03:23	◣	danielbodart (dan@moz-jkbsnn.bodar.com) has quit (Ping timeout: 121 seconds)
2017-01-10 14:03:47	◣	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-10 14:04:32	◣	davs (davs@moz-8afd79.bratislava.digicable.sk) has quit (Ping timeout: 121 seconds)
2017-01-10 14:04:43	voider1	misdreavus: Me too.
2017-01-10 14:04:44	voider1	=)
2017-01-10 14:04:53	misdreavus	:3
2017-01-10 14:05:45	◣	Aankhen`` (notasquid@moz-mst.0do.7.27.IP) has quit (Quit: Sorry, was AFK)
2017-01-10 14:06:30	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-10 14:06:39	◥	davs (davs@moz-nsm9ed.bratislava.digicable.sk) has joined #rust-beginners
2017-01-10 14:07:34	◣	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has quit (Quit: Leaving)
2017-01-10 14:08:17	◥	rkuska (rkuska@moz-c9b.85h.82.95.IP) has joined #rust-beginners
2017-01-10 14:08:56	◣	karinqe (karinqe@moz-ptt.nvt.172.163.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:09:03	voider1	misdreavus: I'm doing it like this currently http://prntscr.com/du0m5a
2017-01-10 14:09:33	misdreavus	looks good to me (^^)b
2017-01-10 14:09:39	voider1	Thanks.
2017-01-10 14:09:40	voider1	=)
2017-01-10 14:10:05	willglynn	am I misunderstanding something? https://is.gd/xBRG2r -- read_at() needs a trait, and rustc volunteers "candidate #1: `use std::os::ext::fs::FileExt;`", but when I `use std::os::ext::fs::FileExt;`, compilation fails with "could not find `ext` in `os`" *and* it again suggests I use that trait
2017-01-10 14:10:45	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-10 14:10:51	@mbrubeck	willglynn: Try `std::os::unix::fs::FileExt`
2017-01-10 14:11:05	◣	vulpes (vulpes@moz-fjsq93.dcb1.8e10.2788.2a02.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:11:13	@mbrubeck	willglynn: I think the suggested path is a private one, and it's a bug that rustc suggests that instead of the public export
2017-01-10 14:11:24	◣	degausser (Thunderbird@moz-midec3.dyn.plus.net) has quit (Ping timeout: 121 seconds)
2017-01-10 14:11:29	willglynn	ah, is that a known bug, or something I should report?
2017-01-10 14:11:38	@Manishearth	please report
2017-01-10 14:11:44	willglynn	on it, thanks
2017-01-10 14:11:45	@Manishearth	we'll coalesce the bug if it's known
2017-01-10 14:12:14	@mbrubeck	willglynn: Looks like it's reported as https://github.com/rust-lang/rust/issues/26454
2017-01-10 14:12:19	◣	rkuska (rkuska@moz-c9b.85h.82.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:13:04	◣	humean (humean@moz-sl2fi3.cable.virginm.net) has quit (Quit: WeeChat 1.6)
2017-01-10 14:13:46	◥	davs_ (davs@moz-nsm9ed.bratislava.digicable.sk) has joined #rust-beginners
2017-01-10 14:13:53	◥	jbomo (dkd@moz-80j.dj5.155.47.IP) has joined #rust-beginners
2017-01-10 14:13:55	◣	jbomo (dkd@moz-80j.dj5.155.47.IP) has quit (Quit: )
2017-01-10 14:14:47	saintdev	Can anyone familiar with gtk-rs tell me how wrong what I'm doing is? https://www.irccloud.com/pastebin/EwG1lt0F/
2017-01-10 14:15:11	◥	Binero (Binero@moz-tqrl52.sji7.g8ie.a03f.2a02.IP) has joined #rust-beginners
2017-01-10 14:15:39	voider1	misdreavus: http://prntscr.com/du0pa9 what do you think?
2017-01-10 14:16:25	◥	degausser (Thunderbird@moz-midec3.dyn.plus.net) has joined #rust-beginners
2017-01-10 14:17:57	misdreavus	voider1: looks good, if you can be sure that "ok" is given for every response, and "description" is given every time it's false
2017-01-10 14:18:50	◣	davs_ (davs@moz-nsm9ed.bratislava.digicable.sk) has quit (Quit: Lost terminal)
2017-01-10 14:20:11	◣	jbradberry (jrb@moz-mrjdh9.rlghnc.sbcglobal.net) has quit (Ping timeout: 121 seconds)
2017-01-10 14:20:27	◣	degausser (Thunderbird@moz-midec3.dyn.plus.net) has quit (Ping timeout: 121 seconds)
2017-01-10 14:20:49	◥	JelteF (Mibbit@moz-pupjjl.upc-d.chello.nl) has joined #rust-beginners
2017-01-10 14:21:56	◣	alx741 (alx741@moz-4aj.fgh.107.200.IP) has quit (Client exited)
2017-01-10 14:22:30	voider1	misdreavus: AFAIK it is, and otherwise it will return the JsonNotFound.
2017-01-10 14:23:05	◥	alx741 (alx741@moz-4aj.fgh.107.200.IP) has joined #rust-beginners
2017-01-10 14:23:20	misdreavus	then that's probably good
2017-01-10 14:23:27	JelteF	I'm trying to implement a generic Mul trait for structs that contain different types:
2017-01-10 14:23:29	JelteF	https://is.gd/fbjbaQ
2017-01-10 14:23:37	misdreavus	it's exactly what i did early on with the InvalidResponse variant
2017-01-10 14:23:44	JelteF	any clue on how I can fix this error
2017-01-10 14:24:28	◥	mgattozzi (mgattozzi@moz-t0tk4q.cable.rcn.com) has joined #rust-beginners
2017-01-10 14:24:36	◥	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-10 14:24:52	JelteF	by changing the factor to 10i32 or 10u32 I can force two different errors
2017-01-10 14:25:28	◣	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has quit (Quit: Connection closed for inactivity)
2017-01-10 14:25:35	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2017-01-10 14:25:35	undeadleech	I'm having a little trouble with compiler plugins right now. In the docs it says "ExtCtxt.expr_str" takes a span and an InternedString, but my code is raising these errors: http://i.imgur.com/RRLR7ck.png . To me this doesn't make sense at all. I upgraded everything to latest nightly. Any ideas? Might there be version conflicts?
2017-01-10 14:26:06	◣	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-10 14:26:20	◣	aep (aep@moz-htb.j4r.120.37.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:27:04	blashyrk	can we bind all (multiple) patterns like so:  "p @ A | B | C | D..." this only seems to bind A
2017-01-10 14:27:11	JelteF	undeadleech: I'm now converting my compiler plugin lib to use macros 1.1, so far it's been much easier and lots less type less type conversions
2017-01-10 14:28:10	◥	sssilver_ (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-10 14:28:12	undeadleech	Hmm does that work for everything? I believe the issue is that Symbol is in syntax::symbol::Symbol but not yet sure if that's the correct one. And that would probably mean something is buggy?
2017-01-10 14:28:16	FreeFull	JelteF: That's because u32 doesn't impl Mul<i32> and vice versa
2017-01-10 14:29:09	rkruppe	undeadleech: consider asking in #rustc
2017-01-10 14:29:55	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:29:59	FreeFull	JelteF: What do you want it to do for negative numbers anyway?
2017-01-10 14:31:34	undeadleech	I'm not sure if this is the right way of doing this right now. So I'll probably try to make it work before blaming the #rustc people for my failure. :D
2017-01-10 14:32:06	breeden_	rustc-plugins isn't your typical #rust-beginners question :P
2017-01-10 14:32:14	breeden_	(not that we care)
2017-01-10 14:32:17	JelteF	undeadleech: The quote lib, really helps a lot with readability (for my code at least). I'm implementing derives for traits like From, Add, Mul and other arithemitic traits.
2017-01-10 14:32:32	◣	hexagoxel (hexagoxel@moz-rb2hnp.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2017-01-10 14:32:47	◥	bschaefer (bschaefer@moz-sr39tv.wa.comcast.net) has joined #rust-beginners
2017-01-10 14:33:20	JelteF	FreeFull: Good one, but the same happens when using i64 and i32
2017-01-10 14:33:25	undeadleech	I'm not sure what "the quote lib" is.
2017-01-10 14:33:32	breeden_	undeadleech: http://manishearth.github.io/rust-internals-docs/syntax/ext/base/struct.ExtCtxt.html#method.expr_str
2017-01-10 14:33:33	kazagistar	dunno, I tend to see simple syntax questions in #rust and macros questions in #rust-beginners :P
2017-01-10 14:33:42	breeden_	undeadleech: are you sure you aren't calling this method?
2017-01-10 14:33:44	JelteF	undeadleech: https://github.com/dtolnay/quote
2017-01-10 14:33:53	◣	undeadleech (undeadleech@moz-qcfacg.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.6)
2017-01-10 14:33:57	◥	undeadleech (undeadleech@moz-qcfacg.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-10 14:34:13	FreeFull	JelteF: You could have it take  T: Into<i64> instead
2017-01-10 14:34:20	breeden_	undeadleech: also if you don't mind us asking, what are you working on?
2017-01-10 14:34:23	FreeFull	And call let rhs = rhs.into(); inside the impl
2017-01-10 14:35:04	◥	tm (tom@moz-4bd.9to.255.49.IP) has joined #rust-beginners
2017-01-10 14:35:06	JelteF	FreeFull: sounds like that could work indeed
2017-01-10 14:35:38	undeadleech	I'm making a wayland bar right now. And I'd like users to be able to define elements as rust modules. So they can just put rust files in a "modules" directory and they would automatically get loaded during compilation. So they could specify a "date" block and that would load the "render" method from the "date" module.
2017-01-10 14:36:03	undeadleech	And thanks for that doc breeden I only found one weird v1.1.0 version with my search engine.
2017-01-10 14:36:18	FreeFull	JelteF: For example https://is.gd/AsL22Z
2017-01-10 14:36:19	undeadleech	Even tho I was able to figure this much out just reading the rust source :P
2017-01-10 14:36:20	JelteF	yeah, that's super outdated I had the same issue
2017-01-10 14:36:29	◥	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-10 14:36:56	undeadleech	And I'm not using quote. Never heard about it.
2017-01-10 14:37:27	breeden_	undeadleech: it's unclear if Macros 1.1 would do what you want then if i understand you correctly
2017-01-10 14:38:20	breeden_	undeadleech: but wouldn't a build script work for that? hmm
2017-01-10 14:38:56	breeden_	perhaps declare the modules declaratively in a toml, and place the contents in the modules/ dir.  Then the buildscript could codegen?
2017-01-10 14:39:18	◥	benspaulding (benspauldin@moz-1n8.64p.203.159.IP) has joined #rust-beginners
2017-01-10 14:39:52	undeadleech	Yeah I got both build script and compiler plugin as answer. I'm doing compiler plugin right now since I don't know how I would do that with a buildscript.
2017-01-10 14:40:02	breeden_	undeadleech: if you are using syntax to write codegen, then I would also suggest looking into quote.  It's basically a templating library for rust code, in rust code.
2017-01-10 14:40:04	◣	tm (tom@moz-4bd.9to.255.49.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:40:22	◣	Akien (akien@moz-cr19g5.dyn.telefonica.de) has quit (A TLS packet with unexpected length was received.)
2017-01-10 14:40:23	breeden_	!crate quote
2017-01-10 14:40:23	rustbot	quote (0.3.10) - Quasi-quoting macro quote!(...) -> https://crates.io/crates/quote <https://docs.rs/crate/quote>
2017-01-10 14:41:13	undeadleech	I figured out how to do it with a compiler plugin now tho :P
2017-01-10 14:41:15	◣	StevePerkins (StevePerkin@moz-uns.3sn.132.64.IP) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2017-01-10 14:41:26	breeden_	lol, well why not
2017-01-10 14:41:36	◥	stephanbuys1 (Adium@moz-srkq2f.telkomadsl.co.za) has joined #rust-beginners
2017-01-10 14:41:53	◥	ghisvail___ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-10 14:42:04	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-10 14:42:12	◣	cjhowe (textual@moz-8114ai.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 14:42:22	breeden_	but if you ever find yourself unhappy with the situation, or that's blocking for you transitioning to stable-rust, then now you have another avenue to checkout
2017-01-10 14:42:47	undeadleech	I just have to use "include!(compile_plugin!())" and it automatically loads a file as source code. Yay. Now I only have to figure out how to make it possible for any amount of strs returned by the macro. I'll figure something out. Not sure if this is good practice tho, what do you think?
2017-01-10 14:43:21	◥	durka42 (durka42@moz-itei31.pa.comcast.net) has joined #rust-beginners
2017-01-10 14:43:35	undeadleech	I'll check out quote I guess.
2017-01-10 14:43:37	breeden_	idk :)
2017-01-10 14:43:41	◣	stephanbuys (Adium@moz-sam0om.telkomadsl.co.za) has quit (Ping timeout: 121 seconds)
2017-01-10 14:43:41	LambdaComplex	undeadleech: To be honest, having to recompile your bar to modify it sounds....frustrating
2017-01-10 14:43:57	◥	cjhowe (textual@moz-8114ai.hr.cox.net) has joined #rust-beginners
2017-01-10 14:44:03	breeden_	you might have the same issues using `quote!()` 
2017-01-10 14:44:29	breeden_	LambdaComplex: and if it's dynamically linked? (so that it's a small recompile)
2017-01-10 14:44:56	breeden_	idk, I wish more things used compiled plugins instead of scripting languages to make modifications
2017-01-10 14:45:05	breeden_	for plugins at least
2017-01-10 14:45:08	◥	tm (tom@moz-4bd.9to.255.49.IP) has joined #rust-beginners
2017-01-10 14:45:08	undeadleech	Right now it uses stdin. But it's troublesome for a few reasons. So I thought about making modules like "date" or "workspace" methods (language doesn't really matter) and configuration can be done just using a config file.
2017-01-10 14:45:44	◣	hardenedapple (hardenedapp@moz-cu794c.range86-172.btcentralplus.com) has quit (Quit: WeeChat 1.6)
2017-01-10 14:46:18	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-10 14:46:25	LambdaComplex	undeadleech: Hm, have I shown you Admiral before?
2017-01-10 14:46:32	undeadleech	So you can always change stuff around the way you want. You probably can just have one module like "command("echo 123")" which would be changable only using the config but I don't see a big problem with the modules needing recompilation. If you have a better idea I'm open to it tho.
2017-01-10 14:46:33	LambdaComplex	breeden_: Still an additional step
2017-01-10 14:46:39	breeden_	what is Admiral?
2017-01-10 14:46:53	LambdaComplex	https://github.com/sector-f/admiral
2017-01-10 14:46:56	LambdaComplex	(disclaimer: i wrote it)
2017-01-10 14:47:12	LambdaComplex	It uses a toml file to configure the output (which is output on stdout)
2017-01-10 14:47:26	LambdaComplex	So that it can then be piped into lemonbar or dzen2 or i3bar or whatever
2017-01-10 14:47:29	undeadleech	Yeah you have. The problem is stdout itself tho.
2017-01-10 14:47:42	◣	thvdburgt (thvdburgt@moz-htr87p.7kab.l0e4.0982.2001.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:47:46	◣	DusXMT (dusxmt@moz-09f.p1s.12.195.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 14:48:00	◥	DusXMT (dusxmt@moz-09f.p1s.12.195.IP) has joined #rust-beginners
2017-01-10 14:48:01	◣	alx741 (alx741@moz-4aj.fgh.107.200.IP) has quit (Client exited)
2017-01-10 14:48:02	breeden_	LambdaComplex: neat program
2017-01-10 14:48:02	LambdaComplex	What about stdout, exactly?
2017-01-10 14:48:04	JelteF	breeden_ undeadleech: the main advantage of quote is that it's almost stable and compiler plugins arent really at all
2017-01-10 14:48:06	LambdaComplex	breeden_: Thanks!
2017-01-10 14:48:19	◥	alx741 (alx741@moz-4aj.fgh.107.200.IP) has joined #rust-beginners
2017-01-10 14:48:32	breeden_	JelteF: yup, quote! is quite fantastic
2017-01-10 14:48:34	JelteF	my lib was broken because some rust internals changed
2017-01-10 14:48:49	breeden_	like syn! and quote! is a game changer
2017-01-10 14:49:15	undeadleech	There were a bunch of problems with both stdin and config files. Both aren't really a solution imo. And a weird fusion would just confuse people. I don't have a solution yet but I wanted to test out if it is possible to load files during compilation like this.
2017-01-10 14:49:23	JelteF	what's the syn! macro?
2017-01-10 14:49:30	breeden_	sorry, no macro
2017-01-10 14:49:34	breeden_	!crate syn
2017-01-10 14:49:34	rustbot	syn (0.10.6) - Nom parser for Rust source code -> https://crates.io/crates/syn <https://docs.rs/crate/syn>
2017-01-10 14:50:05	voider1	What would be a good name for something that handles commands and normal messages and couples them to functions? 
2017-01-10 14:50:13	undeadleech	The bar itself actually works pretty well already. It's just these polishing things that I want to get right but they are creating a lot of problems.
2017-01-10 14:51:37	@mbrubeck	voider1: "Dispatcher" maybe?
2017-01-10 14:51:55	breeden_	dispatch is a good name (iiuc)
2017-01-10 14:52:29	◣	ghisvail___ (ghisvail@moz-8k797h.cable.virginm.net) has quit (Client exited)
2017-01-10 14:52:38	voider1	Python-telegram-bot uses that name too, I actually don't want to copy all their names since I already have Updater and Bot.
2017-01-10 14:52:46	futile	LambdaComplex: Admiral looks cool :)
2017-01-10 14:52:55	undeadleech	LambdaComplex: did you ever get anywhere with your bar ideas?
2017-01-10 14:53:32	svmnotn	how do I implement a trait for a type like `Fn(String) -> String` ?
2017-01-10 14:54:06	pingveno	svmnotn: That just means a function or closure that takes a String and returns a String
2017-01-10 14:54:42	pingveno	Well, it's a little more complex than that, but that's the gist of it.
2017-01-10 14:54:44	svmnotn	yes, I want someone to be able to write send(|s| s) 
2017-01-10 14:54:56	svmnotn	send being a function in a trait I defined
2017-01-10 14:55:14	voider1	mbrubeck: Do you have another name for it, or do you think that that's the definitive best name?
2017-01-10 14:55:18	◣	bbsome (Mibbit@moz-l19.sv6.223.2.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 14:55:26	pingveno	fn send(func: F) where F: Fn(String) -> String;
2017-01-10 14:55:46	@mbrubeck	should probably be `fn send<F>(func: F) where F: Fn(String) -> String`
2017-01-10 14:55:52	@mbrubeck	(added the <F>)
2017-01-10 14:56:07	pingveno	mbrubeck: Oh yeah, forgot that.
2017-01-10 14:56:24	◥	bbirc (Mibbit@moz-l19.sv6.223.2.IP) has joined #rust-beginners
2017-01-10 14:56:29	vandenoever	ive a Box<MyTrait> which i'd like to check at runtime if it is of a struct MyStruct and if so, assign another MyStruct value to it
2017-01-10 14:56:31	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Ping timeout: 121 seconds)
2017-01-10 14:57:05	svmnotn	yes you see... thing is I don't want to change the signature of send
2017-01-10 14:57:23	svmnotn	I want something like http://hyper.rs/hyper/v0.9.12/hyper/server/trait.Handler.html where it can be a function or it can be a struct
2017-01-10 14:57:33	vandenoever	i guess that is where Box:: downcast comes in
2017-01-10 14:58:04	svmnotn	the issue is I am not aware of any crate that does that, and the closest is hyper which doesn't ask for a return
2017-01-10 14:58:30	◣	sssilver_ (textual@moz-bac.97e.122.38.IP) has quit (Connection closed)
2017-01-10 14:58:51	◥	smag-M (smagmatrix@moz-905bpb.openmarket.com) has joined #rust-beginners
2017-01-10 14:59:19	@mbrubeck	svmnotn: If you have a `Handler` trait that's implemented for closures and also other types, like in Hyper, then you would write `fn send<T>(handler: T) where T: Handler`
2017-01-10 15:00:32	@mbrubeck	implementing it for closures looks like this: http://hyper.rs/hyper/v0.9.12/src/hyper/src/server/mod.rs.html#447-451
2017-01-10 15:00:55	svmnotn	mbrubeck, yes, that is what I'm looking at
2017-01-10 15:01:00	svmnotn	and what I want
2017-01-10 15:01:22	svmnotn	execpt my question is, how do I tell rust that I want that clousure to have a return type?
2017-01-10 15:01:53	@mbrubeck	svmnotn: `where F: Fn(Foo, Bar) -> Baz`
2017-01-10 15:02:09	◣	niklasad1 (niklasad1@moz-1l8g7e.cust.bredbandsbolaget.se) has quit (Ping timeout: 121 seconds)
2017-01-10 15:02:55	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 15:03:35	◣	ghosss (textual@moz-rr8npu.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 15:03:39	◣	sebasmagri (user@moz-hhq.pe4.146.189.IP) has quit (Quit: ERC (IRC client for Emacs 25.1.1))
2017-01-10 15:03:40	◣	zhirr (bjowi@moz-mr87dm.cust.bahnhof.se) has quit (Quit: WeeChat 1.6)
2017-01-10 15:04:16	svmnotn	mbrubeck, error: expected one of `+`, `,`, `::`, or `{`, found `->`
2017-01-10 15:04:40	svmnotn	"impl<F> Sender for F where F: Fn<String> -> String" is what I have
2017-01-10 15:04:58	◥	psychoslave________ (msg@moz-0t3ggi.fbx.proxad.net) has joined #rust-beginners
2017-01-10 15:05:07	durka42	Fn(String) -> String
2017-01-10 15:05:11	◥	ssebastianj (ssebastianj@moz-8n8fph.telecom.net.ar) has joined #rust-beginners
2017-01-10 15:05:35	svmnotn	facepalm
2017-01-10 15:05:37	svmnotn	thanks
2017-01-10 15:05:51	◣	Jackneill_ (Jackneill@moz-d5febd.pool.digikabel.hu) has quit (A TLS packet with unexpected length was received.)
2017-01-10 15:06:00	svmnotn	I'm just going to.... sit here... for a bit....
2017-01-10 15:06:04	◣	swaroopch (swaroopch@moz-4a9l7i.static.monkeybrains.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-10 15:07:16	cobrien	don't feel bad, we've all been there :D
2017-01-10 15:07:19	svmnotn	mbrubeck, durka42 thank you both...
2017-01-10 15:07:45	svmnotn	yup... mistaking a '<' for a '(' ... no more code for me today....
2017-01-10 15:08:43	◣	EoF (EoF@moz-h6i7lj.dynamic.kabel-deutschland.de) has quit (Ping timeout: 121 seconds)
2017-01-10 15:09:18	◣	Gramy (quassel@moz-labbb5.hsi5.kabel-badenwuerttemberg.de) has quit (Quit: Quit)
2017-01-10 15:09:19	◣	cjhowe (textual@moz-8114ai.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 15:09:23	◥	bkn (bkn@moz-dbkqi7.fios.verizon.net) has joined #rust-beginners
2017-01-10 15:09:59	◥	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has joined #rust-beginners
2017-01-10 15:11:10	cobrien	hey all, are there any good libraries that make loading complex binary formats less of a pain?
2017-01-10 15:11:48	cobrien	I've written a working Quake 1 BSP loader but it's extremely verbose with all the read_u32::<LittleEndian>() calls and whatnot
2017-01-10 15:12:45	cobrien	I was looking at serde but it seems like serious overkill / not the right use case
2017-01-10 15:13:17	tilpner	!crate nom
2017-01-10 15:13:17	rustbot	nom (2.0.1) - A byte-oriented, zero-copy, parser combinators library -> https://crates.io/crates/nom <https://docs.rs/crate/nom>
2017-01-10 15:13:56	cobrien	tilpner: ooh this looks promising. thanks!
2017-01-10 15:13:59	◣	willglynn (willglynn@moz-e0j0dn.hfc.comcastbusiness.net) has quit (Client exited)
2017-01-10 15:14:10	tilpner	Also look at the mp4 parsing example with nom
2017-01-10 15:14:17	tilpner	https://github.com/Geal/nom/blob/master/tests/mp4.rs
2017-01-10 15:15:38	cobrien	oh that is so much cleaner
2017-01-10 15:15:49	◣	undeadleech (undeadleech@moz-qcfacg.dip0.t-ipconnect.de) has quit (Connection closed)
2017-01-10 15:16:51	◥	remexre (remexre@moz-qpjn0u.rqf4.7v0m.0444.2601.IP) has joined #rust-beginners
2017-01-10 15:16:56	◣	remexre (remexre@moz-qpjn0u.rqf4.7v0m.0444.2601.IP) has left #rust-beginners ("Leaving")
2017-01-10 15:17:07	◣	Binary (Miranda6431@moz-nbosct.pools.vodafone-ip.de) has quit (Ping timeout: 121 seconds)
2017-01-10 15:17:44	◥	remexre (remexre@moz-qpjn0u.rqf4.7v0m.0444.2601.IP) has joined #rust-beginners
2017-01-10 15:21:12	◣	junqed (junqed@moz-8ee.3fb.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-10 15:21:16	remexre	What's the best/most idiomatic way to construct a constant iterator over T? Right now I'm using vec![ ... ].into_iter(), but I don't like having the extra allocation of the vec
2017-01-10 15:21:18	◣	Freyskeyd (Freyskeyd@moz-oa5cvm.abo.bbox.fr) has quit (Ping timeout: 121 seconds)
2017-01-10 15:21:37	◣	JackMc (uid85402@moz-chh512.ealing.irccloud.com) has quit (Ping timeout: 121 seconds)
2017-01-10 15:21:55	◥	sssilver (textual@moz-o28ro6.res.rr.com) has joined #rust-beginners
2017-01-10 15:22:17	LambdaComplex	futile: Thank you :)
2017-01-10 15:22:32	◣	ufobat (Martin@moz-8gmjm4.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2017-01-10 15:22:44	◥	cjhowe (textual@moz-8114ai.hr.cox.net) has joined #rust-beginners
2017-01-10 15:22:56	◣	kaljaman69 (uid206194@moz-l1hd6m.ealing.irccloud.com) has quit (Ping timeout: 121 seconds)
2017-01-10 15:23:35	@mbrubeck	remexre: If T is cheap to copy, then you can use an array or a static slice instead, with .iter().cloned()
2017-01-10 15:24:18	◣	psychoslave________ (msg@moz-0t3ggi.fbx.proxad.net) has quit (Client exited)
2017-01-10 15:24:32	◥	JackMc (uid85402@moz-chh512.ealing.irccloud.com) has joined #rust-beginners
2017-01-10 15:24:49	◥	kaljaman69 (uid206194@moz-l1hd6m.ealing.irccloud.com) has joined #rust-beginners
2017-01-10 15:26:01	remexre	mbrubeck: thanks, is there a "standard approach" for if it's not, too?
2017-01-10 15:28:06	◣	benspaulding (benspauldin@moz-1n8.64p.203.159.IP) has quit (Quit: Goodbye)
2017-01-10 15:29:13	◣	davs (davs@moz-nsm9ed.bratislava.digicable.sk) has quit (Ping timeout: 121 seconds)
2017-01-10 15:29:40	◣	zako (zako@moz-ormegi.dynamicip.rima-tde.net) has quit (Ping timeout: 121 seconds)
2017-01-10 15:30:41	◣	woshilapin (woshilapin@moz-lte49m.mi.comcast.net) has quit (Quit: leaving)
2017-01-10 15:30:45	◥	woshilapin (woshilapin@moz-lte49m.mi.comcast.net) has joined #rust-beginners
2017-01-10 15:31:01	◣	caconym (caconym@moz-klghvh.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-10 15:31:54	kazagistar	remexre: dunno, I'm a fan of the "lazy_static" crate
2017-01-10 15:32:38	remexre	Is it usable from a macro/at a non-global scope?
2017-01-10 15:33:16	kazagistar	its a macro, thats usable from a non-global scope
2017-01-10 15:33:43	kazagistar	example: https://doc.rust-lang.org/regex/regex/index.html#example-avoid-compiling-the-same-regex-in-a-loop
2017-01-10 15:35:00	remexre	wait, what data would I put in the lazy_static block there? The vec?
2017-01-10 15:35:10	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-10 15:35:15	kazagistar	oh, I think I misunderstood the context here
2017-01-10 15:35:30	kazagistar	what do you mean by constant iterator?
2017-01-10 15:35:54	◣	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has quit (Client exited)
2017-01-10 15:36:04	@mbrubeck	remexre: I don't know a good general approach. If you have a small number of items then you can chain together things like `std::iter::once`
2017-01-10 15:36:25	remexre	I can probably explain my situation better; I'm making a macro make_thing!() that creates a bunch of "expensive" objects, and then I need to pass them to a function that takes an IntoIterator
2017-01-10 15:37:04	Ixrec	what part of this needs to be "constant"?
2017-01-10 15:37:06	bluss	if the objects are expensive, I'd just use vec![] :)
2017-01-10 15:37:32	jean377	how do you iterate over a vector of a specific not starting from 0 and not taking a slice ?
2017-01-10 15:37:39	@mbrubeck	https://github.com/servo/rust-smallvec is one way to avoid the vec allocation
2017-01-10 15:37:42	Ixrec	why not take a slice?
2017-01-10 15:38:14	remexre	Not sure why I wrote "constant", actually. Caffeine hasn't kicked in yet :P
2017-01-10 15:38:24	Ixrec	that clears up a lot lol
2017-01-10 15:38:35	@mbrubeck	jean377: There's drain() if you want to move items out of the Vec: https://doc.rust-lang.org/beta/std/vec/struct.Vec.html#method.drain
2017-01-10 15:38:35	Ixrec	still sounds like a slice could do it
2017-01-10 15:39:02	Ixrec	and yeah if you're already committed to allocating a Vec, all those things people linked are good ideas
2017-01-10 15:39:23	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-10 15:39:25	jean377	creating a slice would be creating extra pointers, I just want to iterate through range 2 to 4 for example
2017-01-10 15:39:26	remexre	mbrubeck: drain() is basically what I want, but into_iter() is the essentially the same for a vec (I think?)
2017-01-10 15:39:38	remexre	I think I'll just use small-vec
2017-01-10 15:39:52	Ixrec	iirc into_iter consumes the whole vec, and drain() consumes a specific subrange of the vec with maximal efficiency
2017-01-10 15:40:03	@mbrubeck	remexre: sorry, the drain thing was meant for jean377, not you
2017-01-10 15:40:04	Ixrec	which is something a lot of iterables have no way of doing
2017-01-10 15:40:05	bluss	jean377: no indirection, not making more pointers than making an iterator does?
2017-01-10 15:40:08	◣	steven807 (grady@moz-fg2bib.ca.comcast.net) has quit (Client exited)
2017-01-10 15:40:42	Ixrec	you can't iterate over a thing without taking a reference to it or taking ownership of it
2017-01-10 15:41:34	Ixrec	unless you literally mean the numbers 2 to 4 in which case you could write an iterator that doesn't point to anything but just holds a number and increments it
2017-01-10 15:41:59	jean377	something along those lines  `for (int i = 2; i < 5; i++){ print vec[0]}`   (pseudo code)
2017-01-10 15:42:14	Ixrec	I think (2..5) does that
2017-01-10 15:42:18	bluss	jean377: the efficient way to do that in rust is  for elt in &vec[2..5] { }
2017-01-10 15:42:31	Ixrec	^
2017-01-10 15:42:53	◣	sssilver (textual@moz-o28ro6.res.rr.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 15:43:19	◥	sssilver (textual@moz-o28ro6.res.rr.com) has joined #rust-beginners
2017-01-10 15:43:20	◣	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-10 15:44:18	◥	kulshrax (kulshrax@moz-rtr0qu.8r4b.grs8.010d.2620.IP) has joined #rust-beginners
2017-01-10 15:44:56	Ixrec	playbot: let v = vec![1, 2, 3, 4, 5, 6]; for x in &v[2..5] { println!("{}", x); }
2017-01-10 15:45:01	⚡	Notice(playbot): 3
2017-01-10 15:45:01	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2iZjyno)
2017-01-10 15:45:27	◣	_sfiguser (sfigguser@moz-0temhh.ip57.fastwebnet.it) has quit (Ping timeout: 121 seconds)
2017-01-10 15:46:07	jean377	cool thanks. if the range is a variable it says "the trait bound `std::vec::Vec<u8>: std::ops::Index<std::ops::Range<u32>>` is not satisfied"
2017-01-10 15:46:34	jean377	&vec[0..myvar]
2017-01-10 15:46:43	◣	oln (smuxi@moz-h6kap0.customer.cdi.no) has quit (A TLS packet with unexpected length was received.)
2017-01-10 15:46:47	Ixrec	that sounds like you tried to index a vector with a range, rather than take a slice
2017-01-10 15:46:48	@mbrubeck	jean377: &vec[0..(myvar as usize)]
2017-01-10 15:46:59	◥	caconym (caconym@moz-mhv.8si.171.67.IP) has joined #rust-beginners
2017-01-10 15:47:06	◣	remexre (remexre@moz-qpjn0u.rqf4.7v0m.0444.2601.IP) has quit (Quit: Leaving)
2017-01-10 15:47:26	◥	repnop (shell@moz-p9k.f0i.55.66.IP) has joined #rust-beginners
2017-01-10 15:47:47	jean377	mbrubeck: superb!:)
2017-01-10 15:47:50	◣	cynicaldevil (uid126068@moz-3m708d.brockwell.irccloud.com) has quit (Quit: Connection closed for inactivity)
2017-01-10 15:48:08	Ixrec	playbot: let n = 0; let v = vec![1, 2, 3, 4, 5, 6]; for x in &v[2..(5u8 as usize)] { n += x; } println!("{}", n);
2017-01-10 15:48:10	◣	cjhowe (textual@moz-8114ai.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 15:48:10	⚡	Notice(playbot): error[E0277]: the trait bound `{integer}: std::ops::AddAssign<&{integer}>` is not satisfied
2017-01-10 15:48:10	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2iaWdSy)
2017-01-10 15:48:12	◣	s (Mibbit@moz-rk7.vqp.75.216.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 15:49:07	◥	rkuska (rkuska@moz-c9b.85h.82.95.IP) has joined #rust-beginners
2017-01-10 15:49:17	◥	cjhowe (textual@moz-8114ai.hr.cox.net) has joined #rust-beginners
2017-01-10 15:49:40	◥	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has joined #rust-beginners
2017-01-10 15:50:44	◥	stephanbuys (Adium@moz-evuja1.telkomadsl.co.za) has joined #rust-beginners
2017-01-10 15:52:24	◣	stephanbuys1 (Adium@moz-srkq2f.telkomadsl.co.za) has quit (Ping timeout: 121 seconds)
2017-01-10 15:53:24	◣	rkuska (rkuska@moz-c9b.85h.82.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 15:54:46	durka42	playbot: let n = 0; let v = vec![1, 2, 3, 4, 5, 6]; for &x in &v[2..(5u8 as usize)] { n += x; } println!("{}", n);
2017-01-10 15:54:48	⚡	Notice(playbot): error[E0384]: re-assignment of immutable variable `n`
2017-01-10 15:54:48	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2iaO7JB)
2017-01-10 15:54:53	durka42	playbot: let mut n = 0; let v = vec![1, 2, 3, 4, 5, 6]; for &x in &v[2..(5u8 as usize)] { n += x; } println!("{}", n);
2017-01-10 15:54:56	⚡	Notice(playbot): 12
2017-01-10 15:54:56	⚡	Notice(playbot): ()
2017-01-10 15:55:31	◣	eibwen (eibwen@moz-6smn86.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-10 15:57:39	◥	_sfiguser (sfigguser@moz-0temhh.ip57.fastwebnet.it) has joined #rust-beginners
2017-01-10 15:58:05	◥	mib_1trbnw (Mibbit@moz-48fjp9.east.verizon.net) has joined #rust-beginners
2017-01-10 15:58:09	◥	benspaulding (benspauldin@moz-1n8.64p.203.159.IP) has joined #rust-beginners
2017-01-10 15:58:20	◥	willglynn (willglynn@moz-e0j0dn.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-10 15:58:38	◥	Deedasmi (Mibbit@moz-ida.lm8.76.76.IP) has joined #rust-beginners
2017-01-10 15:59:38	◣	mib_1trbnw (Mibbit@moz-48fjp9.east.verizon.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 15:59:49	◣	benspaulding (benspauldin@moz-1n8.64p.203.159.IP) has quit (Quit: Goodbye)
2017-01-10 16:00:20	◥	benspaulding (benspauldin@moz-1n8.64p.203.159.IP) has joined #rust-beginners
2017-01-10 16:00:32	◣	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 16:01:03	◥	rkuska (rkuska@moz-c9b.85h.82.95.IP) has joined #rust-beginners
2017-01-10 16:01:11	◣	y6cmE (root@moz-28n.0lf.23.58.IP) has quit (Quit: leaving)
2017-01-10 16:04:22	◣	sssilver (textual@moz-o28ro6.res.rr.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 16:05:05	◣	rkuska (rkuska@moz-c9b.85h.82.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 16:07:28	◣	tel (tel@moz-0jh5f2.ma.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2017-01-10 16:09:35	◣	cjhowe (textual@moz-8114ai.hr.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 16:12:16	◣	majoh (Sponge_Bob@moz-2cilpe.se) has quit (Ping timeout: 121 seconds)
2017-01-10 16:16:40	◥	Powersource (Powersource@moz-u199ao.cust.bredband2.com) has joined #rust-beginners
2017-01-10 16:19:12	◣	bread|laptop (bread@moz-brooh7.hfc.comcastbusiness.net) has quit (Client exited)
2017-01-10 16:19:52	◥	majoh (Sponge_Bob@moz-2cilpe.se) has joined #rust-beginners
2017-01-10 16:22:06	◥	_nom_ (Nabeel@moz-svf.nfo.180.59.IP) has joined #rust-beginners
2017-01-10 16:23:09	◣	nom_ (Nabeel@moz-3a0.bea.180.59.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 16:24:01	◣	wallacoloo_____ (colin@moz-q7l6m1.dhcp4.washington.edu) has quit (Client exited)
2017-01-10 16:24:11	SiIky	having a HashMap and a string that contains zero or more keys of that HashMap, is there an easy way to get the values of those keys? (i.e. parse the string and get the value of each key)
2017-01-10 16:24:25	◣	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has quit (Quit: WeeChat 1.5)
2017-01-10 16:24:39	SiIky	assuming the string doesnt have spaces, special chars or anything, just ASCII chars
2017-01-10 16:24:53	SiIky	alphanumeric ASCII chars*
2017-01-10 16:24:57	durka42	so the keys of the map are chars?
2017-01-10 16:25:21	SiIky	no, the keys are strings with variable length
2017-01-10 16:25:33	SiIky	(between 1 and 3 in my specific case)
2017-01-10 16:25:34	durka42	how do you intend to find out where one key ends and the next one begins
2017-01-10 16:25:49	◣	chandlerbing (chandlerbin@moz-d95lac.ftth.glasoperator.nl) has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2017-01-10 16:26:06	Ixrec	could you give an example of this weird string-made-of-keys thingy?
2017-01-10 16:26:23	SiIky	ok 1 sec
2017-01-10 16:26:32	@mbrubeck	If they're, say, comma-separated, you can do `string.split(',').map(|s| map.get(s.parse()))` to get get an iterator whose items are Option<Value>
2017-01-10 16:27:13	@mbrubeck	oops, forgot to handle potential errors from `s.parse()`
2017-01-10 16:27:26	durka42	don't need to parse if the keys are strings
2017-01-10 16:27:47	@mbrubeck	oh yeah, just caught up on the followups
2017-01-10 16:30:14	◥	rudy (rustedwolf@moz-9bd5uq.dynamic.chello.pl) has joined #rust-beginners
2017-01-10 16:32:13	◣	rudy (rustedwolf@moz-9bd5uq.dynamic.chello.pl) has quit (Quit: Leaving)
2017-01-10 16:32:25	◥	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has joined #rust-beginners
2017-01-10 16:34:35	vandenoever	can i change items in this  structure Rc<Vec<Box<MyTrait>>? and if not, with what structure could i?
2017-01-10 16:35:13	◣	manuel_ (manuel@moz-44m.14s.6.209.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 16:35:33	~steveklabnik	vandenoever: you'd have to put a RefCell inside the Rc but before the Vec
2017-01-10 16:36:29	◣	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 16:37:31	◣	sqwishy (sqwishy@moz-ifh.q9a.172.69.IP) has quit (Connection closed)
2017-01-10 16:37:59	◥	sqwishy (sqwishy@moz-ifh.q9a.172.69.IP) has joined #rust-beginners
2017-01-10 16:38:38	SiIky	https://is.gd/WRT3TT got a simple example
2017-01-10 16:38:58	◣	amir (amir@moz-qbf4gg.fiber7.init7.net) has quit (Ping timeout: 121 seconds)
2017-01-10 16:39:00	SiIky	but converting only the first key
2017-01-10 16:39:32	durka42	better hope none of your keys is a substring of another one then!
2017-01-10 16:39:53	SiIky	i know :P they arent
2017-01-10 16:40:40	durka42	what's with the maxlen thing?
2017-01-10 16:40:45	durka42	why don't you want to scan the whole string?
2017-01-10 16:41:36	◣	_nom_ (Nabeel@moz-svf.nfo.180.59.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 16:41:39	SiIky	that function is to get the first key only
2017-01-10 16:41:39	◣	blashyrk (gushromp@moz-4hp94c.dynamic.sbb.rs) has quit (Quit: Leaving)
2017-01-10 16:41:55	vandenoever	 steveklabnik: thanks, i'll have a go!
2017-01-10 16:42:10	SiIky	i can add the protoype of the way i was trying to solve the whole thing
2017-01-10 16:42:21	◣	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-10 16:42:45	@mbrubeck	SiIky: Are these Japanese kana/syllables?
2017-01-10 16:42:48	◣	sebk (sebk@moz-05nbdi.pools.vodafone-ip.de) has quit (Ping timeout: 121 seconds)
2017-01-10 16:43:10	◣	Powersource (Powersource@moz-u199ao.cust.bredband2.com) has quit (Quit: Leaving)
2017-01-10 16:43:16	Ixrec	I was thinking the same thing
2017-01-10 16:43:43	SiIky	its for that purpose actually, why?
2017-01-10 16:43:43	◣	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has quit (Client exited)
2017-01-10 16:44:03	SiIky	is there already some crate doing it?
2017-01-10 16:44:06	durka42	something ike this https://is.gd/QR82bu
2017-01-10 16:45:36	@mbrubeck	SiIky: You'll want to be careful about strings like "na" which should probably parse as ["na"] instead of ["n", "a"]
2017-01-10 16:45:53	◣	handyman (handyman@moz-s9ci8a.subp.5lka.0645.2601.IP) has quit (Quit: )
2017-01-10 16:46:13	Ixrec	depends whether it was written な
2017-01-10 16:46:20	Ixrec	or んあ
2017-01-10 16:46:22	durka42	or just to translate the keys up front https://is.gd/112dvE
2017-01-10 16:46:26	@mbrubeck	which means you may need to find the longest prefix that is in the map, rather than stopping at the first match
2017-01-10 16:46:29	◥	steven807 (grady@moz-af7.hg3.102.76.IP) has joined #rust-beginners
2017-01-10 16:46:29	vandenoever	steveklabnik: btw, by change, i meant replace wholesale with an instance of the same concrete struct
2017-01-10 16:46:30	durka42	that's what I was saying about substrings
2017-01-10 16:46:44	~steveklabnik	vandenoever: in general, Rc's data has to be immutable
2017-01-10 16:46:54	Ixrec	romaji is inherently ambiguous because of that, unless you add apostophes rigorously
2017-01-10 16:47:00	SiIky	mbrubeck: yeah, thats one of the reasons i was searchin from max length to 1. my idea was using ' for that, like: "nan'ada?"
2017-01-10 16:48:32	vandenoever	steveklabnik: i'm using make_mut() in a few places to do cow, and wanted to do the same here but now I have a struct instead of a concrete type
2017-01-10 16:48:43	◥	y6cmE (root@moz-28n.0lf.23.58.IP) has joined #rust-beginners
2017-01-10 16:48:44	vandenoever	Rc::make_mut that is
2017-01-10 16:50:52	◣	futile (felix@moz-l82m5j.pools.vodafone-ip.de) has quit (Quit: WeeChat 1.6)
2017-01-10 16:50:52	◥	stomper (Mibbit@moz-ad4.5gt.228.216.IP) has joined #rust-beginners
2017-01-10 16:50:58	◣	stomper (Mibbit@moz-ad4.5gt.228.216.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 16:51:23	◥	manuel_ (manuel@moz-5eskqg.ma.comcast.net) has joined #rust-beginners
2017-01-10 16:51:36	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-10 16:52:30	◥	stjepang_ (stjepang@moz-rsc.aah.252.151.IP) has joined #rust-beginners
2017-01-10 16:52:40	rkruppe	vand
2017-01-10 16:52:58	Ixrec	I'm still weirded out that code involving Japanese turned up here the moment I started reading something in Japanese for the first time in ages
2017-01-10 16:53:08	rkruppe	vandenoever: make_mut clones in most cases so it's not a good idea normally
2017-01-10 16:53:36	rkruppe	Rc<RefCell> allows sharing *and* mutation together
2017-01-10 16:54:38	◥	plutoniix (q@moz-kp1.dop.192.159.IP) has joined #rust-beginners
2017-01-10 16:54:59	◣	SiIky (SiIky@moz-dbrsl2.5ghr.hl2k.08a0.2001.IP) has left #rust-beginners ("Leaving")
2017-01-10 16:55:34	◥	SiIky (SiIky@moz-dbrsl2.5ghr.hl2k.08a0.2001.IP) has joined #rust-beginners
2017-01-10 16:55:34	◣	autra (autra@moz-sv44td.phoxygen.com) has quit (Connection closed)
2017-01-10 16:55:43	◣	stjepang (stjepang@moz-3o5.uss.205.37.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 16:56:01	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-10 16:56:12	vandenoever	rkruppe: i'm using it for the result of an iterator, in most loops, i'd guess that there would be no need to mut, only when the result of Iterator::next()  is somehow kept longer than a loop
2017-01-10 16:56:57	vandenoever	the iterator returns a String and i'm saving on allocations by reusing it
2017-01-10 16:57:31	SiIky	thanks durka42 and Ixrec, ill read the code now and try to understand it :p
2017-01-10 16:57:37	SiIky	Ixrec: maybe its a sign?
2017-01-10 16:57:47	Ixrec	maybe
2017-01-10 16:57:54	Ixrec	ganbatte
2017-01-10 16:58:23	rkruppe	vandenoever: IIUC that matches the semantics of make_mut surprisingly well. Still, an odd thing to do, and kind of unidiomatic to hide costs like that
2017-01-10 16:58:31	Ixrec	I thought it wasn't possible for the value returned by Iterator::next() to live past the next next() call
2017-01-10 16:58:36	◣	alfie (alfie@moz-dk2iqm.alfiepates.me) has quit (Ping timeout: 121 seconds)
2017-01-10 16:58:57	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Quit: Leaving...)
2017-01-10 16:59:04	pingveno	Ixrec: No, it's very much possible.
2017-01-10 16:59:27	pingveno	That's exactly what collect() is doing
2017-01-10 16:59:45	Ixrec	by allocating/cloning stuff, yeah
2017-01-10 16:59:54	vandenoever	rkruppe: as far as i see, the alternative is more allocations, so i'm hiding savings
2017-01-10 16:59:54	pingveno	No, it moves it
2017-01-10 17:00:47	vandenoever	the thing is, i'd like to do the same thing with an iterator that returns trait instances
2017-01-10 17:00:56	◣	bschaefer (bschaefer@moz-sr39tv.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-10 17:01:05	◥	autra (autra@moz-sv44td.phoxygen.com) has joined #rust-beginners
2017-01-10 17:01:13	rkruppe	vandenoever: but it's hard to tell if and why extra allocations happen
2017-01-10 17:01:33	◥	alfie (alfie@moz-dk2iqm.alfiepates.me) has joined #rust-beginners
2017-01-10 17:01:45	rkruppe	ideally you could just use streaming iterator and the client code could clone if it needed it
2017-01-10 17:01:54	rkruppe	would also avoid the Rc indirection and overhead
2017-01-10 17:02:13	vandenoever	rkruppe: true, this is in a parser so the number of allocations depends on the input file anyway, it's not an iteration over an existing structure, i'd use refs in that case
2017-01-10 17:02:40	vandenoever	rkruppe: which streaming iterator?
2017-01-10 17:02:43	vandenoever	does that exist now?
2017-01-10 17:02:49	rkruppe	the streaming iterator trait that does not exist yet :)
2017-01-10 17:02:58	vandenoever	ah :-)
2017-01-10 17:03:25	rkruppe	it requires a language feature qe don't have yet to make remotely ergonomic
2017-01-10 17:03:40	vandenoever	higher kinded types, right
2017-01-10 17:03:41	vandenoever	?
2017-01-10 17:04:11	◥	tl8atWork (tl8atWork@moz-4nskmf.1300webpro.com.au) has joined #rust-beginners
2017-01-10 17:04:13	◥	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has joined #rust-beginners
2017-01-10 17:04:28	rkruppe	or something equivalent
2017-01-10 17:04:30	◥	blackgoat (blackgoat@moz-rbq.89i.24.59.IP) has joined #rust-beginners
2017-01-10 17:04:57	rkruppe	HKT turn out to be full of headaches while associated type constructors are rather natural
2017-01-10 17:05:18	vandenoever	wouldnt a cursor work? so calling next() on the iterator but also having the data as a property of the iterator?
2017-01-10 17:05:29	◣	bbirc (Mibbit@moz-l19.sv6.223.2.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-10 17:05:43	tl8atWork	So I have a date in UTC (using chrono) and I want to change the timezone. The question is, how should I create the timezone?
2017-01-10 17:06:03	◥	alx741_ (alx741@moz-d51.hcb.152.190.IP) has joined #rust-beginners
2017-01-10 17:06:22	rkruppe	vandenoever: you can define something like a streaming iterator today but you can't define adapters like map()
2017-01-10 17:06:37	SiIky	i feel kinda dumb now... why didnt i think of lists of lists?... 
2017-01-10 17:07:25	vandenoever	rkruppe: and no nice syntax :-P
2017-01-10 17:07:49	rkruppe	that too
2017-01-10 17:07:52	vandenoever	sounds silly but that's one reason for me to use iterator: it's syntax so very idiomatic
2017-01-10 17:08:09	vandenoever	the way things are done in rust, so try to fit in :-P
2017-01-10 17:08:29	rkruppe	vandenoever: well this is a thing: while let Some(x) = iter.next() { ... }
2017-01-10 17:08:35	rkruppe	not so bad tbh
2017-01-10 17:08:38	◣	alx741 (alx741@moz-4aj.fgh.107.200.IP) has quit (Ping timeout: 121 seconds)
2017-01-10 17:09:12	Ixrec	tl8atWork: use one of the constructors for UTC, Local or FixedOffset?
2017-01-10 17:09:31	◥	tel (tel@moz-0jh5f2.ma.comcast.net) has joined #rust-beginners
2017-01-11 09:54:53	⚡	irc: disconnected from server
2017-01-11 09:55:11	◥	boon (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-11 09:55:11	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-11 09:55:11	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-11 09:55:11	⚡	Channel #rust-beginners: 675 nicks (5 ops, 0 halfops, 0 voices, 670 normals)
2017-01-11 09:55:15	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-11 09:55:49	Arnavion	Devon: Like I said, it's equivalent to   let x = c;
2017-01-11 09:56:09	Arnavion	If it was an Option, you couldn't write   let Some(x) = some_option;   because some_option might not be Some
2017-01-11 09:56:12	maddie9	let args: Vec<String> = env::args().collect();
2017-01-11 09:56:18	maddie9	if i have this, how do i pass it into a function?
2017-01-11 09:56:40	stephaneyfx	maddie9, fn f(v: Vec<String>)
2017-01-11 09:56:43	Arnavion	Devon: So the point is to match the expression according to a pattern
2017-01-11 09:56:53	◥	vasi (vasi@moz-i2jeql.ejl3.c9sv.ffc5.2602.IP) has joined #rust-beginners
2017-01-11 09:57:01	◣	degausser (Thunderbird@moz-midec3.dyn.plus.net) has quit (Ping timeout: 121 seconds)
2017-01-11 09:57:03	maddie9	it says cannot move out of `args` because it is borrowed
2017-01-11 09:57:12	Arnavion	Devon: The pattern `x` can always match its input since it's just capturing the input as a binding named `x`
2017-01-11 09:57:26	stephaneyfx	maddie9, may you post your code to the playground?
2017-01-11 09:57:49	Devon	Alright, that's starting to make sense to me
2017-01-11 09:57:54	Arnavion	Devon: Note that you could equally call it `y` or `z` or `some_silly_name` and that doesn't change anything
2017-01-11 09:58:01	Devon	Right
2017-01-11 09:58:07	◥	daschl (daschl@moz-kvc.ipu.178.62.IP) has joined #rust-beginners
2017-01-11 09:58:23	◣	lazypenguin (lazypenguin@moz-4csopk.udff.dj18.a601.2605.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-11 09:59:06	Devon	So in order for this to work, there can't be any other cases defined?
2017-01-11 09:59:11	Arnavion	Devon: In real-life code you would probably use this for a fall-back case, like say "match the given expression as Foo(bar), or Baz(quux), or fall back to whatever it is and do something else"
2017-01-11 09:59:26	stephaneyfx	maddie9, this works: https://is.gd/Zyvv8H
2017-01-11 09:59:31	Devon	Oh, so any cases defined after it
2017-01-11 09:59:39	Arnavion	Devon: For example you might have "Do something if the char > 'a', something else if the char > 'A', and something else if it's neither"
2017-01-11 10:00:06	Arnavion	and so you need to give "neither" a name, so you might as well call it `x`
2017-01-11 10:00:31	Arnavion	IRL if the expression you were matching was called `c`, you would probably call the pattern `c` as well
2017-01-11 10:00:34	⚡	stephaneyfx is now known as stephaneyfx_away
2017-01-11 10:00:46	Arnavion	but I assume the point of this book example is to demonstrate that it's *not* matching the outer `x`
2017-01-11 10:01:13	blashyrk	is there a convenience method to initializing a Vec with some size and some initial value?
2017-01-11 10:01:15	blashyrk	values*
2017-01-11 10:01:23	OneEyed	blashyrk: vec![x;n]
2017-01-11 10:01:32	◥	sethlopez (sethlopez@moz-cor.ifk.27.12.IP) has joined #rust-beginners
2017-01-11 10:01:33	blashyrk	OneEyed: thanks!
2017-01-11 10:01:34	Arnavion	playbot: vec![5; 'A']
2017-01-11 10:01:37	⚡	Notice(playbot): error[E0308]: mismatched types
2017-01-11 10:01:37	⚡	Notice(playbot): (output truncated; full output at http://bit.ly/2j1CBgK)
2017-01-11 10:01:49	Devon	Yeah, I got that part, I just couldn't understand why it was taking the x arm, but you've explained it pretty well
2017-01-11 10:01:52	Devon	Thanks Arnavion
2017-01-11 10:01:53	◣	ngqrl (weechat@moz-vqjugs.cp89.ofd7.0e35.2a01.IP) has quit (Quit: WeeChat 1.6)
2017-01-11 10:01:55	Arnavion	playbot: vec!['A'; 5]
2017-01-11 10:01:58	⚡	Notice(playbot): ['A', 'A', 'A', 'A', 'A']
2017-01-11 10:02:22	◥	starblue (juergen@moz-0sjqgo.web.vodafone.de) has joined #rust-beginners
2017-01-11 10:03:00	◥	ngqrl (weechat@moz-vqjugs.cp89.ofd7.0e35.2a01.IP) has joined #rust-beginners
2017-01-11 10:04:35	◣	stephaneyfx_away (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Ping timeout: 121 seconds)
2017-01-11 10:04:39	◥	humean (humean@moz-4tj.ek0.162.178.IP) has joined #rust-beginners
2017-01-11 10:06:10	◣	humean (humean@moz-4tj.ek0.162.178.IP) has quit (Quit: WeeChat 1.5)
2017-01-11 10:06:19	◥	humean (humean@moz-4tj.ek0.162.178.IP) has joined #rust-beginners
2017-01-11 10:11:33	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-11 10:16:05	◥	bluss (bluss@moz-9sooj3.dynamic.simnet.is) has joined #rust-beginners
2017-01-11 10:17:06	◥	saimen (saimen@moz-i2kas4.natpool.mwn.de) has joined #rust-beginners
2017-01-11 10:17:47	◣	brson (brson@moz-j1n.kmu.58.172.IP) has quit (Connection closed)
2017-01-11 10:18:24	◣	steven807 (grady@moz-af7.hg3.102.76.IP) has quit (Client exited)
2017-01-11 10:19:06	◣	playbot (playbot@moz-t76o6j.compute.amazonaws.com) has quit (RecvQ exceeded)
2017-01-11 10:19:58	◥	DreamingInCode (textual@moz-vqbadk.sd.cox.net) has joined #rust-beginners
2017-01-11 10:20:04	◥	brson (brson@moz-j1n.kmu.58.172.IP) has joined #rust-beginners
2017-01-11 10:22:32	◣	iiddnn__ (iacopodeeno@moz-fcea0a.retail.telecomitalia.it) has quit (Client exited)
2017-01-11 10:23:05	◣	tstack (Adium@moz-lmrjds.wa.comcast.net) has quit (Quit: Leaving.)
2017-01-11 10:23:31	◥	TheCycoONE (quassel@moz-d4s.1g6.223.162.IP) has joined #rust-beginners
2017-01-11 10:23:46	wyvern	Based on "comment things out and see what provides the biggest speedup", https://github.com/marshallpierce/rust-base64/blob/perf-experiments/src/lib.rs#L323 is pretty painful in that loop. Is there any cheaper way to get a u64 out of a slice, byte-swapped to big endian?
2017-01-11 10:24:05	◣	maddie9 (maddie@moz-fpe67k.dyn.plus.net) has quit (Quit: Leaving)
2017-01-11 10:24:38	wyvern	I get a 5x speedup by not reading real input, while not writing real output into the buffer provides much less gain.
2017-01-11 10:24:47	◣	ngqrl (weechat@moz-vqjugs.cp89.ofd7.0e35.2a01.IP) has quit (Client exited)
2017-01-11 10:25:24	wyvern	What unsafe things can I do to remove bounds checks there?
2017-01-11 10:25:50	◥	denisg (denisg@moz-k19q37.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-11 10:26:20	◥	caconym (caconym@moz-klghvh.wa.comcast.net) has joined #rust-beginners
2017-01-11 10:26:40	Icefoz	wyvern: Are the bounds checks actually a problem?  I've yet to see them actually cause issues.
2017-01-11 10:26:59	wyvern	I'm not sure; I'd like to try unsafe-ifying and see if it makes a difference.
2017-01-11 10:27:25	wyvern	I've already tried unsafe-ing other things and it made immeasurably small differences; this is just the next obvious thing to try
2017-01-11 10:27:32	rkruppe	wyvern: slice.get_unchecked(index) and get_unchecked_mut
2017-01-11 10:27:41	Icefoz	Aha.  Fair enough.
2017-01-11 10:27:48	wyvern	rkruppe: but I need to get an 8-byte slice from a slice to feed to read_u64.
2017-01-11 10:27:49	◣	playbot-mini (playbot-min@moz-t76o6j.compute.amazonaws.com) has quit (Connection closed)
2017-01-11 10:27:53	Icefoz	wyvern: Have you profiled it?
2017-01-11 10:27:58	wyvern	using get_unchecked on the lookup table made no difference.
2017-01-11 10:28:03	◥	playbot-mini (playbot-min@moz-t76o6j.compute.amazonaws.com) has joined #rust-beginners
2017-01-11 10:28:26	wyvern	Icefoz: Nope; what profilers work well for rust? Thus far I'm just re-running my benchmarks every time I tweak something.
2017-01-11 10:28:28	durka42	the equivalent to `&x[a..b]` is `unsafe { x.get_unchecked(a..b) }`
2017-01-11 10:28:28	rkruppe	ah I see. byteorder should be pretty well optimized
2017-01-11 10:28:40	rkruppe	durka42: wait that works?
2017-01-11 10:28:52	durka42	from 1.15 on it does
2017-01-11 10:28:53	misdreavus	it got added fairly recently
2017-01-11 10:29:05	breeden_	woah
2017-01-11 10:29:29	◥	Guest85 (textual@moz-vqjugs.cp89.ofd7.0e35.2a01.IP) has joined #rust-beginners
2017-01-11 10:29:29	◥	voider1 (voider1@moz-cnrpdc.dynamic.ziggo.nl) has joined #rust-beginners
2017-01-11 10:30:01	wyvern	durka42: neat, thanks.
2017-01-11 10:30:18	wyvern	Unfortunately, that made basically no difference. Fortunately, that means bounds checks are cheap, as they should be since they should have a 100% branch prediction rate
2017-01-11 10:30:37	◣	caconym (caconym@moz-klghvh.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-11 10:30:47	wyvern	You can see current progress here: https://gist.github.com/marshallpierce/20351d44b29e238fecb821dc87251e5f. C impl is at 1700MiB/s. Rust is currently just over 1000.
2017-01-11 10:31:07	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 10:31:10	wyvern	Is that already more than fast enough? Of course. But that's not the point. :P
2017-01-11 10:31:37	Icefoz	wyvern: std::mem::transmute() might make your byte shuffling easier and might make the compiler smarter about it: https://is.gd/xkk6Kb
2017-01-11 10:31:46	Icefoz	Would be interesting to find out, at least.
2017-01-11 10:31:52	rkruppe	getting a 1.7x speed up with micro optimizations like that is pretty unlikely
2017-01-11 10:31:56	◣	Guest85 (textual@moz-vqjugs.cp89.ofd7.0e35.2a01.IP) has quit (Quit: Bye!)
2017-01-11 10:32:02	rkruppe	do you use the literal same algorithm as the C version?
2017-01-11 10:32:25	wyvern	rkruppe: https://github.com/aklomp/base64/blob/master/lib/arch/generic/64/dec_loop.c
2017-01-11 10:32:27	wyvern	basically, yes.
2017-01-11 10:32:32	◥	nom (nomer@moz-2b7.3cf.180.59.IP) has joined #rust-beginners
2017-01-11 10:32:38	Icefoz	What C compiler are you benching against?  clang?
2017-01-11 10:32:48	rkruppe	do you have LTO enabled?
2017-01-11 10:32:50	wyvern	gcc, the default on my linux box.
2017-01-11 10:32:56	◥	davs (davs@moz-ni1ugg.bratislava.digicable.sk) has joined #rust-beginners
2017-01-11 10:32:56	wyvern	rkruppe: nope, tell me more
2017-01-11 10:33:08	rkruppe	in Cargo.toml: [profile.release] lto = true
2017-01-11 10:34:02	Icefoz	wyvern: Try it vs clang and see what happens, perhaps.
2017-01-11 10:34:02	durka42	rkruppe: that's sorta cheating unless the C impl does as well
2017-01-11 10:34:02	◥	Acader1 (Acader@moz-lct6l6.hsi15.kabel-badenwuerttemberg.de) has joined #rust-beginners
2017-01-11 10:34:22	MikeMountain	What does "!" in front of a type mean?  Like this:
2017-01-11 10:34:23	MikeMountain	impl<T> !Send for Shared<T> where T: ?Sized
2017-01-11 10:34:23	◣	Acader1 (Acader@moz-lct6l6.hsi15.kabel-badenwuerttemberg.de) has quit (Client exited)
2017-01-11 10:34:32	rkruppe	durka42: kinda, but the rust version probably relies more on other crates than the C version
2017-01-11 10:34:33	Icefoz	MikeMountain: "not"
2017-01-11 10:34:35	wyvern	LTO makes no real difference
2017-01-11 10:35:01	durka42	is BigEndian::read_u64 marked inline? I assume it is
2017-01-11 10:35:05	◥	degausser (Thunderbird@moz-midec3.dyn.plus.net) has joined #rust-beginners
2017-01-11 10:35:06	wyvern	yes
2017-01-11 10:35:16	wyvern	https://github.com/BurntSushi/byteorder/blob/master/src/lib.rs to save you a click
2017-01-11 10:35:19	◥	ngc0202 (ngc0202@moz-9jvocq.ny.comcast.net) has joined #rust-beginners
2017-01-11 10:35:25	breeden_	i'm starting to think it's time to pull out the disassembler 
2017-01-11 10:35:34	MikeMountain	Icefoz: Isn't this the default behavior anyway?  So what does it change?
2017-01-11 10:36:03	rkruppe	wyvern: let's go back to basics. you are focusing on BigEndian::read_u64 line. why?
2017-01-11 10:36:07	durka42	MikeMountain: normally a type is Send if all of its members are
2017-01-11 10:36:12	wyvern	Icefoz: I think byteorder boils down to a transmute under the hood anyway
2017-01-11 10:36:17	@mbrubeck	misdreavus: `impl !Trait` only works with special traits like Sync and Send that have "default impls"
2017-01-11 10:36:27	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 10:36:32	misdreavus	MikeMountain: ^
2017-01-11 10:36:43	@mbrubeck	details: https://doc.rust-lang.org/nomicon/send-and-sync.html
2017-01-11 10:36:46	Icefoz	wyvern: I was thinking more for choosing your selected_input_byte.
2017-01-11 10:36:59	◣	Acader (Acader@moz-adki23.dyn.telefonica.de) has quit (Ping timeout: 121 seconds)
2017-01-11 10:37:12	◥	Beefki (phobia@moz-t3l42c.il.comcast.net) has joined #rust-beginners
2017-01-11 10:37:59	wyvern	Icefoz: Can you explain more how to use that for selecting the byte? (hard to imagine anything beating shift and mask, but I guess it's possible)
2017-01-11 10:38:18	◣	renchan (renchan@moz-m6g.9fp.88.195.IP) has quit (Quit: )
2017-01-11 10:38:20	wyvern	rkruppe: Via the very unimpressive metric of "commenting out various parts and seeing which gives the biggest speedup".
2017-01-11 10:38:29	rkruppe	oh
2017-01-11 10:38:32	durka42	you might want to use a real profiler :)
2017-01-11 10:38:37	rkruppe	that seems like it could easily misfire
2017-01-11 10:38:42	wyvern	Indeed it can
2017-01-11 10:38:44	wyvern	I'm open to suggestions
2017-01-11 10:38:46	rkruppe	s/misfire/misldead/
2017-01-11 10:38:50	rkruppe	mislead
2017-01-11 10:39:00	MikeMountain	durka42, mbrubeck: Thanks!
2017-01-11 10:39:04	wyvern	However, following it has gotten me this far (in real benchmarks), so it's not ALL bad ;)
2017-01-11 10:39:27	wyvern	It will certainly make branch mispredicts, etc, be artifically good to not have real input
2017-01-11 10:39:27	◣	cpup (cpup@moz-osl.ktm.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 10:39:45	wyvern	But it was already at super low branch mispredict rate because all the input is valid so error paths are never taken
2017-01-11 10:39:58	rkruppe	It also invites the compiler to optimize unrealistically
2017-01-11 10:40:06	wyvern	True
2017-01-11 10:40:24	◥	cpup (cpup@moz-osl.ktm.218.32.IP) has joined #rust-beginners
2017-01-11 10:40:27	rkruppe	At this point I second the recommendation to look at asm
2017-01-11 10:40:29	wyvern	perf stat tells me I'm at about 3IPC and .02% branch mispredict with the real code.
2017-01-11 10:40:36	Icefoz	wyvern: I dunno, just a thought.  Not sure what selecting a u8 out of a [u8;8] vs. masking one out of a u64 will actually compile code.
2017-01-11 10:40:37	rkruppe	Specifically, let perf annotate the asm
2017-01-11 10:41:06	wyvern	rkruppe: ok. What does that entail?
2017-01-11 10:41:26	rkruppe	just `perf record && perf annotate`
2017-01-11 10:41:50	xliiv	does anybody know how to pass a variable/config to request in iron?
2017-01-11 10:41:52	rkruppe	It has 
2017-01-11 10:42:09	◣	nom (nomer@moz-2b7.3cf.180.59.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 10:42:25	wyvern	Icefoz: like https://github.com/marshallpierce/rust-base64/blob/d0280ac3e27624f29c94a0bfbbc0829253eede67/src/lib.rs#L301 ?
2017-01-11 10:42:28	rkruppe	wyvern: It has a little built-in help for navigating the disasm. A little archaic but ok
2017-01-11 10:42:54	Icefoz	wyvern: Basically.
2017-01-11 10:42:56	wyvern	Icefoz: that corresponds to the first entry in the benchmark gist. About 60% of curent perf
2017-01-11 10:43:06	rkruppe	wyvern: is it possible that the C version gets vectorized?
2017-01-11 10:43:36	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 10:43:41	Icefoz	xliiv: What do you mean, 'pass a variable/config' ?
2017-01-11 10:43:42	wyvern	It's possible. 
2017-01-11 10:44:08	wyvern	However, the manually vectorized versions in C are much, much faster.
2017-01-11 10:44:17	wyvern	So if the compiler is doing some of that, it's not very good at it.
2017-01-11 10:44:24	wyvern	AVX2 is 6000MB/s.
2017-01-11 10:44:28	rkruppe	Yeah your algorithm doesn't look terribly vectorizer friendly
2017-01-11 10:44:47	rkruppe	But maybe if it does something weird with one small part of the code that could already make a difference
2017-01-11 10:44:54	rkruppe	even if it needs to wrap it in twenty shuffles
2017-01-11 10:45:11	wyvern	anyway, i'll have clang soon and we'll see how that does on the C version
2017-01-11 10:45:12	xliiv	Icefoz, let's say i have dir with some kind of file.. i'd like to define the path in configuration then use the path in handler
2017-01-11 10:45:33	xliiv	Icefoz, i meant pass to controller..
2017-01-11 10:45:44	◥	junqed (junqed@moz-al2.rqj.70.178.IP) has joined #rust-beginners
2017-01-11 10:46:29	◣	zako (zako@moz-qn0.jpe.241.150.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 10:46:36	Icefoz	xliiv: Not sure specifically but if you are just getting started with Iron then https://wiki.alopex.li/ActuallyUsingIronAgain might be useful.
2017-01-11 10:47:26	Icefoz	xliiv: Section 3 is where it starts getting into attaching data to requests.
2017-01-11 10:47:36	wyvern	hmm, running benchmarks inside perf is a little painful because it needs nightly
2017-01-11 10:47:44	◥	yufengwng (yufeng@moz-3a5.284.10.129.IP) has joined #rust-beginners
2017-01-11 10:47:50	Icefoz	xliiv: Or if you really just need configuration data just use lazy_static to load data from a config file and make it a global.
2017-01-11 10:48:16	◣	daschl (daschl@moz-kvc.ipu.178.62.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 10:48:44	xliiv	Icefoz, I'll take a look thanks
2017-01-11 10:49:05	voider1	If I put different files in /tests like test_chat.rs, test_user.rs, will it work fine?
2017-01-11 10:49:13	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 10:49:27	voider1	Will it work when I run cargo test?
2017-01-11 10:49:44	misdreavus	yup, should be fine
2017-01-11 10:49:51	voider1	cool.
2017-01-11 10:50:36	vandenoever	is there  a way to cast the lifetime of a type to 'static ( i realize that that is unsafe) ?
2017-01-11 10:50:59	◣	humean (humean@moz-4tj.ek0.162.178.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 10:51:25	misdreavus	transmute is an all-purpose footgun, even for lifetime mangling
2017-01-11 10:51:41	vandenoever	misdreavus: awesome, thanks!
2017-01-11 10:51:42	misdreavus	the real answer, tho, is why, you may need to change your approach
2017-01-11 10:51:51	◥	rdrsss (rdrsss@moz-ek5.ntm.88.38.IP) has joined #rust-beginners
2017-01-11 10:51:54	Icefoz	^
2017-01-11 10:52:20	vandenoever	i've a Vec<MyTrait> and know the real struct at each pos and want to assign new values
2017-01-11 10:52:24	◣	rdrsss (rdrsss@moz-ek5.ntm.88.38.IP) has quit (Quit: Leaving)
2017-01-11 10:52:30	◥	lostInTheDataJungle (oli@moz-8c2877.pools.vodafone-ip.de) has joined #rust-beginners
2017-01-11 10:52:37	vandenoever	make that a Vec<Box<MyTrait>> of course
2017-01-11 10:53:12	◣	dpyro (dpyro@moz-el40ti.tx.frontiernet.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 10:53:33	◥	dpyro (dpyro@moz-el40ti.tx.frontiernet.net) has joined #rust-beginners
2017-01-11 10:53:34	vandenoever	basically i'm zipping iterators with different implementations of the same trait
2017-01-11 10:53:59	Icefoz	Fiddling with the underlying data of a trait object sounds amazingly perilous.
2017-01-11 10:54:13	◥	rdrsss (rdrsss@moz-ek5.ntm.88.38.IP) has joined #rust-beginners
2017-01-11 10:54:15	Icefoz	Does the language even define how such things are laid out?
2017-01-11 10:54:22	vandenoever	Icefoz: it's a tiny scope and i'm 100% sure that the impl on pos 1 is always the same impl
2017-01-11 10:54:26	rkruppe	It kinda does but it's unstable
2017-01-11 10:54:46	rkruppe	vandenoever: why don't you just take the new value, box it up, and just store it in the Vec?
2017-01-11 10:54:50	Icefoz	vandenoever: Fair enough.  :D
2017-01-11 10:54:51	◣	lostInTheDataJungle (oli@moz-8c2877.pools.vodafone-ip.de) has left #rust-beginners ("")
2017-01-11 10:54:59	◥	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-11 10:55:01	◣	junqed (junqed@moz-al2.rqj.70.178.IP) has quit (A TLS packet with unexpected length was received.)
2017-01-11 10:55:10	⚡	agibson is now known as agibson|afk
2017-01-11 10:55:11	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-11 10:55:17	wyvern	When I do `rustup run nightly cargo bench -v` it outputs the command it's running, but when I try to run that command directly, it just runs 0 tests and exits without running benchmarks. What am I mising?
2017-01-11 10:55:32	vandenoever	rkruppe: to have a little less allocation (a little more action)
2017-01-11 10:55:36	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-11 10:55:46	@mbrubeck	wyvern: Is it a `rustc` command?
2017-01-11 10:55:56	wyvern	`/home/mbp/dev/forks/rust-base64/target/release/deps/base64-2df9ed9b52897523 decode --bench`
2017-01-11 10:56:03	wyvern	(running only decode benchmarks)
2017-01-11 10:56:12	◥	SiIky (SiIky@moz-dbrsl2.5ghr.hl2k.08a0.2001.IP) has joined #rust-beginners
2017-01-11 10:56:18	@mbrubeck	wyvern: Hmm, that *should* work...
2017-01-11 10:56:24	vandenoever	(thanks to elvis for that slogan btw :-)
2017-01-11 10:56:52	rkruppe	vandenoever: if MyTrait includes Any (which it really really should!) you can use downcast_mut to get a &mut SpecificType and write through that
2017-01-11 10:57:23	vandenoever	rkruppe: i do not have the luxury of 'static
2017-01-11 10:57:53	misdreavus	then boxing it like that should have never worked in the first place >_>
2017-01-11 10:58:25	vandenoever	true
2017-01-11 10:58:37	wyvern	mbrubeck: http://pastie.org/private/qtxuinqttiemtsaivywpq
2017-01-11 10:58:38	@mbrubeck	vandenoever: The unsafe version of that is to cast a raw pointer, `&mut *vec[1] as *mut MyTrait as *mut ConcreteType`
2017-01-11 10:58:44	vandenoever	all the struct impl functions enforce it though
2017-01-11 10:59:17	◥	ngqrl (ngqrl@moz-vqjugs.cp89.ofd7.0e35.2a01.IP) has joined #rust-beginners
2017-01-11 10:59:38	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 10:59:54	rkruppe	vandenoever: please tell me you just omitted a + 'a from the type
2017-01-11 11:00:06	rkruppe	when writing it here
2017-01-11 11:00:10	@mbrubeck	wyvern: Note that it ran two different commands
2017-01-11 11:00:16	rkruppe	and in your code you carry the lifetime around with the trait object
2017-01-11 11:00:30	wyvern	mbrubeck: I did not do that. I will go sit in the corner with the dunce cap.
2017-01-11 11:00:37	vandenoever	rkruppe: yes, i did forget it, the code has it
2017-01-11 11:00:55	vandenoever	hmm, would Box<Any + 'a> work?
2017-01-11 11:01:04	rkruppe	Any requires 'static
2017-01-11 11:01:10	vandenoever	right
2017-01-11 11:01:11	rkruppe	so does TypeId on which it is based
2017-01-11 11:05:02	◣	SklopiS (tobias@moz-rd2dfq.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-11 11:06:04	vandenoever	maybe i should just use a tuple instead of a vector, the caching behavior will be better too
2017-01-11 11:06:13	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Connection closed)
2017-01-11 11:06:37	◥	itmitica (Mibbit@moz-3vs.p2a.97.78.IP) has joined #rust-beginners
2017-01-11 11:06:54	rkruppe	do you know the number of elements and their types?
2017-01-11 11:06:56	@mbrubeck	vandenoever: Here's an example of the unsafe approach: https://is.gd/TAN1iF
2017-01-11 11:07:19	◥	alx741_ (alx741@moz-gkf.qnp.152.190.IP) has joined #rust-beginners
2017-01-11 11:07:24	◥	humean (humean@moz-sl2fi3.cable.virginm.net) has joined #rust-beginners
2017-01-11 11:07:43	vandenoever	mbrubeck: excellent!
2017-01-11 11:07:55	◥	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has joined #rust-beginners
2017-01-11 11:08:04	@mbrubeck	vandenoever: You could also use an enum instead of Box<Trait> as the elements of the vector... then you could avoid heap allocations completely
2017-01-11 11:08:05	vandenoever	rkruppe: that would very according to use
2017-01-11 11:08:25	rkruppe	s/very/vary/?
2017-01-11 11:08:33	vandenoever	yes, vary
2017-01-11 11:08:40	rkruppe	well then you can't use tuples, can you?
2017-01-11 11:09:01	vandenoever	not easily without clever macros
2017-01-11 11:09:40	vandenoever	mbrubeck: thanks for the example!
2017-01-11 11:09:55	◣	alx741 (alx741@moz-cdv.34h.152.190.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 11:10:26	◥	junqed (junqed@moz-al2.rqj.70.178.IP) has joined #rust-beginners
2017-01-11 11:11:05	wyvern	To whoever thought of trying out clang -- its performance is a little worse than GCC 4.9.4's, 1600 instead of 1800 MB/s. 
2017-01-11 11:11:48	Icefoz	wyvern: Interesting!
2017-01-11 11:11:59	Icefoz	wyvern: Any insight into the c vs rust bottlenecks from perf?
2017-01-11 11:12:04	wyvern	perf running now
2017-01-11 11:14:17	◥	psychoslave________ (msg@moz-0t3ggi.fbx.proxad.net) has joined #rust-beginners
2017-01-11 11:14:40	◥	wgreenberg (william@moz-biegmh.com) has joined #rust-beginners
2017-01-11 11:15:05	◣	MarwenDo (MarwenDo@moz-27o.9h3.15.197.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 11:15:35	◣	veer66 (vee@moz-ki4vtc.asianet.co.th) has quit (Ping timeout: 121 seconds)
2017-01-11 11:16:09	◥	chamar (chamar@moz-fbvvki.mc.videotron.ca) has joined #rust-beginners
2017-01-11 11:16:36	◣	tyoc213 (tyoc@moz-fv4.8oo.75.184.IP) has quit (Connection closed)
2017-01-11 11:17:40	◥	Ixrec (Ixrec@moz-9bf9ip.dyn.plus.net) has joined #rust-beginners
2017-01-11 11:17:56	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 11:18:20	◣	itmitica (Mibbit@moz-3vs.p2a.97.78.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 11:19:46	◣	psychoslave________ (msg@moz-0t3ggi.fbx.proxad.net) has quit (Ping timeout: 121 seconds)
2017-01-11 11:23:12	◣	nagisa (nagisa@moz-8t068g.static.zebra.lt) has quit (Ping timeout: 121 seconds)
2017-01-11 11:23:20	wyvern	Is there a way to map back to source line numbers in perf's disassembly?
2017-01-11 11:24:04	Icefoz	wyvern: There is but you might need debug symbols enabled.
2017-01-11 11:24:24	◣	Devon (Mibbit@moz-qgvrhi.nh.comcast.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 11:24:39	◥	Devon (Mibbit@moz-qgvrhi.nh.comcast.net) has joined #rust-beginners
2017-01-11 11:25:53	◥	zako (zako@moz-ormegi.dynamicip.rima-tde.net) has joined #rust-beginners
2017-01-11 11:26:22	◥	TechnoCrunch (TechnoCrunc@moz-ant.ip3.100.101.IP) has joined #rust-beginners
2017-01-11 11:26:34	◥	supercurio (curio@moz-khkdde.cust.bredbandsbolaget.se) has joined #rust-beginners
2017-01-11 11:28:45	◣	stjepang (stjepang@moz-t6r2md.dynamic.amis.hr) has quit (Client exited)
2017-01-11 11:29:02	◣	humean (humean@moz-sl2fi3.cable.virginm.net) has quit (Quit: WeeChat 1.5)
2017-01-11 11:29:17	◥	ubsandroid_ (ubsan@moz-jgkpi0.l9nm.lsik.fb90.2607.IP) has joined #rust-beginners
2017-01-11 11:29:17	wyvern	Well, there isn't any obvious single bottleneck in perf
2017-01-11 11:29:53	wyvern	though this is also likely to be somewhat troublesome for perf since it's a pretty small loop with decent ILP so skid will likely be non-trivial
2017-01-11 11:29:59	◥	Riateche (Riateche@moz-2p4mi3.moscow.rt.ru) has joined #rust-beginners
2017-01-11 11:31:50	◥	duncan_ (paul@moz-uo3obu.og6e.vh7e.0306.2602.IP) has joined #rust-beginners
2017-01-11 11:31:51	◣	ubsandroid (ubsan@moz-cc6.3fu.114.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 11:31:56	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-11 11:32:07	◥	Jackneill_ (Jackneill@moz-d5febd.pool.digikabel.hu) has joined #rust-beginners
2017-01-11 11:32:35	◣	vulpes (vulpes@moz-bro3pq.dynamic.voo.be) has quit (Ping timeout: 121 seconds)
2017-01-11 11:34:32	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-11 11:36:16	◣	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has quit (Ping timeout: 121 seconds)
2017-01-11 11:37:23	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-11 11:38:08	◥	MarwenDo (MarwenDo@moz-27o.9h3.15.197.IP) has joined #rust-beginners
2017-01-11 11:39:46	◣	Hoff (kvirc@moz-s2sqq6.dhcp.inet.fi) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2017-01-11 11:40:38	◥	itmitica (Mibbit@moz-3vs.p2a.97.78.IP) has joined #rust-beginners
2017-01-11 11:40:39	◥	chandlerbing (chandlerbin@moz-l5fqmj.dynamic.ziggo.nl) has joined #rust-beginners
2017-01-11 11:41:06	◥	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has joined #rust-beginners
2017-01-11 11:41:17	◣	Devon (Mibbit@moz-qgvrhi.nh.comcast.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 11:41:25	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 11:41:47	itmitica	this does not work: https://is.gd/FEZhYN
2017-01-11 11:41:52	itmitica	should it?
2017-01-11 11:42:11	stephaneyfx	it shouldn't
2017-01-11 11:42:16	◣	Guest27 (textual@moz-us7b1e.rev.dnainternet.fi) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-11 11:42:31	stephaneyfx	vec! is a macro that expands to a bunch of statements
2017-01-11 11:42:38	itmitica	vec![5] is not a literal/pattern?
2017-01-11 11:42:46	stephaneyfx	itmitica, indeed
2017-01-11 11:43:01	wyvern	anything ending `!` is a macro
2017-01-11 11:43:05	◣	ghisvail___ (ghisvail@moz-jb7aoh.ic.ac.uk) has quit (Client exited)
2017-01-11 11:43:09	itmitica	aha, so the pattern in match is "static"
2017-01-11 11:43:24	itmitica	?
2017-01-11 11:43:25	◣	MarwenDo (MarwenDo@moz-27o.9h3.15.197.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 11:43:26	wyvern	it is literal syntax
2017-01-11 11:43:38	wyvern	as opposed to any expression
2017-01-11 11:43:56	itmitica	yet binding syntax works?
2017-01-11 11:44:20	◥	vulpes (vulpes@moz-mlao6l.dcb1.8e10.2788.2a02.IP) has joined #rust-beginners
2017-01-11 11:44:48	itmitica	when using a variable name, there are also a couple of statements being expanded: let x...; x=...
2017-01-11 11:45:42	stephaneyfx	itmitica, i'm not sure to understand
2017-01-11 11:46:16	itmitica	if i replace vec![5] with a variable name, it performs a pattenr based binding
2017-01-11 11:46:29	itmitica	why a macro is not performed
2017-01-11 11:46:39	itmitica	seems arbitrary
2017-01-11 11:46:55	stephaneyfx	the pattern must be made of a "destructuring" expression
2017-01-11 11:47:01	stephaneyfx	let me give you an example
2017-01-11 11:47:23	◥	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has joined #rust-beginners
2017-01-11 11:47:56	itmitica	https://is.gd/8YddJX
2017-01-11 11:48:20	◥	MarwenDo (MarwenDo@moz-27o.9h3.15.197.IP) has joined #rust-beginners
2017-01-11 11:51:06	blashyrk	is there any way to "cheat" using &mut self on a method that has signature fn something(&self, ...) ?
2017-01-11 11:51:22	◥	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has joined #rust-beginners
2017-01-11 11:51:31	misdreavus	Cell/RefCell, if you must
2017-01-11 11:51:48	◥	davs_ (davs@moz-h96idq.pool.digicable.sk) has joined #rust-beginners
2017-01-11 11:52:17	blashyrk	misdreavus: thanks!
2017-01-11 11:52:32	stephaneyfx	itmitica, in your example, `shadow_x` just creates a binding to the vector
2017-01-11 11:53:06	stephaneyfx	itmitica, vec! may call some functions under the hood, and function calls cannot appear in a pattern. here is why...
2017-01-11 11:53:35	◣	ubsandroid_ (ubsan@moz-jgkpi0.l9nm.lsik.fb90.2607.IP) has quit (Quit: <3)
2017-01-11 11:53:42	supercurio	the comments on Hacker News 
2017-01-11 11:53:49	◥	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has joined #rust-beginners
2017-01-11 11:53:53	◥	sargas (sargas@moz-863roc.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-11 11:53:58	stephaneyfx	if you have y and you try to match it to f(x), you need to find the proper x, which is not always possible and would require computing the inverse of f
2017-01-11 11:54:01	supercurio	(oops) https://news.ycombinator.com/item?id=13375337  are a great read! Regarding tokio 0.1 release
2017-01-11 11:54:04	~steveklabnik	:)
2017-01-11 11:54:04	stephaneyfx	itmitica, ^
2017-01-11 11:54:26	◣	davs (davs@moz-ni1ugg.bratislava.digicable.sk) has quit (Ping timeout: 121 seconds)
2017-01-11 11:55:04	◣	degausser (Thunderbird@moz-midec3.dyn.plus.net) has quit (Ping timeout: 121 seconds)
2017-01-11 11:57:07	sargas	Could someone explain what black magic is done in as_str()? https://github.com/rust-lang/rust/blob/5fbf3bf841cbe666bbee0e682f60d9d5c74ca709/src/libcollections/string.rs#L790
2017-01-11 11:57:20	itmitica	stephaneyfx: "just creates a binding to the vector" is not an accurate description, i think :) there is some action going on under the hood; the same with the macro, there is some action going under the hood, why not performing it?
2017-01-11 11:57:50	sargas	I thought converting String to &str, though cheap, would involve more code :)
2017-01-11 11:57:50	itmitica	it steps away from pattern matching to action either way
2017-01-11 11:58:26	stephaneyfx	sargas, it is an auto coercion
2017-01-11 11:58:48	stephaneyfx	deref* coercion
2017-01-11 11:58:50	sargas	stephaneyfx: So a compiler internal?
2017-01-11 11:58:56	sargas	Hmm
2017-01-11 11:59:02	stephaneyfx	sargas, check https://doc.rust-lang.org/book/deref-coercions.html
2017-01-11 11:59:10	◣	davs_ (davs@moz-h96idq.pool.digicable.sk) has quit (Ping timeout: 121 seconds)
2017-01-11 11:59:17	sargas	So it relies on the Deref trait implementation?
2017-01-11 11:59:19	stephaneyfx	&String auto-coerces to &str
2017-01-11 11:59:22	◣	Riateche (Riateche@moz-2p4mi3.moscow.rt.ru) has quit (Quit: Leaving)
2017-01-11 11:59:38	stephaneyfx	sargas, afaik yes
2017-01-11 11:59:58	sargas	Oh, so this: https://github.com/rust-lang/rust/blob/5fbf3bf841cbe666bbee0e682f60d9d5c74ca709/src/libcollections/string.rs#L1746
2017-01-11 12:00:04	sargas	Got it thanks!
2017-01-11 12:00:06	stephaneyfx	itmitica, binding does not requires calling a function
2017-01-11 12:00:20	stephaneyfx	sargas, correct
2017-01-11 12:00:48	◣	sscott (Thunderbird@moz-lksml6.stvt.i7og.0c7d.2a02.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 12:01:03	radix-M	Is there any way to abstract over integer types if I want to use e.g. saturating_add?
2017-01-11 12:01:31	@mbrubeck	radix-M: The num-traits crate has http://rust-num.github.io/num/num_traits/ops/saturating/trait.Saturating.html
2017-01-11 12:01:42	itmitica	stephaneyfx: under the hood, i bet it does?
2017-01-11 12:01:43	radix-M	mbrubeck: oh nice
2017-01-11 12:01:52	stephaneyfx	itmitica, matching to vec! would be similar (in a way) to matching y to f(x) where f is a function, and as explained earlier, this is not allowed for multiple reasons (for one, not all function are inversible and even when they are, good luck computing the inverse)
2017-01-11 12:02:08	radix-M	too bad derive_more doesn't support it :P
2017-01-11 12:02:10	@mbrubeck	radix-M: Also http://rust-num.github.io/num/num_traits/int/trait.PrimInt.html which brings in a bunch of other useful traits at the same time
2017-01-11 12:02:15	stephaneyfx	itmitica, you just lost your bet
2017-01-11 12:02:34	stephaneyfx	binding is not a function call
2017-01-11 12:02:34	itmitica	stephaneyfx: i'm fine with that :)
2017-01-11 12:03:29	◣	hellerbarde (phil@moz-c49f28.vsos.ethz.ch) has quit (Quit: bye)
2017-01-11 12:03:42	stephaneyfx	itmitica, `match vec![5] { v => ... }` is similar to `let v = vec![5];`, at least for the pattern part
2017-01-11 12:03:57	stephaneyfx	itmitica, does it help?
2017-01-11 12:04:01	◥	LLBlumire (LLBlumire@moz-n9v987.aqhk.68od.0388.2a01.IP) has joined #rust-beginners
2017-01-11 12:04:07	◥	caconym (caconym@moz-klghvh.wa.comcast.net) has joined #rust-beginners
2017-01-11 12:04:27	itmitica	ok, i got it: must be a "destructuring" expression, function calls & co. are not "destructuring" expression
2017-01-11 12:04:40	stephaneyfx	itmitica, correct
2017-01-11 12:04:59	itmitica	stephaneyfx: thk for your time :)
2017-01-11 12:05:02	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 12:05:07	stephaneyfx	itmitica, you're welcome :)
2017-01-11 12:05:09	◣	sargas (sargas@moz-863roc.hfc.comcastbusiness.net) has quit (Quit: Leaving)
2017-01-11 12:06:16	◣	itmitica (Mibbit@moz-3vs.p2a.97.78.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 12:06:38	◥	davs (davs@moz-fhfed8.pool.digicable.sk) has joined #rust-beginners
2017-01-11 12:06:53	radix-M	that makes me wonder though, it seems that derive_more (or another macro) should be able to generate impls for any trait
2017-01-11 12:07:06	◣	rkruppe (chatzilla@moz-3nj.rnu.131.95.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 12:07:08	◥	rudy (rustedwolf@moz-9bd5uq.dynamic.chello.pl) has joined #rust-beginners
2017-01-11 12:07:56	radix-M	oh, and there's a crate called newtype_derive, I guess I'll try that
2017-01-11 12:09:24	◥	Riateche (Riateche@moz-2egmgl.dral.67ba.2168.2a02.IP) has joined #rust-beginners
2017-01-11 12:09:26	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 12:09:48	◥	humean (humean@moz-sl2fi3.cable.virginm.net) has joined #rust-beginners
2017-01-11 12:10:00	Riateche	can someone explain how to work with [replace] overrides in cargo without putting them in the repository?
2017-01-11 12:10:04	Moonlightning	playbot: match vec![5] { v => {} }
2017-01-11 12:10:37	Moonlightning	playbot-mini: fn main() { match vec![5] { v => {} } }
2017-01-11 12:10:40	⚡	Notice(playbot-mini): warning: unused variable: `v`, #[warn(unused_variables)] on by default
2017-01-11 12:10:40	⚡	Notice(playbot-mini): (output truncated; full output at http://bit.ly/2j20dlk)
2017-01-11 12:10:51	◣	humean (humean@moz-sl2fi3.cable.virginm.net) has quit (Quit: WeeChat 1.6)
2017-01-11 12:11:18	radix-M	crap, actually it looks like newtype_derive doesn't support arbitrary traits either
2017-01-11 12:11:24	Moonlightning	…oh, vec![] returns the Vec it creates, and you can totally match on that.
2017-01-11 12:11:29	◥	mrutter (mrutter@moz-sl2fi3.cable.virginm.net) has joined #rust-beginners
2017-01-11 12:11:42	◥	davs_ (davs@moz-tc8r0n.bratislava.digicable.sk) has joined #rust-beginners
2017-01-11 12:12:14	stephaneyfx	Moonlightning, yes
2017-01-11 12:12:36	◥	nhlfr (nhlfr@moz-pds.37e.62.178.IP) has joined #rust-beginners
2017-01-11 12:12:42	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-11 12:12:49	◣	nhlfr (nhlfr@moz-pds.37e.62.178.IP) has quit (Quit: WeeChat 1.5)
2017-01-11 12:12:57	◣	davs (davs@moz-fhfed8.pool.digicable.sk) has quit (Ping timeout: 121 seconds)
2017-01-11 12:12:58	stephaneyfx	Moonlightning, but the number of patterns you can match on is... limited
2017-01-11 12:13:21	Moonlightning	advanced slice patterns pls
2017-01-11 12:13:43	◥	nhlfr (nhlfr@moz-pds.37e.62.178.IP) has joined #rust-beginners
2017-01-11 12:13:55	◣	mrutter (mrutter@moz-sl2fi3.cable.virginm.net) has quit (Quit: WeeChat 1.6)
2017-01-11 12:14:00	◥	mrutter (mrutter@moz-sl2fi3.cable.virginm.net) has joined #rust-beginners
2017-01-11 12:14:49	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-11 12:15:31	◥	Kreest_ (Kreest@moz-g2bnqo.globonet.hu) has joined #rust-beginners
2017-01-11 12:16:15	◥	mib_l1jks4 (Mibbit@moz-vqm.s5u.25.69.IP) has joined #rust-beginners
2017-01-11 12:16:28	◣	mib_l1jks4 (Mibbit@moz-vqm.s5u.25.69.IP) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 12:17:30	◣	ngqrl (ngqrl@moz-vqjugs.cp89.ofd7.0e35.2a01.IP) has quit (Quit: Bye!)
2017-01-11 12:18:05	◣	bluss (bluss@moz-9sooj3.dynamic.simnet.is) has quit (Ping timeout: 121 seconds)
2017-01-11 12:18:27	◣	Kreest__ (Kreest@moz-6lvq4a.pool.invitel.hu) has quit (Ping timeout: 121 seconds)
2017-01-11 12:18:59	◣	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 12:20:02	◣	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has quit (Connection closed)
2017-01-11 12:22:37	◣	caconym (caconym@moz-klghvh.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-11 12:23:14	◣	brson (brson@moz-j1n.kmu.58.172.IP) has quit (Quit: leaving)
2017-01-11 12:23:58	◥	bjz (bjz@moz-puppgq.tpgi.com.au) has joined #rust-beginners
2017-01-11 12:24:15	◣	Riateche (Riateche@moz-2egmgl.dral.67ba.2168.2a02.IP) has quit (Quit: Leaving)
2017-01-11 12:27:50	◣	blackgoat (blackgoat@moz-pme.0mb.201.119.IP) has quit (Quit: WeeChat 1.5)
2017-01-11 12:33:46	◥	mib_ug6trv (Mibbit@moz-m2momf.dynamic.ziggo.nl) has joined #rust-beginners
2017-01-11 12:33:53	◣	mib_ug6trv (Mibbit@moz-m2momf.dynamic.ziggo.nl) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 12:35:30	Ixrec	mir borrow checker so that patterns can stop being full of subtle soundness bugs please
2017-01-11 12:36:54	◥	tm (tom@moz-4bd.9to.255.49.IP) has joined #rust-beginners
2017-01-11 12:38:55	◥	aep (aep@moz-htb.j4r.120.37.IP) has joined #rust-beginners
2017-01-11 12:39:03	◥	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has joined #rust-beginners
2017-01-11 12:39:04	◣	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has quit (Connection closed)
2017-01-11 12:39:05	◥	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has joined #rust-beginners
2017-01-11 12:40:15	◥	mxmz (herb@moz-oph.qbr.88.219.IP) has joined #rust-beginners
2017-01-11 12:41:20	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 12:42:30	◣	aep (aep@moz-htb.j4r.120.37.IP) has quit (Quit: WeeChat 1.6)
2017-01-11 12:42:32	durka42	mir borrow checker so lifetimes can stop being lexical please
2017-01-11 12:43:27	◥	bluss (bluss@moz-9sooj3.dynamic.simnet.is) has joined #rust-beginners
2017-01-11 12:43:51	muskox	is there a way to set a timeout on a blocking operation?
2017-01-11 12:44:48	Sergio	Depends on the blocking operation. 
2017-01-11 12:45:07	◥	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has joined #rust-beginners
2017-01-11 12:45:25	muskox	http://aatxe.github.io/irc/irc/client/server/trait.Server.html the next() function on the iterator returned from that trait's iter() blocks
2017-01-11 12:45:37	◥	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined #rust-beginners
2017-01-11 12:45:44	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 12:47:39	◥	wallacoloo_____ (colin@moz-2ps3tb.dhcp4.washington.edu) has joined #rust-beginners
2017-01-11 12:51:17	muskox	it eventually boils down to calling read() on a TcpStream (i think), but i'd rather not muck with the internals of the library
2017-01-11 12:51:37	◣	kimundi (kimundi@moz-nj9oht.b3iv.ofag.57bc.2002.IP) has quit (Quit: ZNC - 1.6.0 - http://znc.in)
2017-01-11 12:52:28	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 12:53:28	◥	undeadleech (undeadleech@moz-utv8h6.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-11 12:53:39	◣	waffles (wafflespean@moz-f27.9u1.23.1.IP) has quit (Quit: C'yall later...)
2017-01-11 12:53:45	bushidoboy	Can anyone explain the difference between str.to_owned() and str.to_string()?
2017-01-11 12:53:53	◣	holgarB (holger@moz-ivdssg.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-11 12:53:55	bushidoboy	Is one inherently better than the other?
2017-01-11 12:53:58	~steveklabnik	bushidoboy: in the end? nothing
2017-01-11 12:54:05	~steveklabnik	they're two different generic interfaces
2017-01-11 12:54:08	~steveklabnik	that are both valid for str
2017-01-11 12:54:11	◣	chandlerbing (chandlerbin@moz-l5fqmj.dynamic.ziggo.nl) has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2017-01-11 12:54:15	~steveklabnik	the standard style is to use to_string
2017-01-11 12:54:19	~steveklabnik	to_owned is for generic code only
2017-01-11 12:54:40	bushidoboy	As in just for use with generics?
2017-01-11 12:54:47	stephaneyfx	but to_owned is likely to perform better as of now afaik
2017-01-11 12:55:41	~steveklabnik	stephaneyfx: nope
2017-01-11 12:55:46	~steveklabnik	they're exactly the same
2017-01-11 12:55:50	~steveklabnik	in the past that was true, but no more
2017-01-11 12:55:58	Ixrec	I remember there being a PR specifically to make them the same because that was silly
2017-01-11 12:56:04	~steveklabnik	bushidoboy: yes, as in fn foo<T: ToOwned(x: T) <- now you use .to_owned
2017-01-11 12:56:06	stephaneyfx	ahh ok thanks for correcting
2017-01-11 12:56:10	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 12:56:16	~steveklabnik	Ixrec: yeah it required a language feature
2017-01-11 12:56:30	Ixrec	bushidoboy: https://doc.rust-lang.org/std/borrow/enum.Cow.html is an excellent example of using ToOwned for maximal genericity
2017-01-11 12:56:32	◥	kimundi (kimundi@moz-nj9oht.b3iv.ofag.57bc.2002.IP) has joined #rust-beginners
2017-01-11 12:56:42	Ixrec	steveklabnik: specialization?
2017-01-11 12:56:48	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 12:56:54	bushidoboy	Gotcha gotcha. So in every other case, to_string() should work just fine?
2017-01-11 12:57:07	◥	lazypenguin (lazypenguin@moz-4csopk.udff.dj18.a601.2605.IP) has joined #rust-beginners
2017-01-11 12:57:13	◣	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has quit (Connection closed)
2017-01-11 12:57:30	Ixrec	yeah, to_string is "more specific" than to_owned in a sense, and there's an advantage to using more specific methods when being generic doesn't buy you anything: more info to the type checker
2017-01-11 12:57:48	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-11 12:58:19	stephaneyfx	i need to dig into the code to see how that's made possible, but i thought to_string goes through the Display machinery making it less efficient
2017-01-11 12:58:54	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 12:59:03	misdreavus	generally, yes, to_string uses Display for its working
2017-01-11 12:59:13	stephaneyfx	hmmm there's an impl ToString for str 
2017-01-11 12:59:14	misdreavus	there was a PR a while back specifically to specialize it for str tho
2017-01-11 12:59:36	misdreavus	so that it just does what to_owned does
2017-01-11 13:00:37	stephaneyfx	what language feature was required for this change?
2017-01-11 13:00:44	durka42	specialization
2017-01-11 13:00:57	stephaneyfx	but specialization is not stable
2017-01-11 13:01:03	misdreavus	std can still use it tho
2017-01-11 13:01:22	Ixrec	std is special and gets to use unstable features on stable
2017-01-11 13:01:24	stephaneyfx	i see. thank you all.
2017-01-11 13:01:31	misdreavus	you should see the stack of feature gates std uses, i looked at it today
2017-01-11 13:01:33	◣	xliiv (xliiv@moz-b6n0ql.icpnet.pl) has quit (Ping timeout: 121 seconds)
2017-01-11 13:01:39	Ixrec	which is often a big part of proving a feature's worthiness of true stabilization
2017-01-11 13:01:47	stephaneyfx	misdreavus, i'm afraid of heights :p
2017-01-11 13:01:50	misdreavus	https://github.com/rust-lang/rust/blob/master/src/libstd/lib.rs#L233-L306
2017-01-11 13:01:53	misdreavus	:3
2017-01-11 13:02:17	▷	misdreavus apparently still had that tab open
2017-01-11 13:02:17	durka42	so specialization is not stable, but there is sort of guarantee that something at least as powerful as it will continue to exist
2017-01-11 13:03:22	Ixrec	iirc the biggest remaining question was whether we wanted to allow more permissive things like "lattice impls" or stick to the strict intersection rule
2017-01-11 13:03:27	stephaneyfx	durka42, and i hope it will reach stable in the near future :)
2017-01-11 13:03:29	Ixrec	was there anything else?
2017-01-11 13:04:24	durka42	Ixrec: there might be remaining questions about soundness WRT specializing on lifetimes?
2017-01-11 13:04:28	durka42	not sure what the status is
2017-01-11 13:04:36	misdreavus	i dunno, i haven't paid as much attention to stabilization as i would have liked
2017-01-11 13:04:37	Ixrec	lifetime specialization is a thing!?
2017-01-11 13:04:51	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 13:04:56	bluss	unless something has changed, lifetime specialization won't be implemented
2017-01-11 13:05:08	durka42	right, I mean soundness as in making sure it is always prevented
2017-01-11 13:05:13	Ixrec	ah
2017-01-11 13:05:15	◣	genpaku (genpaku@moz-jgn.dvo.191.107.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 13:05:25	◥	genpaku (genpaku@moz-jgn.dvo.191.107.IP) has joined #rust-beginners
2017-01-11 13:05:31	Ixrec	so making sure that type specialization doesn't accidentally result in unsound lifetime specializations?
2017-01-11 13:05:37	misdreavus	aww, i can't do something crazy with a type if i know it's 'static?
2017-01-11 13:05:49	◥	chandlerbing (chandlerbin@moz-l5fqmj.dynamic.ziggo.nl) has joined #rust-beginners
2017-01-11 13:06:19	Ixrec	https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md#interaction-with-lifetimes totally forgot this part
2017-01-11 13:06:26	SiIky	RustFmt is so smart it scares me!
2017-01-11 13:06:28	SiIky	O_o
2017-01-11 13:08:04	◣	rolice (Thunderbird@moz-o5od7u.spectrumnet.bg) has quit (Client exited)
2017-01-11 13:10:17	◣	muskox (muskox@moz-8mbs17.res.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-11 13:10:41	◥	Binero (Binero@moz-tqrl52.sji7.g8ie.a03f.2a02.IP) has joined #rust-beginners
2017-01-11 13:11:35	◥	degausser (Thunderbird@moz-midec3.dyn.plus.net) has joined #rust-beginners
2017-01-11 13:11:46	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 13:12:13	◣	chandlerbing (chandlerbin@moz-l5fqmj.dynamic.ziggo.nl) has quit (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
2017-01-11 13:14:55	◣	steve (steve@moz-1op8i8.gps.caltech.edu) has quit (Quit: WeeChat 1.6)
2017-01-11 13:16:02	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 13:18:19	◣	stephaneyfx (stephaneyfx@moz-bflle1.blocka-151.stargate.ca) has quit (Quit: Leaving)
2017-01-11 13:18:54	◥	space-wi_ (space-wizar@moz-2vatbh.res.rr.com) has joined #rust-beginners
2017-01-11 13:19:01	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 13:20:13	◣	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-11 13:21:48	◣	Kreest_ (Kreest@moz-g2bnqo.globonet.hu) has quit (Connection closed)
2017-01-11 13:22:03	◣	vmeson (rmacleod@moz-hq5.1km.224.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 13:23:05	◣	hackebeilchen (Peter@moz-tkduhv.ip-addr.inexio.net) has quit (Connection closed)
2017-01-11 13:23:48	◥	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-11 13:24:06	◣	brson (brson@moz-cfhap5.mtv2.mozilla.com) has quit (Ping timeout: 121 seconds)
2017-01-11 13:24:28	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 13:25:24	◣	bjz (bjz@moz-puppgq.tpgi.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 13:26:42	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 13:28:00	voider1	http://prntscr.com/dug3fs I'm setting the localkeys in the setup(), but then in test_get_me() they're empty again, how come?
2017-01-11 13:29:04	◣	Psilidae (Psilidae@moz-kng1rg.at.cox.net) has quit (Ping timeout: 121 seconds)
2017-01-11 13:29:48	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-11 13:30:57	◣	bushidoboy (dbishop@moz-ok6.k7o.229.192.IP) has quit (Quit: WeeChat 1.6)
2017-01-11 13:31:25	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 13:31:29	◥	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined #rust-beginners
2017-01-11 13:31:42	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-11 13:32:06	◥	sssilver (textual@moz-bac.97e.122.38.IP) has joined #rust-beginners
2017-01-11 13:32:18	durka42	tests are run in separate threads
2017-01-11 13:32:26	voider1	So I can't prepare and share data?
2017-01-11 13:32:31	durka42	you can change that with the RUST_TEST_THREADS environment variable, but even then I wouldn't count on ordering
2017-01-11 13:32:32	durka42	no
2017-01-11 13:32:38	durka42	the rust test harness is pretty barebones
2017-01-11 13:32:40	durka42	!crate stainless
2017-01-11 13:32:41	rustbot	stainless (0.1.10) - Organized, flexible testing framework. -> https://crates.io/crates/stainless <https://docs.rs/crate/stainless>
2017-01-11 13:32:47	durka42	^ here is another one that I know of
2017-01-11 13:33:04	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-11 13:33:13	◣	denisg (denisg@moz-k19q37.dip0.t-ipconnect.de) has quit (Client exited)
2017-01-11 13:33:46	◥	space-wizard (space-wizar@moz-2vatbh.res.rr.com) has joined #rust-beginners
2017-01-11 13:33:55	◥	JelteF_ (Mibbit@moz-1lk5hs.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-11 13:33:59	◣	JelteF_ (Mibbit@moz-1lk5hs.ftth.glasoperator.nl) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 13:34:08	◥	JelteF_ (Mibbit@moz-1lk5hs.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-11 13:34:59	◣	TheCycoONE (quassel@moz-d4s.1g6.223.162.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 13:35:04	◣	space-wi_ (space-wizar@moz-2vatbh.res.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-11 13:35:15	JelteF_	What is a nice way to check if a vec of enums contains a specific variant of that enum
2017-01-11 13:35:28	◥	mib_n2gbay (Mibbit@moz-rk1ltb.client.mchsi.com) has joined #rust-beginners
2017-01-11 13:35:29	JelteF_	I'm looking at the iter().any() method
2017-01-11 13:35:36	◣	wgreenberg (william@moz-biegmh.com) has quit (Ping timeout: 121 seconds)
2017-01-11 13:35:39	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 13:35:45	◥	stuart_ (stuart@moz-igf312.aq6a.5gh1.2d80.2604.IP) has joined #rust-beginners
2017-01-11 13:35:54	durka42	that seems good
2017-01-11 13:36:05	◣	mib_n2gbay (Mibbit@moz-rk1ltb.client.mchsi.com) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 13:36:37	JelteF_	how do I make a predicate that tests for the enum variant?
2017-01-11 13:37:12	JelteF_	can I just do MyEnum == MyEnum::Variant1
2017-01-11 13:37:25	durka42	if you have #[derive(PartialEq)] on the enum then yes
2017-01-11 13:37:25	bluss	you can use match.   match *elt { MyEnum::Variant1 => true, _ => false }
2017-01-11 13:37:47	Ixrec	if your enum variants are all single values and you derived Eq or PartialEq, yeah
2017-01-11 13:37:58	◥	Uther (Thunderbird@moz-gssp49.fbx.proxad.net) has joined #rust-beginners
2017-01-11 13:38:01	JelteF_	they contain stuff
2017-01-11 13:38:10	JelteF_	they're tuple structs
2017-01-11 13:38:21	durka42	easier to use match then
2017-01-11 13:38:22	Ixrec	then you'll probably need to do something like |e| if let Enum::Variant(_) = e { true } else { false }
2017-01-11 13:38:35	◣	wallacoloo_____ (colin@moz-2ps3tb.dhcp4.washington.edu) has quit (Client exited)
2017-01-11 13:38:42	Hail_Spacecake	you can do match x { MyStruct(a, b, c, d) => , _ => }
2017-01-11 13:38:54	misdreavus	MyStruct(..)
2017-01-11 13:39:17	JelteF_	alright
2017-01-11 13:39:21	misdreavus	_ is one value, .. is any number of them
2017-01-11 13:40:00	JelteF_	actually, i'm checking if it's the unit type in the enum
2017-01-11 13:40:06	JelteF_	so I can use the ==
2017-01-11 13:40:15	JelteF_	thanks everyone
2017-01-11 13:41:07	voider1	How should I document my code?
2017-01-11 13:42:12	Ixrec	have a good README.md for github and use the standard doc comments everywhere so docs.rs does all the hard work once you publish to crates.io?
2017-01-11 13:43:21	Ixrec	I think the "elevator pitch" and intro tutorial usually go in both places since you never know where somebody will land
2017-01-11 13:43:54	◣	degausser (Thunderbird@moz-midec3.dyn.plus.net) has quit (Ping timeout: 121 seconds)
2017-01-11 13:44:43	◥	holgarB (holger@moz-ivdssg.dip0.t-ipconnect.de) has joined #rust-beginners
2017-01-11 13:45:19	◥	awygle (Mibbit@moz-no84m6.res.rr.com) has joined #rust-beginners
2017-01-11 13:46:32	◣	philipp1 (philipp@moz-54056u.reverse.mdcc-fun.de) has quit (Quit: Leaving.)
2017-01-11 13:47:48	◥	wgreenberg (william@moz-biegmh.com) has joined #rust-beginners
2017-01-11 13:48:01	◥	tyoc213 (tyoc@moz-44p.8oo.75.184.IP) has joined #rust-beginners
2017-01-11 13:48:11	◣	nonelement (nonelement@moz-uouu4n.nonelement.com) has quit (Quit: Lost terminal)
2017-01-11 13:48:29	◣	SiIky (SiIky@moz-dbrsl2.5ghr.hl2k.08a0.2001.IP) has quit (Quit: Leaving)
2017-01-11 13:48:55	◥	tyoc (tyoc@moz-44p.8oo.75.184.IP) has joined #rust-beginners
2017-01-11 13:49:28	wyvern	How expected is it for `-C target-cpu=native` to produce slower code? I'm consistently seeing about a 10% slowdown compared to defaults.
2017-01-11 13:50:03	◥	tyoc__ (tyoc@moz-44p.8oo.75.184.IP) has joined #rust-beginners
2017-01-11 13:50:56	◣	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 13:51:50	wyvern	This CPU is not terribly exotic (Broadwell i7)
2017-01-11 13:51:54	◣	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 13:52:05	◣	tyoc213 (tyoc@moz-44p.8oo.75.184.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 13:52:50	◣	mwoodruff (mwoodruff@moz-b97lm9.pa.comcast.net) has left #rust-beginners
2017-01-11 13:53:11	◣	tyoc (tyoc@moz-44p.8oo.75.184.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 13:54:17	◣	tyoc__ (tyoc@moz-44p.8oo.75.184.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 13:54:46	◣	yufengwng (yufeng@moz-3a5.284.10.129.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 13:57:11	◥	muskox (muskox@moz-8mbs17.res.rr.com) has joined #rust-beginners
2017-01-11 13:59:51	◣	himi (sjjf@moz-r3ta53.internode.on.net) has quit (Ping timeout: 121 seconds)
2017-01-11 14:03:10	@mbrubeck	wyvern: Seems like a bad choice by LLVM.  `-C target-cpu=native` just makes more instructions available, but it sounds like in this case it's better off not using them.
2017-01-11 14:03:30	◥	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has joined #rust-beginners
2017-01-11 14:03:46	◥	bjz (bjz@moz-q4evh9.optusnet.com.au) has joined #rust-beginners
2017-01-11 14:04:00	wyvern	OK. As long as this isn't sufficiently interesting for compiler people to want to poke at it, I'm happy to ignore it and keep using the defaults.
2017-01-11 14:04:24	◥	himi (sjjf@moz-r3ta53.internode.on.net) has joined #rust-beginners
2017-01-11 14:04:45	WindowsBunnyKeyboard	wyvern: It's basically LLVM's fault, not much Rust can do
2017-01-11 14:04:56	WindowsBunnyKeyboard	wyvern: Feel free to help the LLVM folks improve it though
2017-01-11 14:05:10	◥	yufengwng (yufeng@moz-3a5.284.10.129.IP) has joined #rust-beginners
2017-01-11 14:05:35	wyvern	are they usually interested in such things?
2017-01-11 14:06:08	wyvern	I feel like this is probably a decent test case because it's a fairly small tight loop with no side effects, but if they're not actually interested in working on such things, I'll move on to other problems
2017-01-11 14:06:12	◥	solenodic (solenodic@moz-o2k.dlj.109.66.IP) has joined #rust-beginners
2017-01-11 14:07:25	WindowsBunnyKeyboard	I dunno, there's only one way to find out
2017-01-11 14:07:40	wyvern	true
2017-01-11 14:11:22	◥	snake_eyes (Mibbit@moz-dsea4e.cable.virginm.net) has joined #rust-beginners
2017-01-11 14:11:40	◣	vulpes (vulpes@moz-mlao6l.dcb1.8e10.2788.2a02.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 14:11:54	◥	blue_seale (blue_seale@moz-u9j.qgu.7.46.IP) has joined #rust-beginners
2017-01-11 14:12:33	◥	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has joined #rust-beginners
2017-01-11 14:12:34	◣	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has quit (Connection closed)
2017-01-11 14:12:36	◥	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has joined #rust-beginners
2017-01-11 14:12:38	◣	snake_eyes (Mibbit@moz-dsea4e.cable.virginm.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 14:15:25	◣	ivesen (ivesen@moz-f6la1q.stayon.no) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2017-01-11 14:16:46	◣	bjz (bjz@moz-q4evh9.optusnet.com.au) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 14:19:19	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-11 14:20:05	onelson	so, I'm doing a binding to a C lib. I ran the lib through bindgen, and it spat out a rust file (great!)
2017-01-11 14:20:14	◣	blue_seale (blue_seale@moz-u9j.qgu.7.46.IP) has quit (Client exited)
2017-01-11 14:20:33	onelson	I'm working on a safe wrapper as outlined in the ffi docs, which seems to make good sense, but I have a gap in my C knowledge
2017-01-11 14:21:05	onelson	this function has a param of `text: *const ::std::os::raw::c_char` and it looks like I should be able to take a String in the wrapper, but I'm not sure how to convert
2017-01-11 14:21:22	onelson	isn't char just a single charater?
2017-01-11 14:21:33	onelson	doesn't make sense to me
2017-01-11 14:21:53	@mbrubeck	c_char is an alias for i8 or u8 (depending on the platform)
2017-01-11 14:22:03	@mbrubeck	also, C libraries probably expect NUL-terminated strings, while Rust strings are not NUL-terminated
2017-01-11 14:22:18	Ixrec	which is why Rust has CString and CStr
2017-01-11 14:22:28	@mbrubeck	https://doc.rust-lang.org/std/ffi/struct.CString.html and CStr have convenient ways for converting a  Rust string to a NUL-terminated `*const c_char` .
2017-01-11 14:22:33	durka42	C has little to n?o distinction between pointers and arrays, so *const c_char is effectively an array of chars
2017-01-11 14:22:37	onelson	hmm, ok.
2017-01-11 14:23:29	onelson	oh hell yes
2017-01-11 14:23:38	onelson	CString looks like what I want
2017-01-11 14:23:45	ubsan	durka42: :(
2017-01-11 14:23:55	ubsan	durka42: that's not accuracte
2017-01-11 14:23:55	onelson	you are all a fountain of useful information
2017-01-11 14:23:59	ubsan	*accurate
2017-01-11 14:24:08	ubsan	C arrays just decay to pointers real quickly
2017-01-11 14:24:11	durka42	ubsan: I knew a language lawyer would show up to tell me that pointers and arrays are different, but it's an unimportant difference
2017-01-11 14:24:15	ubsan	arrays and pointers are very different type
2017-01-11 14:24:22	ubsan	it's a hugely important difference
2017-01-11 14:24:46	Ixrec	I used to believe this was a pedantic thing until someone pointed out sizeof() "does the right thing" on actual array types
2017-01-11 14:24:55	Ixrec	now I just believe C is silly and we should all use Rust instead
2017-01-11 14:25:03	ubsan	and that an array in a struct is not a pointer
2017-01-11 14:25:22	onelson	lol Ixrec I think wrapping existing libs is a good step towards this
2017-01-11 14:25:30	Ixrec	yep
2017-01-11 14:25:42	ubsan	the only time an array behaves like a pointer, besides for coercions, is that dumb thing where arrays in function parameters are actually pointers
2017-01-11 14:25:44	durka42	but the answer to the question "isn't this just pointing a single char?" is that arrays and pointers are the same if you look at what is stored in memory
2017-01-11 14:25:45	ubsan	because backward compatibility
2017-01-11 14:25:51	◣	hardenedapple (hardenedapp@moz-cu794c.range86-172.btcentralplus.com) has quit (Quit: WeeChat 1.6)
2017-01-11 14:25:59	durka42	and oh hey look that was the question I was answering!! who could have guessed?
2017-01-11 14:26:10	ubsan	durka42: an integer and a pointer is the same if you look at what is stored in memory
2017-01-11 14:26:10	◥	frogmella (Mibbit@moz-fum8cl.wa.comcast.net) has joined #rust-beginners
2017-01-11 14:26:20	ubsan	"let x = &0; let y = 0;" oh these are the same actually
2017-01-11 14:26:21	durka42	I'm not having this discussion
2017-01-11 14:26:24	Ixrec	a string and a pointer are the same if you look at what's in memory =P
2017-01-11 14:26:25	durka42	go read your FQA
2017-01-11 14:26:36	ubsan	it's an important distinction, dangit
2017-01-11 14:26:36	onelson	durka42, yeah, but I figured a pointer to char would be analogous to a specific index access in an array
2017-01-11 14:26:36	Ixrec	type systems matter!
2017-01-11 14:26:42	onelson	I still don't quite get this
2017-01-11 14:26:46	Ixrec	nah the FQA is way too far in the other direction
2017-01-11 14:26:51	ubsan	onelson: an array is not a pointer
2017-01-11 14:26:59	ubsan	a pointer can point to a specific element in an array
2017-01-11 14:27:12	durka42	it's a pointer to the first element of the array, and the C convention is that a string runs from there until a null byte
2017-01-11 14:27:21	onelson	ohhhhh
2017-01-11 14:27:22	onelson	I get it
2017-01-11 14:27:25	durka42	(this is why C programs crash so much)
2017-01-11 14:27:25	onelson	that's dumb
2017-01-11 14:27:28	onelson	my goodness
2017-01-11 14:27:32	Ixrec	yes, that is dumb
2017-01-11 14:27:35	onelson	lmao
2017-01-11 14:27:41	onelson	like
2017-01-11 14:27:43	ubsan	that's... not why C programs crash so much
2017-01-11 14:27:43	onelson	yikes
2017-01-11 14:27:44	ubsan	it's just a dumb string representation
2017-01-11 14:27:54	supercurio	when finding errors in the Rust book, where should I report them? (ping steveklabnik)
2017-01-11 14:27:57	◥	mskalski (mskalski@moz-8u45af.opt.im) has joined #rust-beginners
2017-01-11 14:28:03	durka42	supercurio: issues at rust-lang/rust
2017-01-11 14:28:05	Ixrec	afaik almost all string classes in other languages do not do the null termination thing and actually store a length field they can access directly
2017-01-11 14:28:10	frogmella	Hi, all.  Is it possible to do suppress compiler warnings (eg. non_snake_case) via Cargo?  I'm trying to avoid annotating my code everywhere with compiler switches.
2017-01-11 14:28:32	ubsan	onelson: the reason that it is this way is because pointers are cheap to pass, and easy to implement
2017-01-11 14:28:32	onelson	I mean, I don't know about you but when I sit down to read a book I don't stop until I come across a blank page. That's how I know I'm done.
2017-01-11 14:28:34	durka42	frogmella: well you can run `cargo rustc -- -Anon_snake_case`
2017-01-11 14:28:44	Icefoz	frogmella: The obvious way to do that is to fix the things the compiler is warning about.  :-P
2017-01-11 14:28:51	ubsan	and therefore early C decided to do it that way
2017-01-11 14:29:00	onelson	ubsan, I'm sure there are very good and practical reasons for this, but eww.
2017-01-11 14:29:05	supercurio	durka42, thanks :)
2017-01-11 14:29:10	ubsan	onelson: I didn't say it was a good representation
2017-01-11 14:29:11	Ixrec	onelson: for more fun with c strings, you should read about strcat, strcpy, strcmp and all the slightly safer variants people had to invent because it's so so easy to misuse those functions that still aren't totally error-proof
2017-01-11 14:29:23	Icefoz	onelson: For null-terminated strings?  Practical, yes, but not good.
2017-01-11 14:29:26	Ixrec	at least one of those is banned where I work but I can't remember which one
2017-01-11 14:29:52	ubsan	onelson: these ^ are things because early C was written on machines where they trusted users
2017-01-11 14:29:56	ubsan	we don't really do that anymore
2017-01-11 14:30:08	onelson	I don't trust myself, let alone anyone else
2017-01-11 14:30:12	ubsan	that's the real reason C crashes; the APIs and language are all designed for trusting the user
2017-01-11 14:30:22	◣	Trangar (Trangar@moz-f81vll.ftth.glasoperator.nl) has quit (Quit: Leaving)
2017-01-11 14:30:45	frogmella	@durka42, oh, I'm "fixing" it--you can be sure! :P  So if my command is currently `cargo test -- --nocapture`, how to I add in the allow switch targeted to rustc?  Just tack it on after my nocapture?
2017-01-11 14:30:48	ubsan	at a time where you could trust the user; or at least, if the user screwed up, it was only their own stuff
2017-01-11 14:30:53	ubsan	see: gets
2017-01-11 14:30:58	Icefoz	Trusting the user was fine in 1973 because the user was right there and you could punch them in the nose if they did something wrong.
2017-01-11 14:30:59	◥	Guest29 (textual@moz-is83ac.ca.comcast.net) has joined #rust-beginners
2017-01-11 14:31:05	⚡	Guest29 is now known as ril
2017-01-11 14:31:06	onelson	once I get this off the ground, I'm going to loop back around and ask for some code review on how I've implemented the -sys crate
2017-01-11 14:31:18	onelson	because I've done bad things and I know it
2017-01-11 14:31:19	ubsan	as Icefoz says so wonderfully
2017-01-11 14:31:32	durka42	frogmella: I don't think there's any way to pass args to rustc for `cargo test`
2017-01-11 14:31:56	durka42	frogmella: maybe you can do `cargo rustc -- -Anon_snake_case --test` and then run the generated test binary
2017-01-11 14:32:27	ril	hi folks! just working through some project euler stuff to get the feel for the language
2017-01-11 14:32:29	ril	http://pastebin.com/iHKTzZ1r
2017-01-11 14:32:51	ril	why can't rust infer the type from the return value annotation? and how to I placate it?
2017-01-11 14:33:11	durka42	remove the semicolon
2017-01-11 14:33:33	Ixrec	you're accidentally returning () instead of Vec<usize>
2017-01-11 14:33:43	◣	sparky (quassel@moz-vun.nn7.191.199.IP) has quit (Quit: Goodbye)
2017-01-11 14:34:15	frogmella	:(  ok, thanks durka42--that explains why I couldn't find a solution!  :)
2017-01-11 14:34:17	ril	thanks!
2017-01-11 14:34:25	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 14:34:49	Ixrec	the sad part is if it weren't for that collect the compiler would've just told you to remove the semicolon
2017-01-11 14:34:53	ril	so all statements return unit, and implicit return has to be an expression?
2017-01-11 14:34:59	Ixrec	yes
2017-01-11 14:35:19	ril	is collect unecessary? isn't the type before the .collect() an iterator, not a vector?
2017-01-11 14:35:32	Ixrec	given your return type, collect is necessary
2017-01-11 14:35:47	Ixrec	the reason it confuses the compiler is that collect() requires inferring the type to collect into
2017-01-11 14:35:56	◥	sscott (Thunderbird@moz-lksml6.stvt.i7og.0c7d.2a02.IP) has joined #rust-beginners
2017-01-11 14:36:10	Ixrec	so it got stuck on that type inference before it realized you clearly did not mean to put that semicolon there
2017-01-11 14:36:20	onelson	awesome, CString has me moving forward again. Thanks.
2017-01-11 14:36:33	Ixrec	e.g. in https://is.gd/i7ZCCE I explicitly tell it what type collect() should use and then it does point at the semicolon for me
2017-01-11 14:38:50	◣	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has quit (Ping timeout: 121 seconds)
2017-01-11 14:39:09	Ixrec	(of course, in a larger program we'd probably want to return an iterator directly and let the caller decide whether or not this is the right time to collect()/do the final allocation)
2017-01-11 14:39:19	◣	mrutter (mrutter@moz-sl2fi3.cable.virginm.net) has quit (Quit: WeeChat 1.6)
2017-01-11 14:39:21	ril	that's a good point. what's the type for that iterator?
2017-01-11 14:39:30	ril	or better, how do I get the compiler to tell me/
2017-01-11 14:39:44	Ixrec	try to return it and look at the error message =)
2017-01-11 14:40:23	Ixrec	note that in the future you'll be able to write the return type as something like "impl Iterator<Item=usize>" instead of specifying exactly which concrete type the iterator is, but "impl Trait" is still an unstable feature
2017-01-11 14:41:00	durka42	don't bother, you can't write the type of this iterator
2017-01-11 14:41:08	durka42	you'd need to put it in a Box to return it
2017-01-11 14:41:27	Ixrec	o dam you're right
2017-01-11 14:41:30	◣	frogmella (Mibbit@moz-fum8cl.wa.comcast.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 14:41:42	durka42	also it contains a reference to a local variable, so... yeah just collect and return the Vec :)
2017-01-11 14:42:05	◥	ubsandroid_ (ubsan@moz-nvdnvq.bin9.gd67.fb90.2607.IP) has joined #rust-beginners
2017-01-11 14:42:15	◣	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has quit (Ping timeout: 121 seconds)
2017-01-11 14:42:20	◣	brson (brson@moz-cfhap5.mtv2.mozilla.com) has quit (Ping timeout: 121 seconds)
2017-01-11 14:42:27	◥	CoderPuppy (cpup@moz-5sb.69g.218.32.IP) has joined #rust-beginners
2017-01-11 14:43:03	Ixrec	you could write a struct that implements Iterator directly and only stores the bare minimum state needed to generate the values instead of precomputing all of them...
2017-01-11 14:43:07	Ixrec	but that probably isn't worth it
2017-01-11 14:43:16	◣	intrepion (Mibbit@moz-lnvhgg.or.comcast.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 14:43:26	◣	davs_ (davs@moz-tc8r0n.bratislava.digicable.sk) has quit (Ping timeout: 121 seconds)
2017-01-11 14:43:34	ril	i mean there is a crate that implements a streaming sieve
2017-01-11 14:44:05	◥	steve (steve@moz-1op8i8.gps.caltech.edu) has joined #rust-beginners
2017-01-11 14:44:08	◣	ghosss (textual@moz-rr8npu.fios.verizon.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-11 14:44:15	ril	I'm just trying to learn the idioms. this is a fine place to allocate for this problem.
2017-01-11 14:44:51	⚡	steve is now known as sobol
2017-01-11 14:45:13	◣	cpup (cpup@moz-osl.ktm.218.32.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 14:45:14	◣	ubsandroid (ubsan@moz-0ahffk.wa.comcast.net) has quit (Ping timeout: 121 seconds)
2017-01-11 14:45:41	ril	this there a nice way to write an inclusive range other than 0..n+1 ?
2017-01-11 14:45:56	~steveklabnik	not in stable yet
2017-01-11 14:46:09	◥	sargas (sargas@moz-863roc.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-11 14:46:13	◣	Jackneill_ (Jackneill@moz-d5febd.pool.digikabel.hu) has quit (A TLS packet with unexpected length was received.)
2017-01-11 14:46:42	sargas	Can someone explain why `contains()` is giving me the error it does? : https://is.gd/3BPFrE
2017-01-11 14:47:08	durka42	contains expects a reference
2017-01-11 14:47:13	durka42	to the element type
2017-01-11 14:47:13	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Connection closed)
2017-01-11 14:47:21	Ixrec	which happens to mean &&str
2017-01-11 14:47:25	Ixrec	as odd as that might seem
2017-01-11 14:47:40	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-11 14:47:58	sargas	That isn't odd though, the error is what tripped me since I never passed a `str`
2017-01-11 14:48:17	bluss	it says it in a different way at the bottom = note: expected type `&&str`
2017-01-11 14:48:18	sargas	But I guess it dereferenced &str, found a str, and that isn't the what it was expecting then
2017-01-11 14:48:19	misdreavus	it showed me "expected &&str, foudn &str"?
2017-01-11 14:48:22	durka42	look at the notes below the error, where it says expected &&str, found &str
2017-01-11 14:48:37	durka42	I think it sorta drills down to see what the smallest difference is
2017-01-11 14:48:46	Ixrec	yeah it's weird it gives a different pair of types in those two places
2017-01-11 14:48:50	misdreavus	ah, i was looking at the notes below the line, not the line itself
2017-01-11 14:48:50	bluss	sargas: it's trying to break it down to the part of the type that does not match
2017-01-11 14:48:52	durka42	like if you pass Option<A> for an Option<B> parameter, it will say "expected B, found A"
2017-01-11 14:48:57	Ixrec	ah
2017-01-11 14:48:58	bluss	sargas: so one level of references is removed
2017-01-11 14:49:24	bluss	"you passed &X where X was str but I expected X to be &str"
2017-01-11 14:49:38	sargas	I see, the notes at the bottom are what I need to account for
2017-01-11 14:49:58	Ixrec	reading the entire error message is always a good idea
2017-01-11 14:50:02	sargas	the "^^^^^^^^^^^^^^^^^^ expected &str, found str"    really tripped me.
2017-01-11 14:50:21	sargas	Ixrec: You are so damn right... That's embarassing.
2017-01-11 14:50:31	sargas	Thanks guys
2017-01-11 14:50:49	◣	dpyro (dpyro@moz-el40ti.tx.frontiernet.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2017-01-11 14:51:05	Ixrec	always assume the "weird" error message is technically correct but misleading =)
2017-01-11 14:51:18	◥	dpyro (dpyro@moz-el40ti.tx.frontiernet.net) has joined #rust-beginners
2017-01-11 14:51:42	◣	snowe (snowe@moz-ri3.15m.177.128.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 14:51:45	◥	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined #rust-beginners
2017-01-11 14:51:57	◣	sargas (sargas@moz-863roc.hfc.comcastbusiness.net) has quit (Quit: Leaving)
2017-01-11 14:52:09	◥	blue_seale (blue_seale@moz-u9j.qgu.7.46.IP) has joined #rust-beginners
2017-01-11 14:59:00	◥	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has joined #rust-beginners
2017-01-11 14:59:31	◣	EoF (EoF@moz-h6i7lj.dynamic.kabel-deutschland.de) has quit (Ping timeout: 121 seconds)
2017-01-11 15:01:17	◥	albel727 (albel727@moz-njmloa.academ.org) has joined #rust-beginners
2017-01-11 15:02:18	◣	blue_seale (blue_seale@moz-u9j.qgu.7.46.IP) has quit (Client exited)
2017-01-11 15:02:38	◣	sssilver (textual@moz-bac.97e.122.38.IP) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 15:04:49	◥	Ketsuban (ketsuban@moz-iq9o85.abqe.tdt5.0c7d.2a02.IP) has joined #rust-beginners
2017-01-11 15:04:58	cobrien	having a bit of an issue with src/bin and macros
2017-01-11 15:05:19	◣	ril (textual@moz-is83ac.ca.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 15:05:24	cobrien	in src/lib.rs I have `#[macro_use] extern crate log`
2017-01-11 15:05:39	◥	ril (ril@moz-is83ac.ca.comcast.net) has joined #rust-beginners
2017-01-11 15:05:45	cobrien	and in src/bin/client.rs I'm trying to use `info!()`, etc
2017-01-11 15:06:09	durka42	each file under src/bin/ is a crate root
2017-01-11 15:06:17	cobrien	ah okay
2017-01-11 15:06:18	@mbrubeck	cobrien: "src/bin/*.rs" gets compiled as a separate crate, so it'll need its own `#[macro_use] extern crate log;`
2017-01-11 15:07:52	◣	Freyskeyd (Freyskeyd@moz-oa5cvm.abo.bbox.fr) has quit (Ping timeout: 121 seconds)
2017-01-11 15:08:11	◥	EoF (EoF@moz-h6i7lj.dynamic.kabel-deutschland.de) has joined #rust-beginners
2017-01-11 15:08:19	◣	jbradberry (jrb@moz-kpp3mi.biz.rr.com) has quit (Ping timeout: 121 seconds)
2017-01-11 15:09:09	◣	oln (smuxi@moz-h6kap0.customer.cdi.no) has quit (Connection closed)
2017-01-11 15:09:27	◣	ril (ril@moz-is83ac.ca.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 15:09:33	◣	aruiz (aruiz@moz-okfr7b.3452.3kuv.0c7d.2a02.IP) has quit (Connection closed)
2017-01-11 15:10:13	◥	ril (ril@moz-is83ac.ca.comcast.net) has joined #rust-beginners
2017-01-11 15:10:18	◣	ril (ril@moz-is83ac.ca.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2017-01-11 15:10:39	◥	ril (ril@moz-is83ac.ca.comcast.net) has joined #rust-beginners
2017-01-11 15:11:16	◥	ghisvail___ (ghisvail@moz-8k797h.cable.virginm.net) has joined #rust-beginners
2017-01-11 15:11:18	◣	ril (ril@moz-is83ac.ca.comcast.net) has quit (Connection closed)
2017-01-11 15:11:44	◥	kermi (Mibbit@moz-u3i.l4p.189.205.IP) has joined #rust-beginners
2017-01-11 15:11:59	kermi	two questions,
2017-01-11 15:12:28	kermi	1) If using `panic=abort`, are the panic semantics of child threads changed (eg, do they still surface panics to parent thread through join, or will those threads also abort execution immediately)
2017-01-11 15:13:07	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Connection closed)
2017-01-11 15:13:29	◥	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has joined #rust-beginners
2017-01-11 15:14:01	kermi	2) How to use thread::spawn with a custom error type? Following fails because apparently the child closure expects a return of (), not io::Error,       let x: JoinHandle<io::Error> = thread::spawn(|| { ... })
2017-01-11 15:14:20	~steveklabnik	1) all threads will abort
2017-01-11 15:14:24	◥	susurrus (susurrus@moz-85foet.ca.comcast.net) has joined #rust-beginners
2017-01-11 15:14:31	~steveklabnik	2) i am not sure
2017-01-11 15:14:35	◣	delaneyj (delaney@moz-tiqeb1.lv.cox.net) has quit (Quit: Leaving)
2017-01-11 15:14:50	◥	ssebastianj (ssebastianj@moz-qs0mlm.telecom.net.ar) has joined #rust-beginners
2017-01-11 15:15:03	◥	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has joined #rust-beginners
2017-01-11 15:15:36	kermi	Ok but for #1, the docs say "If the child thread panics, join will return an Err containing the argument given to panic."
2017-01-11 15:15:59	kermi	if panic=abort, is there any way to return an error to the joining thread using a typed JoinHandle, or do I need a custom channel?
2017-01-11 15:15:59	~steveklabnik	yes, the docs were written before abort was possible. they need to be re-worded to make it more clear that it depends on panic strategy
2017-01-11 15:16:28	~steveklabnik	there's no way to return anything because your entire program ends execution
2017-01-11 15:16:28	kermi	no but not a panic, just a routine err
2017-01-11 15:16:31	~steveklabnik	ah
2017-01-11 15:16:41	kermi	say I want to surface io::Error into the join without a mpsc channel or anything
2017-01-11 15:16:49	~steveklabnik	yeah so, i think you need to use a channel for this
2017-01-11 15:16:52	~steveklabnik	not 100% sure though
2017-01-11 15:16:56	kermi	it seems like that mechanism will only allow for panics which is kinda silly
2017-01-11 15:17:30	◥	snowe (snowe@moz-ri3.15m.177.128.IP) has joined #rust-beginners
2017-01-11 15:17:31	◣	Fishrock123 (Fishrock123@moz-4ms40e.dsl.bell.ca) has quit (Ping timeout: 121 seconds)
2017-01-11 15:17:38	◣	holgarB (holger@moz-ivdssg.dip0.t-ipconnect.de) has quit (Ping timeout: 121 seconds)
2017-01-11 15:19:07	◣	hindenbug (hindenbug@moz-66u.2l1.69.182.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 15:19:16	◥	caconym (caconym@moz-c1a.kpu.243.216.IP) has joined #rust-beginners
2017-01-11 15:20:14	◥	sargas (sargas@moz-863roc.hfc.comcastbusiness.net) has joined #rust-beginners
2017-01-11 15:20:32	sargas	Are HashMap entries kept in order?
2017-01-11 15:20:32	◣	susurrus (susurrus@moz-85foet.ca.comcast.net) has quit (Client exited)
2017-01-11 15:20:48	shahn	no
2017-01-11 15:21:04	sargas	shahn: Is there a type that achieves this?
2017-01-11 15:21:14	◣	mskalski (mskalski@moz-8u45af.opt.im) has quit (Quit: bye)
2017-01-11 15:21:16	~steveklabnik	BTreeMap, IIRC?
2017-01-11 15:21:22	◣	Binary (Miranda6431@moz-1lhhb3.pools.vodafone-ip.de) has quit (Client exited)
2017-01-11 15:21:25	~steveklabnik	kermi: i _thought_ that you could return a value
2017-01-11 15:21:28	◥	mskalski (mskalski@moz-8u45af.opt.im) has joined #rust-beginners
2017-01-11 15:21:28	◣	Jayflux (Jayflux@moz-om2b67.dsl.as9105.com) has quit (Connection closed)
2017-01-11 15:21:29	shahn	steveklabnik: ping wrt gh 38636
2017-01-11 15:21:30	~steveklabnik	kermi: but i haven't done this myself in a while
2017-01-11 15:21:40	sargas	steveklabnik: BTreeMap it is then, thanks
2017-01-11 15:21:57	~steveklabnik	sargas: i am not 100% sure you should read its docs
2017-01-11 15:22:00	~steveklabnik	shahn: ty, mergin'
2017-01-11 15:22:08	shahn	ty!
2017-01-11 15:22:12	sargas	steveklabnik: Reading right now
2017-01-11 15:23:16	◣	playbot-mini (playbot-min@moz-t76o6j.compute.amazonaws.com) has quit (Connection closed)
2017-01-11 15:23:19	◥	playbot-mini (playbot-min@moz-t76o6j.compute.amazonaws.com) has joined #rust-beginners
2017-01-11 15:23:20	◣	caconym (caconym@moz-c1a.kpu.243.216.IP) has quit (Ping timeout: 121 seconds)
2017-01-11 15:24:21	◣	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has quit (Connection closed)
2017-01-11 15:24:24	sargas	steveklabnik: I think you are right. I just now saw the implementation for BTreeMap: impl<K: Ord, V> BTreeMap<K, V>
2017-01-11 15:25:43	◥	Ayey_ (rune@moz-3uqdma.customer.tdc.net) has joined #rust-beginners
2017-01-11 15:26:52	◥	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has joined #rust-beginners
2017-01-11 15:26:53	◣	nicholasf (nicholasf@moz-15ofn8.iinet.net.au) has quit (Connection closed)
2017-01-11 15:26:54	◥	nicholas_ (nicholasf@moz-15ofn8.iinet.net.au) has joined #rust-beginners
2017-01-11 15:26:59	◣	sobol (steve@moz-1op8i8.gps.caltech.edu) has quit (Quit: WeeChat 1.6)
2017-01-11 15:27:30	◥	mib_rcg3i4 (Mibbit@moz-20eqja.cable.virginm.net) has joined #rust-beginners
2017-01-11 15:27:35	◣	mib_rcg3i4 (Mibbit@moz-20eqja.cable.virginm.net) has quit (Quit: http://www.mibbit.com ajax IRC Client)
2017-01-11 15:27:47	◥	sbeckeriv (becker@moz-kngbbf.tukw.qwest.net) has joined #rust-beginners
2017-01-11 15:42:29	◥	d8v3 (d8v3@moz-00m.h73.195.66.IP) has joined #rust-beginners
2017-01-11 15:42:29	⚡	Topic for #rust-beginners is "Beginner's Rust discussion, unlogged. Ask away, but please allow some time for people to respond! | Book  https://doc.rust-lang.org/book/ | Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct  https://www.rust-lang.org/conduct.html"
2017-01-11 15:42:29	⚡	Topic set by niconii (nicole@moz-fg53dj.midco.net) on Thu, 26 May 2016 03:19:40
2017-01-11 15:42:29	⚡	Channel #rust-beginners: 660 nicks (5 ops, 0 halfops, 0 voices, 655 normals)
2017-01-11 15:42:31	⚡	Channel created on Tue, 27 Oct 2015 10:04:25
2017-01-11 15:42:52	@mbrubeck	There's one for macOS+iOS, and one for everything except (macOS, iOS, Windows).
2017-01-11 15:43:06	◣	Binero (Binero@moz-tqrl52.sji7.g8ie.a03f.2a02.IP) has quit (Client exited)
2017-01-11 15:43:08	⚡	You are now known as boon
2017-01-11 15:43:14	◥	CodingChris (CodingChris@moz-n349sa.netcologne.de) has joined #rust-beginners
2017-01-11 15:43:29	tl8atWork	right, so what should I do to get it to build?
2017-01-11 15:43:29	◥	Itkovian (Itkovian@moz-nvl427.access.telenet.be) has joined #rust-beginners
2017-01-11 15:45:55	◣	ubsandroid_ (ubsan@moz-nvdnvq.bin9.gd67.fb90.2607.IP) has quit (Quit: <3)
